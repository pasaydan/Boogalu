[{"F:\\Toms\\Business-work\\Boogalu\\src\\index.js":"1","F:\\Toms\\Business-work\\Boogalu\\src\\reportWebVitals.js":"2","F:\\Toms\\Business-work\\Boogalu\\src\\App.js":"3","F:\\Toms\\Business-work\\Boogalu\\src\\Providers\\StateProvider.js":"4","F:\\Toms\\Business-work\\Boogalu\\src\\Components\\Footer\\index.js":"5","F:\\Toms\\Business-work\\Boogalu\\src\\Services\\LocalstorageCache.js":"6","F:\\Toms\\Business-work\\Boogalu\\src\\Components\\Navigation\\index.js":"7","F:\\Toms\\Business-work\\Boogalu\\src\\Components\\Profile\\Profile.js":"8","F:\\Toms\\Business-work\\Boogalu\\src\\Components\\Admin\\Competition.js":"9","F:\\Toms\\Business-work\\Boogalu\\src\\Components\\Admin\\Subscription.js":"10","F:\\Toms\\Business-work\\Boogalu\\src\\Components\\EditProfile\\EditProfile.js":"11","F:\\Toms\\Business-work\\Boogalu\\src\\Components\\Login\\Login.js":"12","F:\\Toms\\Business-work\\Boogalu\\src\\Components\\Upcoming\\index.js":"13","F:\\Toms\\Business-work\\Boogalu\\src\\Components\\Splash\\index.js":"14","F:\\Toms\\Business-work\\Boogalu\\src\\Components\\Contactus\\index.js":"15","F:\\Toms\\Business-work\\Boogalu\\src\\Components\\Homepage\\index.js":"16","F:\\Toms\\Business-work\\Boogalu\\src\\Components\\Signup\\index.js":"17","F:\\Toms\\Business-work\\Boogalu\\src\\Components\\Competitions\\index.js":"18","F:\\Toms\\Business-work\\Boogalu\\src\\Components\\Subscriptions\\index.js":"19","F:\\Toms\\Business-work\\Boogalu\\src\\Components\\VideoUploader\\index.js":"20","F:\\Toms\\Business-work\\Boogalu\\src\\Components\\Feeds\\index.js":"21","F:\\Toms\\Business-work\\Boogalu\\src\\Components\\Loader\\index.js":"22","F:\\Toms\\Business-work\\Boogalu\\src\\Components\\Page404\\index.js":"23","F:\\Toms\\Business-work\\Boogalu\\src\\Components\\Notification\\index.js":"24","F:\\Toms\\Business-work\\Boogalu\\src\\Reducers\\index.js":"25","F:\\Toms\\Business-work\\Boogalu\\src\\Services\\Upload.service.js":"26","F:\\Toms\\Business-work\\Boogalu\\src\\Services\\Utils.js":"27","F:\\Toms\\Business-work\\Boogalu\\src\\Services\\Competition.service.js":"28","F:\\Toms\\Business-work\\Boogalu\\src\\Components\\Vedio\\Video.js":"29","F:\\Toms\\Business-work\\Boogalu\\src\\Actions\\User\\index.js":"30","F:\\Toms\\Business-work\\Boogalu\\src\\Services\\UploadedVideo.service.js":"31","F:\\Toms\\Business-work\\Boogalu\\src\\Services\\User.service.js":"32","F:\\Toms\\Business-work\\Boogalu\\src\\Services\\EnrollCompetition.service.js":"33","F:\\Toms\\Business-work\\Boogalu\\src\\Services\\Subscription.service.js":"34","F:\\Toms\\Business-work\\Boogalu\\src\\Data\\LessonsCategory.js":"35","F:\\Toms\\Business-work\\Boogalu\\src\\Actions\\LoginFlow\\index.js":"36","F:\\Toms\\Business-work\\Boogalu\\src\\Actions\\Competition\\index.js":"37","F:\\Toms\\Business-work\\Boogalu\\src\\Components\\VideoDetails\\index.js":"38","F:\\Toms\\Business-work\\Boogalu\\src\\Components\\CompetitionsDetails\\index.js":"39","F:\\Toms\\Business-work\\Boogalu\\src\\Actions\\Notification\\index.js":"40","F:\\Toms\\Business-work\\Boogalu\\src\\Actions\\Loader\\index.js":"41","F:\\Toms\\Business-work\\Boogalu\\src\\Actions\\Utility\\index.js":"42","F:\\Toms\\Business-work\\Boogalu\\src\\Constants\\index.js":"43","F:\\Toms\\Business-work\\Boogalu\\src\\Services\\firebase.js":"44","F:\\Toms\\Business-work\\Boogalu\\src\\Data\\RegistrationStepData.js":"45","F:\\Toms\\Business-work\\Boogalu\\src\\Components\\ProfileImage\\index.js":"46","F:\\Toms\\Business-work\\Boogalu\\src\\Database\\index.js":"47","F:\\Toms\\Business-work\\Boogalu\\src\\Components\\BuySubscription\\index.js":"48","F:\\Toms\\Business-work\\Boogalu\\src\\Actions\\Subscription\\index.js":"49","F:\\Toms\\Business-work\\Boogalu\\src\\Components\\EnrollCompetition\\index.js":"50"},{"size":737,"mtime":1610191707084,"results":"51","hashOfConfig":"52"},{"size":375,"mtime":1610191707092,"results":"53","hashOfConfig":"52"},{"size":3959,"mtime":1612168119765,"results":"54","hashOfConfig":"52"},{"size":1104,"mtime":1612288719884,"results":"55","hashOfConfig":"52"},{"size":4562,"mtime":1611768340593,"results":"56","hashOfConfig":"52"},{"size":251,"mtime":1610191707084,"results":"57","hashOfConfig":"52"},{"size":12384,"mtime":1612289355679,"results":"58","hashOfConfig":"52"},{"size":17476,"mtime":1612322848052,"results":"59","hashOfConfig":"52"},{"size":11266,"mtime":1612113376602,"results":"60","hashOfConfig":"52"},{"size":9877,"mtime":1612113584395,"results":"61","hashOfConfig":"52"},{"size":16090,"mtime":1612288719878,"results":"62","hashOfConfig":"52"},{"size":15358,"mtime":1612168119772,"results":"63","hashOfConfig":"52"},{"size":1172,"mtime":1611468791321,"results":"64","hashOfConfig":"52"},{"size":351,"mtime":1611462124467,"results":"65","hashOfConfig":"52"},{"size":2095,"mtime":1611674526188,"results":"66","hashOfConfig":"52"},{"size":4956,"mtime":1612077601677,"results":"67","hashOfConfig":"52"},{"size":33063,"mtime":1612278242351,"results":"68","hashOfConfig":"52"},{"size":4657,"mtime":1612288719825,"results":"69","hashOfConfig":"52"},{"size":6172,"mtime":1612288719879,"results":"70","hashOfConfig":"52"},{"size":13697,"mtime":1612288719884,"results":"71","hashOfConfig":"52"},{"size":8199,"mtime":1612322848051,"results":"72","hashOfConfig":"52"},{"size":370,"mtime":1612111467586,"results":"73","hashOfConfig":"52"},{"size":469,"mtime":1612078925784,"results":"74","hashOfConfig":"52"},{"size":1218,"mtime":1612237332896,"results":"75","hashOfConfig":"52"},{"size":1827,"mtime":1612168119780,"results":"76","hashOfConfig":"52"},{"size":3006,"mtime":1611725424906,"results":"77","hashOfConfig":"52"},{"size":1447,"mtime":1611725424909,"results":"78","hashOfConfig":"52"},{"size":3117,"mtime":1611725424905,"results":"79","hashOfConfig":"52"},{"size":634,"mtime":1611469409351,"results":"80","hashOfConfig":"52"},{"size":403,"mtime":1610191706906,"results":"81","hashOfConfig":"52"},{"size":2502,"mtime":1612322848058,"results":"82","hashOfConfig":"52"},{"size":2574,"mtime":1612168119781,"results":"83","hashOfConfig":"52"},{"size":3387,"mtime":1611993980668,"results":"84","hashOfConfig":"52"},{"size":2649,"mtime":1612009015730,"results":"85","hashOfConfig":"52"},{"size":12210,"mtime":1611462124486,"results":"86","hashOfConfig":"52"},{"size":320,"mtime":1611725424874,"results":"87","hashOfConfig":"52"},{"size":193,"mtime":1611725424866,"results":"88","hashOfConfig":"52"},{"size":4273,"mtime":1612368043096,"results":"89","hashOfConfig":"52"},{"size":20769,"mtime":1612288719875,"results":"90","hashOfConfig":"52"},{"size":336,"mtime":1612168119753,"results":"91","hashOfConfig":"52"},{"size":299,"mtime":1612235378700,"results":"92","hashOfConfig":"52"},{"size":369,"mtime":1612168119765,"results":"93","hashOfConfig":"52"},{"size":1948,"mtime":1612278662601,"results":"94","hashOfConfig":"52"},{"size":1017,"mtime":1611725424909,"results":"95","hashOfConfig":"52"},{"size":7647,"mtime":1610191706964,"results":"96","hashOfConfig":"52"},{"size":408,"mtime":1612322848055,"results":"97","hashOfConfig":"52"},{"size":142,"mtime":1611725424900,"results":"98","hashOfConfig":"52"},{"size":6107,"mtime":1612288719805,"results":"99","hashOfConfig":"52"},{"size":196,"mtime":1612009015708,"results":"100","hashOfConfig":"52"},{"size":6669,"mtime":1612107591258,"results":"101","hashOfConfig":"52"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},"g3scqe",{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"104"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"104"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"104"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"104"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"104"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"104"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"104"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"104"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"104"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"104"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"104"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":33,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"104"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"104"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"104"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"104"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"104"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"104"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"104"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"104"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"198","messages":"199","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200","usedDeprecatedRules":"104"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"215","usedDeprecatedRules":"104"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"218","usedDeprecatedRules":"104"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"221","usedDeprecatedRules":"104"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"226","usedDeprecatedRules":"104"},"F:\\Toms\\Business-work\\Boogalu\\src\\index.js",[],["227","228"],"F:\\Toms\\Business-work\\Boogalu\\src\\reportWebVitals.js",[],"F:\\Toms\\Business-work\\Boogalu\\src\\App.js",["229"],"import React, { useState, useEffect } from \"react\";\r\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\r\nimport \"./App.scss\"\r\nimport Login from \"./Components/Login/Login\";\r\nimport SplashScreen from './Components/Splash';\r\nimport Navigation from \"./Components/Navigation/index\";\r\nimport Homepage from \"./Components/Homepage\";\r\nimport Footer from \"./Components/Footer/index\";\r\nimport Signup from \"./Components/Signup\";\r\nimport Profile from \"./Components/Profile/Profile\";\r\nimport Upcoming from \"./Components/Upcoming\";\r\nimport Competitions from \"./Components/Competitions\";\r\nimport Competition from \"./Components/Admin/Competition\"\r\nimport Subscriptions from \"./Components/Subscriptions\";\r\nimport EditProfile from \"./Components/EditProfile/EditProfile\";\r\nimport ContactUs from \"./Components/Contactus\";\r\nimport VideoUploader from \"./Components/VideoUploader\";\r\nimport Subscription from \"./Components/Admin/Subscription\";\r\nimport Feeds from \"./Components/Feeds\";\r\nimport Page404 from './Components/Page404';\r\nimport Loader from \"./Components/Loader\";\r\nimport { useStoreConsumer } from './Providers/StateProvider';\r\nimport Notification from \"./Components/Notification\";\r\n\r\nfunction App() {\r\n  const { state } = useStoreConsumer();\r\n  const [isSplashVisible, toggleSplash] = useState(true);\r\n  const [transitionOpacityClass, toggleTransition] = useState('');\r\n  useEffect(() => {\r\n    setTimeout(() => {\r\n      toggleSplash(false);\r\n    }, 2500);\r\n\r\n    setTimeout(() => {\r\n      toggleTransition('visible-transition');\r\n    }, 2800);\r\n  }, []);\r\n\r\n  return (\r\n    <Router>\r\n      <div className=\"App\">\r\n        {\r\n          isSplashVisible ?\r\n            <SplashScreen />\r\n            :\r\n            <div className={`main-content-wrapper ${transitionOpacityClass}`}>\r\n              <Navigation />\r\n              <Notification />\r\n              {state?.isLoading && <Loader />}\r\n              <Switch>\r\n                <Route exact path=\"/contactus\">\r\n                  <ContactUs />\r\n                </Route>\r\n                <Route exact path=\"/login:plan\">\r\n                  <Login />\r\n                </Route>\r\n                <Route exact path=\"/login\">\r\n                  <Login />\r\n                </Route>\r\n                <Route exact path=\"/profile/edit\">\r\n                  <EditProfile />\r\n                </Route>\r\n                <Route exact path=\"/register:plan\">\r\n                  <Signup />\r\n                </Route>\r\n                <Route exact path=\"/register\">\r\n                  <Signup />\r\n                </Route>\r\n                <Route exact path=\"/lessons\">\r\n                  <Upcoming />\r\n                </Route>\r\n                <Route exact path=\"/competitions\">\r\n                  <Competitions />\r\n                </Route>\r\n                <Route exact path=\"/subscription\">\r\n                  <Subscriptions />\r\n                </Route>\r\n                <Route exact path=\"/profile\">\r\n                  <Profile />\r\n                </Route>\r\n                <Route exact path=\"/home\">\r\n                  <Homepage />\r\n                </Route>\r\n                <Route exact path=\"/upload-video\">\r\n                  <VideoUploader />\r\n                </Route>\r\n                <Route exact path=\"/feeds\">\r\n                  <Feeds />\r\n                </Route>\r\n                <Route exact path=\"/\">\r\n                  <Homepage />\r\n                </Route>\r\n\r\n                {/* admin routes */}\r\n                <Route exact path=\"/admin/competition\">\r\n                  <Competition />\r\n                </Route>\r\n                <Route exact path=\"/admin/subscription\">\r\n                  <Subscription />\r\n                </Route>\r\n\r\n                {/* Handling 404 */}\r\n                <Route>\r\n                  <Page404 />\r\n                </Route>\r\n              </Switch>\r\n              <Footer />\r\n            </div>\r\n        }\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\nexport default App;","F:\\Toms\\Business-work\\Boogalu\\src\\Providers\\StateProvider.js",["230"],"import React, { createContext, useReducer, useContext } from 'react';\r\nimport storeReducer from '../Reducers';\r\nimport LocalstorageCache from '../Services/LocalstorageCache';\r\n\r\nconst loggedInUserState = {\r\n  name: '',\r\n  username: '',\r\n  email: '',\r\n  phone: '',\r\n  dob: '2017-05-24',\r\n  gender: '',\r\n  country: '',\r\n  state: '',\r\n  password: '',\r\n  confirmPassword: '',\r\n  bio: '',\r\n  tnc: true,\r\n  profileImage: '',\r\n  source: ''\r\n}\r\n\r\nconst initialState = localStorage.getItem(\"Choreoculture\") ? JSON.parse(localStorage.getItem(\"Choreoculture\"))\r\n  : {\r\n    loggedInUser: {},\r\n    isLoading: null,\r\n    currentLoginFlow: null,\r\n    notification: {\r\n      msg: \"\",\r\n      type: \"\",\r\n      time: 3000\r\n    }\r\n  };\r\nconst store = createContext(initialState);\r\nconst { Provider } = store;\r\n\r\nconst useStoreConsumer = () => useContext(store);\r\n\r\nconst StateProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(LocalstorageCache(storeReducer), initialState);\r\n\r\n  return <Provider value={{ state, dispatch }}>{children}</Provider>;\r\n};\r\n\r\nexport { store, StateProvider, useStoreConsumer }","F:\\Toms\\Business-work\\Boogalu\\src\\Components\\Footer\\index.js",["231","232","233","234","235","236","237"],"import React, { useState, useEffect } from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport boogaluLogo from '../../Images/Boogalu-logo.svg';\r\nimport { FaInstagramSquare, FaYoutube, FaFacebookSquare } from 'react-icons/fa';\r\nimport * as $ from 'jquery';\r\n\r\nfunction Footer() {\r\n    const history = useHistory();\r\n    \r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            const pathName = history?.location?.pathname.split('/')[1];\r\n            const footerLinks = document.querySelectorAll('.js-page-links li');\r\n\r\n            if (footerLinks && footerLinks.length) {\r\n                footerLinks.forEach((ele) => {\r\n                    const getData = ele.getAttribute('data-name').toLocaleLowerCase();\r\n                    if (pathName?.length && getData.includes(pathName)) {\r\n                        ele.classList.add('active');\r\n                    }\r\n                });\r\n            }\r\n\r\n        }, 1000);\r\n\r\n    }, []);\r\n\r\n    function navigatePageLinks(event, path) {\r\n        const footerLinks = document.querySelectorAll('.js-page-links li');\r\n        if (footerLinks && footerLinks.length) {\r\n            footerLinks.forEach((ele) => {\r\n                const getData = ele.getAttribute('data-name').toLocaleLowerCase();\r\n                if (path?.length && getData.includes(path)) {\r\n                    ele.classList.add('active');\r\n                } else {\r\n                    if (ele.classList.contains('active')) {\r\n                        ele.classList.remove('active');    \r\n                    }\r\n                }\r\n            });\r\n        }\r\n        history.push(`/${path}`);\r\n        if (path) {\r\n            setTimeout(() => {\r\n                $('html,body').animate({\r\n                    scrollTop: 0\r\n                }, 700);\r\n            }, 100);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <footer className=\"flex-container-VC\">\r\n                <div className=\"flex-1 copyright-wrap\">\r\n                    <div className=\"footer-logo-wrap\">\r\n                        <img src={boogaluLogo} alt=\"Logo\" className=\"image-7\" />\r\n                    </div>\r\n                    <div className=\"copyright-inner\">\r\n                        &#169; 2021 &nbsp;  \r\n                        <a href=\"https://www.choreoculture.com/\" target=\"_blank\">\r\n                            CHOREOCULTURE STUDIO.\r\n                        </a>\r\n                        <div>ALL RIGHTS RESERVED.</div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"flex-1\">\r\n                    <div className=\"footer-tagline\" >Get the latest dance content &amp; ChoreoCulture news</div>\r\n                    <div className=\"email-input-inner\">\r\n                        <input type=\"email\" placeholder=\"Email\" />\r\n                    </div>\r\n                    <button className=\"subscribe\" >Subscribe</button>\r\n                </div>\r\n                <div className=\"footer-menus flex-1\">\r\n                    <ul className=\"menu-lists js-page-links flex-1\">\r\n                        <li data-name=\"career\">Careers</li>\r\n                        <li data-name=\"contactus\">\r\n                            <a onClick={(e) => navigatePageLinks(e, 'contactus')}>Contact us</a>\r\n                        </li>\r\n                        <li data-name=\"terms\">Terms</li>\r\n                    </ul>\r\n                    <ul className=\"menu-lists menu-lists-2 flex-1\">\r\n                        <li>\r\n                            <a href=\"https://www.instagram.com/choreo_culture/?hl=en\" title=\"Follow us on Insta\" target=\"_blank\">\r\n                                <i><FaInstagramSquare /></i>\r\n                                <span>Instagram</span>\r\n                            </a>\r\n                        </li>\r\n                        <li>\r\n                            <a href=\"https://www.youtube.com/user/anjanevents\" title=\"Subscribe our channel\" target=\"_blank\">\r\n                                <i><FaYoutube /></i>\r\n                                <span>Youtube</span>\r\n                            </a>\r\n                        </li>\r\n                        <li>\r\n                            <a href=\"https://www.facebook.com/choreocultureindia/\" title=\"Like our FB page\" target=\"_blank\">\r\n                                <i><FaFacebookSquare /></i>\r\n                                <span>Facebook</span>\r\n                            </a>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </footer>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Footer\r\n","F:\\Toms\\Business-work\\Boogalu\\src\\Services\\LocalstorageCache.js",[],"F:\\Toms\\Business-work\\Boogalu\\src\\Components\\Navigation\\index.js",["238","239","240","241","242"],"import React, { useState, useEffect, useRef } from 'react';\r\nimport { FaHome, FaBookReader, FaCloudUploadAlt, FaTrophy, FaStaylinked } from 'react-icons/fa';\r\nimport boogaluLogo from '../../Images/Boogalu-logo.svg';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useStoreConsumer } from '../../Providers/StateProvider';\r\nimport { logoutUser } from '../../Actions/User';\r\nimport AccountCircleOutlinedIcon from '@material-ui/icons/AccountCircleOutlined';\r\nimport { enableLoginFlow } from \"../../Actions/LoginFlow\";\r\nimport { disableLoginFlow } from \"../../Actions/LoginFlow\";\r\nimport VideoUploader from \"../VideoUploader\";\r\nimport { NOTIFICATION_SUCCCESS, NOTIFICATION_ERROR } from \"../../Constants\";\r\nimport { displayNotification } from \"../../Actions/Notification\";\r\nimport * as $ from 'jquery';\r\nconst SCROLL_TOP_LIMIT = 200;\r\n\r\nfunction Navigation() {\r\n    const [goingUpClass, setGoingUpClass] = useState('');\r\n    const [hideVdoUploadBtn, setHideVdoUploadBtn] = useState(false);\r\n    const [didMount, setDidMount] = useState(false);\r\n    const [isMobile, toggleMobile] = useState(false);\r\n    const [goingDownClass, setGoingDownClass] = useState('');\r\n    const [showProfileTab, setShowProfileTab] = useState(false);\r\n    const ref = useRef();\r\n    const mobilHomelinkRef = useRef();\r\n    const history = useHistory();\r\n    const { state, dispatch } = useStoreConsumer();\r\n    const loggedInUser = state.loggedInUser;\r\n    const [openVdoUploadModal, setOpenVdoUploadModal] = useState(false)\r\n    useOnClickOutside(ref, () => setShowProfileTab(false));\r\n\r\n    useEffect(() => {\r\n        setDidMount(true);\r\n        setHideVdoUploadBtn(false);\r\n        let windowViewPortWidth = window.innerWidth;\r\n        if (windowViewPortWidth > 1023) {\r\n            toggleMobile(false);\r\n        } else {\r\n            toggleMobile(true);\r\n        }\r\n\r\n        const handleScroll = () => {\r\n            const currentScrollY = window.scrollY;\r\n            if (currentScrollY < SCROLL_TOP_LIMIT) {\r\n                setGoingUpClass('');\r\n                setGoingDownClass('');\r\n            } else {\r\n                setGoingUpClass('scrolled-up');\r\n                setTimeout(() => {\r\n                    setGoingDownClass('scrolled-down');\r\n                }, 200);\r\n            }\r\n        };\r\n\r\n        const windowResize = () => {\r\n            windowViewPortWidth = window.innerWidth;\r\n            if (windowViewPortWidth > 1023) {\r\n                toggleMobile(false);\r\n            } else {\r\n                toggleMobile(true);\r\n            }\r\n        }\r\n\r\n\r\n        setTimeout(() => {\r\n            const pathName = history?.location?.pathname.split('/')[1];\r\n            const navLinks = document.querySelectorAll('.nav-ul a');\r\n            if (pathName.includes('register') || pathName.includes('login') || pathName.includes('upload-video') || pathName.includes('admin') || pathName.includes('admin')) {\r\n                setHideVdoUploadBtn(true);\r\n            }\r\n            if (navLinks && navLinks.length) {\r\n                navLinks.forEach((ele) => {\r\n                    const getHref = ele.getAttribute('href').toLocaleLowerCase();\r\n                    if (pathName?.length && getHref.includes(pathName)) {\r\n                        ele.classList.add('active');\r\n                    }\r\n                });\r\n            }\r\n        }, 1000);\r\n\r\n        window.addEventListener(\"resize\", windowResize, { passive: true });\r\n        window.addEventListener(\"scroll\", handleScroll, { passive: true });\r\n        return () => setDidMount(false);\r\n    }, [isMobile]);\r\n\r\n    useEffect(() => {\r\n        const listenRouteChange = history.listen((location, action) => {\r\n            const pathName = location?.pathname.split('/')[1];\r\n            if (pathName.includes('register') || pathName.includes('login') || pathName.includes('upload-video') || pathName.includes('admin') || pathName.includes('admin')) setHideVdoUploadBtn(true);\r\n            else setHideVdoUploadBtn(false);\r\n            if ((!pathName || pathName.includes('lessons') || pathName.includes('contactus') || pathName.includes('home')) && state.currentLoginFlow) {\r\n                dispatch(disableLoginFlow());\r\n            }\r\n        });\r\n    })\r\n\r\n    const logout = () => {\r\n        dispatch(displayNotification({\r\n            msg: \"Logout Successfully\",\r\n            type: NOTIFICATION_SUCCCESS,\r\n            time: 3000\r\n        }))\r\n        console.log('logout success');\r\n        dispatch(logoutUser());\r\n        setShowProfileTab(false)\r\n        history.push(`/login`);\r\n    }\r\n\r\n    const onClickNav = (e, route) => {\r\n        e.preventDefault();\r\n        const navLinks = document.querySelectorAll('.nav-ul a');\r\n\r\n        setTimeout(() => {\r\n            const pathName = history?.location?.pathname.split('/')[1];\r\n            if (pathName.includes('register') || pathName.includes('login') || pathName.includes('upload-video') || pathName.includes('admin')) setHideVdoUploadBtn(true);\r\n            else setHideVdoUploadBtn(false);\r\n        });\r\n\r\n        if (navLinks && navLinks.length) {\r\n            navLinks.forEach((ele) => {\r\n                if (ele.classList.contains('active')) {\r\n                    ele.classList.remove('active');\r\n                }\r\n            });\r\n        }\r\n        if (route) {\r\n            history.push(`/${route}`);\r\n            e.target.classList.add('active');\r\n            setTimeout(() => {\r\n                let target = $(`.${route}`);\r\n                if (target && target.offset()) {\r\n                    $('html,body').animate({\r\n                        scrollTop: target.offset().top - 200\r\n                    }, 700);\r\n                }\r\n            }, 100);\r\n        } else {\r\n            history.push(`/`);\r\n            setTimeout(() => {\r\n                let target = $(`.homepage`);\r\n                if (target.length) {\r\n                    $('html,body').animate({\r\n                        scrollTop: target.offset().top - 200\r\n                    }, 700);\r\n                }\r\n            }, 100);\r\n        }\r\n    }\r\n    // Hook\r\n    function useOnClickOutside(ref, handler) {\r\n        useEffect(\r\n            () => {\r\n                const listener = event => {\r\n                    if (!ref.current || ref.current.contains(event.target)) {\r\n                        return;\r\n                    }\r\n\r\n                    handler(event);\r\n                };\r\n                document.addEventListener('mousedown', listener);\r\n                document.addEventListener('touchstart', listener);\r\n                return () => {\r\n                    document.removeEventListener('mousedown', listener);\r\n                    document.removeEventListener('touchstart', listener);\r\n                };\r\n            },\r\n            [ref, handler]\r\n        );\r\n    }\r\n\r\n    function navigateToUserRegistrationLogin(path) {\r\n        setHideVdoUploadBtn(true);\r\n        history.push(`/${path}`)\r\n    }\r\n\r\n    if (!didMount) {\r\n        return null;\r\n    }\r\n\r\n    const uploadVdo = (e) => {\r\n        // setHideVdoUploadBtn(true);\r\n        e.preventDefault();\r\n        if (loggedInUser && loggedInUser.email && loggedInUser.phone) {\r\n            // history.push({\r\n            //     pathname: '/upload-video',\r\n            //     state: null\r\n            // })\r\n            setOpenVdoUploadModal(true);\r\n        } else {\r\n            dispatch(enableLoginFlow('upload-video'));\r\n            history.push({\r\n                pathname: '/login',\r\n                state: null\r\n            })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <nav className={`navigation-wrap ${goingUpClass} ${goingDownClass}`}>\r\n                <div className=\"flex-container desktop-navigation\">\r\n                    <h1 title=\"home\" >\r\n                        <a href=\"/\" onClick={(e) => onClickNav(e, '')}>\r\n                            <img src={boogaluLogo} alt=\"Boogalu\" />\r\n                        </a>\r\n                    </h1>\r\n                    {\r\n                        !isMobile ?\r\n                            <ul className=\"flex-1 nav-ul\">\r\n                                <li><a href=\"#Lessons\" onClick={(e) => onClickNav(e, 'lessons')}>Lessons</a></li>\r\n                                <li><a href=\"#Competitions\" onClick={(e) => onClickNav(e, 'competitions')}>Competitions</a></li>\r\n                                <li><a href=\"#Subscription\" onClick={(e) => onClickNav(e, 'subscription')}>Subscription</a></li>\r\n                            </ul> : ''\r\n                    }\r\n                    {(!loggedInUser || !loggedInUser.phone) && <div className=\"flex-2 signup-wrap\" >\r\n                        <button className=\"btn primary-light login\" onClick={() => navigateToUserRegistrationLogin('login')}>Login</button>\r\n                        <button className=\"btn primary-dark signup\" onClick={() => navigateToUserRegistrationLogin('register')}>Sign Up</button>\r\n                    </div>}\r\n\r\n                    {loggedInUser && loggedInUser.phone && <div className=\"flex-2 signup-wrap\" >\r\n                        <div className=\"profile\" ref={ref}>\r\n                            {loggedInUser.profileImage ? <div className=\"profile-img-wrap\">\r\n                                <img src={loggedInUser.profileImage} onClick={() => setShowProfileTab(true)} style={{ fontSize: '35px'}} />\r\n                            </div> : <AccountCircleOutlinedIcon onClick={() => setShowProfileTab(true)} style={{ fontSize: '35px'}} />}\r\n                          \r\n                            {showProfileTab && <div className=\"profile-tab-wrap\">\r\n                                <div className=\"profile\" onClick={() => { history.push('/profile'); setShowProfileTab(false) }}>Profile</div>\r\n                                <div className=\"profile\" onClick={() => { history.push('/feeds'); setShowProfileTab(false) }}>Feeds</div>\r\n                                <div className=\"logout\" onClick={() => logout()}>Logout</div>\r\n                            </div>}\r\n                        </div>\r\n                        {/* <button className=\"signup\" onClick={() => logout()}>Logout</button> */}\r\n                    </div>}\r\n                </div>\r\n                {\r\n                    !hideVdoUploadBtn ?\r\n                        <a href=\"\" className=\"upload-btn\" onClick={(e) => uploadVdo(e)}>\r\n                            <i><FaCloudUploadAlt /></i>\r\n                        </a> : ''\r\n                }\r\n                {\r\n                    isMobile ?\r\n                        <div className=\"sticky-mobile-menu\">\r\n                            <ul className=\"flex-1 nav-ul\">\r\n                                <li>\r\n                                    <a href=\"/\" ref={mobilHomelinkRef} onClick={(e) => onClickNav(e, '')}>\r\n                                        <i>\r\n                                            <FaHome />\r\n                                        </i>\r\n                                        <span>Home</span>\r\n                                    </a>\r\n                                </li>\r\n                                <li>\r\n                                    <a href=\"#Lessons\" onClick={(e) => onClickNav(e, 'lessons')}>\r\n                                        <i><FaBookReader /></i>\r\n                                        <span>Lessons</span>\r\n                                    </a>\r\n                                </li>\r\n                                <li>\r\n                                    <a href=\"#upload\" onClick={(e) => onClickNav(e, 'competitions')}>\r\n                                        <i><FaTrophy /></i>\r\n                                        <span>Competition</span>\r\n                                    </a>\r\n                                </li>\r\n                                <li>\r\n                                    <a href=\"#Subscription\" onClick={(e) => onClickNav(e, 'subscription')}>\r\n                                        <i><FaStaylinked /></i>\r\n                                        <span>Subscription</span>\r\n                                    </a>\r\n                                </li>\r\n                            </ul>\r\n                        </div>\r\n                        : ''\r\n                }\r\n                {openVdoUploadModal && <VideoUploader handleVdoUploadResponse={() => setOpenVdoUploadModal(false)} />}\r\n            </nav>\r\n        </>\r\n    )\r\n}\r\nexport default Navigation","F:\\Toms\\Business-work\\Boogalu\\src\\Components\\Profile\\Profile.js",["243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"import React, { useState, useEffect, useRef } from 'react'\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useStoreConsumer } from '../../Providers/StateProvider';\r\nimport AccountCircleOutlinedIcon from '@material-ui/icons/AccountCircleOutlined';\r\nimport LoyaltyOutlinedIcon from '@material-ui/icons/LoyaltyOutlined';\r\nimport FavoriteBorderOutlinedIcon from '@material-ui/icons/FavoriteBorderOutlined';\r\nimport CollectionsOutlinedIcon from '@material-ui/icons/CollectionsOutlined';\r\nimport PropTypes from 'prop-types';\r\nimport { useTheme } from '@material-ui/core/styles';\r\nimport SwipeableViews from 'react-swipeable-views';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\nimport * as $ from 'jquery';\r\nimport { getUploadedVideosByUserId } from \"../../Services/UploadedVideo.service\";\r\nimport { getCompetitionByUserId } from \"../../Services/EnrollCompetition.service\";\r\nimport CompetitionsDetails from \"../CompetitionsDetails\";\r\nimport { getCompetitionsList } from \"../../Services/Competition.service\";\r\nimport { setActiveCompetition } from \"../../Actions/Competition\";\r\nimport Vedio from \"../Vedio/Video\";\r\nimport { enableLoading, disableLoading } from \"../../Actions/Loader\";\r\nimport { removeDataRefetchModuleName } from \"../../Actions/Utility\";\r\nimport FavoriteBorder from '@material-ui/icons/FavoriteBorder';\r\nimport Favorite from '@material-ui/icons/Favorite';\r\nimport CommentOutlined from '@material-ui/icons/CommentOutlined';\r\nimport { updateVideoLikes, updateVideoComments } from \"../../Services/UploadedVideo.service\";\r\nimport VideoDetails from '../VideoDetails'\r\nimport { getAllUser } from \"../../Services/User.service\";\r\n\r\nfunction TabPanel(props) {\r\n    const { children, value, index, ...other } = props;\r\n\r\n    return (\r\n        <div\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`full-width-tabpanel-${index}`}\r\n            aria-labelledby={`full-width-tab-${index}`}\r\n            {...other}\r\n        >\r\n            {value === index && (\r\n                <Box p={3}>\r\n                    <Typography>{children}</Typography>\r\n                </Box>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n    children: PropTypes.node,\r\n    index: PropTypes.any.isRequired,\r\n    value: PropTypes.any.isRequired,\r\n};\r\n\r\nfunction a11yProps(index) {\r\n    return {\r\n        id: `full-width-tab-${index}`,\r\n        'aria-controls': `full-width-tabpanel-${index}`,\r\n    };\r\n}\r\nfunction Profile() {\r\n    const history = useHistory();\r\n    const theme = useTheme();\r\n    const { state, dispatch } = useStoreConsumer();\r\n    const [value, setValue] = useState(0);\r\n    const loggedInUser = state.loggedInUser;\r\n    const [UserUploadedVideoList, setUserUploadedVideoList] = useState([]);\r\n    const [UserCompetitionsList, setUserCompetitionsList] = useState([]);\r\n    const [UserLikedVideoList, setUserLikedVideoList] = useState([]);\r\n    const [openUserEnrolledCompDetailsModal, setOpenUserEnrolledCompDetailsModal] = useState(false);\r\n    const [initialStep, setInitialStep] = useState(1);\r\n    const profileOuterRef = useRef();\r\n    const userTabsRef = useRef();\r\n    const [activeVideoObj, setActiveVideoObj] = useState({})\r\n    const [commentModal, setCommentModal] = useState(false)\r\n\r\n    useEffect(() => {\r\n        if (!loggedInUser || !loggedInUser.email) history.push('/login')\r\n        $('html,body').animate({\r\n            scrollTop: 0\r\n        }, 500);\r\n\r\n        document.addEventListener('scroll', onWindowScroll);\r\n        dispatch(enableLoading());\r\n        getCompetitionByUserId(loggedInUser.key).subscribe((list) => { dispatch(disableLoading()); setUserCompetitionsList(list) });\r\n        // getCompetitionByUserId(loggedInUser.key).subscribe((list) => UserLikedVideoList(list));\r\n    }, []);\r\n\r\n    const getAllUserList = () => {\r\n        return new Promise((res, rej) => {\r\n            getAllUser().subscribe((users) => {\r\n                res(users);\r\n            });\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        getUploadedVideosByUserId(loggedInUser.key).subscribe((list) => {\r\n            setUserUploadedVideoList(list);\r\n            if (list.length != 0) {\r\n                getAllUserList().then((data) => {\r\n                    let userList = data;\r\n                    let userVdoCopy = [...list];\r\n                    userVdoCopy.map((vdoObj) => {\r\n                        if (vdoObj.likes && vdoObj.likes.length) {\r\n                            vdoObj.likes.map((likeObj) => {\r\n                                let userData = userList.filter(userObj => userObj.key == likeObj.userId);\r\n                                if (userData.length != 0) {\r\n                                    likeObj.username = userData[0].username;\r\n                                    likeObj.profileImage = userData[0].profileImage;\r\n                                }\r\n                            })\r\n                        }\r\n                        if (vdoObj.comments && vdoObj.comments.length) {\r\n                            vdoObj.comments.map((commentObj) => {\r\n                                let userData = userList.filter(userObj => userObj.key == commentObj.userId);\r\n                                if (userData.length != 0) {\r\n                                    commentObj.username = userData[0].username;\r\n                                    commentObj.profileImage = userData[0].profileImage;\r\n                                }\r\n                            })\r\n                        }\r\n                    })\r\n                    dispatch(disableLoading());\r\n                    console.log('userVdoCopy', userVdoCopy)\r\n                    setUserUploadedVideoList(userVdoCopy)\r\n                })\r\n            } else dispatch(disableLoading());\r\n        });\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (state.refetchDataModule == 'user-uploaded-video') {\r\n            getUploadedVideosByUserId(loggedInUser.key).subscribe((list) => { dispatch(removeDataRefetchModuleName()); setUserUploadedVideoList(list) });\r\n        }\r\n    }, [state])\r\n\r\n    function onWindowScroll(event) {\r\n        if (window.outerWidth > 1023) {\r\n            if (window.scrollY >= 302) {\r\n                toggleStickyHeader('add');\r\n            } else {\r\n                toggleStickyHeader('remove');\r\n            }\r\n        } else {\r\n            if (window.scrollY >= 294) {\r\n                toggleStickyHeader('add');\r\n            } else {\r\n                toggleStickyHeader('remove');\r\n            }\r\n        }\r\n    }\r\n\r\n    function toggleStickyHeader(toggleValue) {\r\n        if (toggleValue === 'add') {\r\n            if (userTabsRef.current) {\r\n                userTabsRef.current.classList.add('sticky');\r\n            }\r\n            if (profileOuterRef.current) {\r\n                profileOuterRef.current.classList.add('sticky');\r\n            }\r\n        } else {\r\n            if (userTabsRef.current) {\r\n                userTabsRef.current.classList.remove('sticky');\r\n            }\r\n            if (profileOuterRef.current) {\r\n                profileOuterRef.current.classList.remove('sticky');\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleChange = (event, newValue) => {\r\n        setValue(newValue);\r\n    };\r\n\r\n    const handleChangeIndex = (index) => {\r\n        setValue(index);\r\n    };\r\n\r\n    const openCompetitionDetailsModal = (competition) => {\r\n        getCompetitionsList().subscribe(allCompList => {\r\n            let isUserEnrolled = allCompList.filter((data) => data.key == competition.compId);\r\n            if (isUserEnrolled.length) {\r\n                isUserEnrolled[0].isUserEnrolled = true;\r\n                isUserEnrolled[0].userSubmitedDetails = competition;\r\n                setInitialStep(2);\r\n                dispatch(setActiveCompetition(isUserEnrolled[0]));\r\n                setOpenUserEnrolledCompDetailsModal(true);\r\n            }\r\n        });\r\n    }\r\n\r\n    const handleLikes = (video, status) => {\r\n        let videoObj = { ...video }\r\n        if (status == 'liked') {\r\n            if (videoObj.likes) {\r\n                videoObj.likes.push({ value: 1, userId: loggedInUser.key })\r\n            } else {\r\n                videoObj.likes = [{ value: 1, userId: loggedInUser.key }]\r\n            }\r\n        } else {\r\n            let likes = videoObj.likes.filter(data => data.userId != loggedInUser.key)\r\n            videoObj.likes = likes\r\n        }\r\n        videoObj.likes.map((likeObj) => { delete likeObj.profileImage; delete likeObj.username; })\r\n        updateVideoLikes(videoObj.key, videoObj).subscribe(() => {\r\n            let feedListCopy = [...UserUploadedVideoList]\r\n            feedListCopy.map((feed) => {\r\n                if (feed.key == videoObj.key) {\r\n                    feed.likes = videoObj.likes\r\n                }\r\n\r\n                if (feed.likes && feed.likes.length) {\r\n                    let isAvail = feed.likes.filter(data => data.userId == loggedInUser.key)\r\n                    isAvail.length > 0 ? feed.isLiked = true : feed.isLiked = false\r\n                } else {\r\n                    feed.isLiked = false\r\n                }\r\n            })\r\n            setUserUploadedVideoList(feedListCopy)\r\n        })\r\n    }\r\n\r\n    const handleComments = (commentString) => {\r\n        let videoObj = { ...activeVideoObj }\r\n        if (videoObj.comments) {\r\n            videoObj.comments.push({ value: commentString, userId: loggedInUser.key })\r\n        } else {\r\n            videoObj.comments = [{ value: commentString, userId: loggedInUser.key }]\r\n        }\r\n\r\n        videoObj.comments.map((commentObj) => { delete commentObj.profileImage; delete commentObj.username; })\r\n        updateVideoComments(videoObj.key, videoObj).subscribe(() => {\r\n            let feedListCopy = [...UserUploadedVideoList]\r\n            feedListCopy.map((feed) => {\r\n                if (feed.key == videoObj.key) {\r\n                    feed.comments = videoObj.comments\r\n                }\r\n            })\r\n            setUserUploadedVideoList(feedListCopy)\r\n        })\r\n    }\r\n\r\n    const handleCommentClick = (video) => {\r\n        setCommentModal(true);\r\n        setActiveVideoObj(video)\r\n    }\r\n\r\n    return (\r\n        <div className=\"profile-outer\" ref={profileOuterRef}>\r\n            <div className=\"profile-details-wrap clearfix\">\r\n                <div className=\"profile-img\">\r\n                    {\r\n                        loggedInUser.profileImage ?\r\n                            <img src={loggedInUser.profileImage} />\r\n                            :\r\n                            <AccountCircleOutlinedIcon />\r\n                    }\r\n                </div>\r\n                <div className=\"profile-details clearfix\">\r\n                    <div className=\"username-wrap clearfix\">\r\n                        <div className=\"username\">\r\n                            {loggedInUser.username}\r\n                        </div>\r\n                        <div className=\"edit-profile\" onClick={() => history.push('/profile/edit')}>\r\n                            Edit Profile\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"followers-wrap clearfix\">\r\n                        <div className=\"posts\">\r\n                            <span>999</span> Posts\r\n                        </div>\r\n                        <div className=\"followers\">\r\n                            <span>999</span> Followers\r\n                        </div>\r\n                        <div className=\"following\">\r\n                            <span>999</span> Followings\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"bio-wrap\">\r\n                        <div className=\"fullname\">\r\n                            {loggedInUser.name}\r\n                        </div>\r\n                        {loggedInUser.bio ? <div className=\"bio\">\r\n                            {loggedInUser.bio}\r\n                        </div> : <div className=\"bio\">\r\n                                Older dancers (especially from the SoCal dance community) – even if you can appreciate and welcome the ways dance has evolved, you’ll still feel pangs of nostalgia when going through this list.\r\n                        </div>}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"profile-content-wrap\">\r\n                <div className=\"headers-wrap\">\r\n                    <div className=\"user-tabs-wrap\" ref={userTabsRef}>\r\n                        <Tabs\r\n                            value={value}\r\n                            onChange={handleChange}\r\n                            indicatorColor=\"primary\"\r\n                            textColor=\"primary\"\r\n                            variant=\"fullWidth\"\r\n                            aria-label=\"full width tabs example\"\r\n                        >\r\n                            <Tab label=\"Posts\" icon={<CollectionsOutlinedIcon />} {...a11yProps(0)} />\r\n                            <Tab label=\"Liked\" icon={<FavoriteBorderOutlinedIcon />}{...a11yProps(1)} />\r\n                            <Tab label=\"Competitions\" icon={<LoyaltyOutlinedIcon />} {...a11yProps(2)} />\r\n                        </Tabs>\r\n                    </div>\r\n                    <SwipeableViews\r\n                        axis={theme.direction === 'rtl' ? 'x-reverse' : 'x'}\r\n                        index={value}\r\n                        onChangeIndex={handleChangeIndex}>\r\n                        <TabPanel value={value} index={0} dir={theme.direction}>\r\n                            <div className=\"flex-container\" >\r\n                                {UserUploadedVideoList.length !== 0 ?\r\n                                    <div className=\"feed-wrap\">\r\n                                        {UserUploadedVideoList && UserUploadedVideoList.map((vdo) => {\r\n                                            return <div key={vdo.key} className=\"vdo-card\">\r\n                                                <div>\r\n                                                    <Vedio vdoObj={vdo} />\r\n                                                </div>\r\n                                                <div className=\"video-title-like-wrap\">\r\n                                                    <div className=\"title\">{vdo.title}</div>\r\n                                                    <div className=\"like-comment\">\r\n                                                        {vdo.likes && vdo.likes.length > 0 && <div className=\"likes-count\">{vdo.likes.length} Likes</div>}\r\n                                                        {!vdo.isLiked && <FavoriteBorder title=\"Unlike\" onClick={() => handleLikes(vdo, 'liked')} />}\r\n                                                        {vdo.isLiked && <Favorite title=\"Like\" onClick={() => handleLikes(vdo, 'unliked')} />}\r\n                                                        <CommentOutlined title=\"comment\" onClick={() => handleCommentClick(vdo)} />\r\n                                                    </div>\r\n\r\n                                                </div>\r\n                                            </div>\r\n                                        })}\r\n                                    </div>\r\n                                    :\r\n                                    <div>No video posted yet !</div>}\r\n                            </div>\r\n                        </TabPanel>\r\n                        <TabPanel value={value} index={1} dir={theme.direction}>\r\n                            <div className=\"flex-container\" >\r\n                                {UserLikedVideoList.length !== 0 ? UserLikedVideoList.map((vdoObj) => {\r\n                                    return <div className=\"flex-basis-3\" style={{ marginRight: '30px' }} key={vdoObj.key}>\r\n                                        <Vedio vdoObj={vdoObj} />\r\n                                    </div>\r\n                                }) :\r\n                                    <div>No video liked yet !</div>}\r\n                            </div>\r\n                        </TabPanel>\r\n                        <TabPanel value={value} index={2} dir={theme.direction}>\r\n                            <div className=\"flex-container\" >\r\n                                {UserCompetitionsList.length !== 0 ? UserCompetitionsList.map((competition) => {\r\n                                    return <div className=\"flex-basis-3\" style={{ marginRight: '30px' }} key={competition.key} onClick={() => openCompetitionDetailsModal(competition)}>\r\n                                        <div>{competition.compName}</div>\r\n                                        <img src={competition.compImg} />\r\n                                    </div>\r\n                                }) :\r\n                                    <div>No competition enrolled yet !</div>}\r\n                            </div>\r\n                        </TabPanel>\r\n                    </SwipeableViews>\r\n                </div>\r\n            </div>\r\n            {commentModal && <VideoDetails handleClose={() => setCommentModal(false)} handleLikes={handleLikes} handleComments={handleComments} videoObj={activeVideoObj} />}\r\n            {openUserEnrolledCompDetailsModal && <CompetitionsDetails open={openUserEnrolledCompDetailsModal} handleClose={() => setOpenUserEnrolledCompDetailsModal(false)} initialStep={initialStep} />}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile\r\n","F:\\Toms\\Business-work\\Boogalu\\src\\Components\\Admin\\Competition.js",["268"],"import React, { useState } from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport ImageUploader from 'react-images-upload';\r\nimport Button from '@material-ui/core/Button';\r\nimport { saveCompetition } from \"../../Services/Competition.service\";\r\nimport { uploadImage } from \"../../Services/Upload.service\";\r\nimport { toBase64 } from \"../../Services/Utils\";\r\n\r\nexport default function Competition() {\r\n    const initialCompetitionData = {\r\n        name: \"\",\r\n        type: \"\",\r\n        desc: \"\",\r\n        active: true,\r\n        fee: \"\",\r\n        img: \"\",\r\n        startAt: \"\",\r\n        endAt: \"\",\r\n        prices: [],\r\n    }\r\n\r\n    const [isAdminLoggedIn, toggleAdminLogin] = useState(false);\r\n    const [CompetitionData, setCompetitionData] = useState(initialCompetitionData);\r\n    const [adminEmail, setAdminEmail] = useState('');\r\n    const [adminPwd, setAdminPwd] = useState('');\r\n    const [loggedInMessages, setLoginMessage] = useState('');\r\n\r\n    function handleAdminLogin(value, type) {\r\n        if (type === 'email') {\r\n            setAdminEmail(value?.target?.value);\r\n        } else {\r\n            setAdminPwd(value?.target?.value);\r\n        }\r\n    }\r\n\r\n    function triggerLogin(event) {\r\n        if (adminEmail && adminEmail === 'b2b@boxpuppet.com' && adminPwd && adminPwd === 'Box-puppet@1001') {\r\n            toggleAdminLogin(true);\r\n        } else {\r\n            toggleAdminLogin(false);\r\n            setLoginMessage('Invalid credentials, please enter valid email-Id and Password!');\r\n        }\r\n    }\r\n\r\n    const handleChange = (prop, index) => (event) => {\r\n        let value = event.target.value;\r\n        if (prop === 'active') value = event.target.checked;\r\n        if (prop === 'prices') {\r\n            CompetitionData.prices[index] = event.target.value;\r\n            value = CompetitionData.prices;\r\n        }\r\n        setCompetitionData({ ...CompetitionData, [prop]: value });\r\n    };\r\n\r\n    const onimageUpload = (picture) => {\r\n        setCompetitionData({ ...CompetitionData, img: picture });\r\n    }\r\n\r\n    async function saveDetails(e) {\r\n        console.log(CompetitionData)\r\n        // upload competition image to bucket\r\n        if (CompetitionData.img[0]) {\r\n            const reader = new FileReader();\r\n            reader.readAsDataURL(CompetitionData.img[0]);\r\n            reader.onload = () => {\r\n                uploadImage(reader.result, 'competition', 'small').subscribe((downloadableUrl) => {\r\n                    CompetitionData.img = downloadableUrl;\r\n                    // save competition data to db with imag url\r\n                    saveCompetition(CompetitionData).subscribe((response) => {\r\n                        console.log('competition success', response);\r\n                        setCompetitionData(initialCompetitionData);\r\n                    })\r\n                })\r\n            }\r\n        }\r\n    }\r\n    return (\r\n        <div className=\"competition-bo-wrap clearfix\">\r\n            {\r\n                isAdminLoggedIn ?\r\n                    <h1>Launch a new competition</h1>\r\n                : \r\n                    <h1>Login to create new Competition</h1>\r\n            }\r\n            {\r\n                isAdminLoggedIn ? \r\n                <div className=\"inner-form-wrap\">\r\n                    <div className=\"input-wrap\">\r\n                        <TextField className=\"input-field\"\r\n                            required\r\n                            id=\"outlined-required-name\"\r\n                            label=\"Name\"\r\n                            onChange={handleChange('name')}\r\n                            value={CompetitionData.name}\r\n                            variant=\"outlined\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"input-wrap\">\r\n                        <TextField className=\"input-field\"\r\n                            id=\"outlined-required-desc\"\r\n                            label=\"Description\"\r\n                            onChange={handleChange('desc')}\r\n                            value={CompetitionData.desc}\r\n                            variant=\"outlined\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"input-wrap\">\r\n                        <TextField className=\"input-field\"\r\n                            id=\"outlined-required-fee\"\r\n                            label=\"Fee\"\r\n                            type=\"number\"\r\n                            onChange={handleChange('fee')}\r\n                            value={CompetitionData.fee}\r\n                            variant=\"outlined\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"input-wrap\">\r\n                        <FormControl variant=\"outlined\" className=\"input-field\">\r\n                            <InputLabel id=\"select-outlined-label\">Type</InputLabel>\r\n                            <Select\r\n                                labelId=\"select-outlined-label\"\r\n                                id=\"select-outlined\"\r\n                                value={CompetitionData.type}\r\n                                onChange={handleChange('type')}\r\n                                label=\"Type\"\r\n                            >\r\n                                <MenuItem value=\"running\">Currently Running</MenuItem>\r\n                                <MenuItem value=\"upcomming\">Up-Comming</MenuItem>\r\n                            </Select>\r\n                        </FormControl>\r\n                    </div>\r\n                    <div className=\"input-wrap data-time-wrap\">\r\n                        <TextField\r\n                            id=\"datetime-local-start\"\r\n                            label=\"Start Date & Time\"\r\n                            type=\"datetime-local\"\r\n                            value={CompetitionData.startAt}\r\n                            onChange={handleChange('startAt')}\r\n                            InputLabelProps={{\r\n                                shrink: true,\r\n                            }}\r\n                        />\r\n                        <TextField\r\n                            id=\"datetime-local-end\"\r\n                            label=\"End Date & Time\"\r\n                            type=\"datetime-local\"\r\n                            value={CompetitionData.endAt}\r\n                            onChange={handleChange('endAt')}\r\n                            InputLabelProps={{\r\n                                shrink: true,\r\n                            }}\r\n                        />\r\n                    </div>\r\n                    <div className=\"input-wrap\">\r\n                        <TextField className=\"input-field\"\r\n                            required\r\n                            id=\"outlined-required-name\"\r\n                            label=\"First Price\"\r\n                            onChange={handleChange('prices', 0)}\r\n                            value={CompetitionData.prices[0]}\r\n                            variant=\"outlined\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"input-wrap\">\r\n                        <TextField className=\"input-field\"\r\n                            required\r\n                            id=\"outlined-required-name\"\r\n                            label=\"Second Price\"\r\n                            onChange={handleChange('prices', 1)}\r\n                            value={CompetitionData.prices[1]}\r\n                            variant=\"outlined\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"input-wrap\">\r\n                        <TextField className=\"input-field\"\r\n                            required\r\n                            id=\"outlined-required-name\"\r\n                            label=\"Third Price\"\r\n                            onChange={handleChange('prices', 2)}\r\n                            value={CompetitionData.prices[2]}\r\n                            variant=\"outlined\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"input-wrap\">\r\n                        <ImageUploader\r\n                            withIcon={true}\r\n                            buttonText='Upload image'\r\n                            onChange={onimageUpload}\r\n                            imgExtension={['.jpg', '.gif', '.png', '.gif', '.svg']}\r\n                            maxFileSize={5242880}\r\n                            accept=\"image/*\"\r\n                            withPreview={true}\r\n                            singleImage={true}\r\n                            label=\"Select competition image\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"input-wrap action-wrap\">\r\n                        <Button variant=\"contained\" color=\"primary\">Cancel</Button>\r\n                        <Button variant=\"contained\" color=\"secondary\" onClick={(e) => saveDetails(e)}>Save</Button>\r\n                        <FormControlLabel\r\n                            control={\r\n                                <Checkbox\r\n                                    required\r\n                                    color=\"primary\"\r\n                                    className=\"selected-item-checkbox\"\r\n                                    checked={CompetitionData.active}\r\n                                    onChange={handleChange('active')}\r\n                                    inputProps={{ 'aria-label': 'secondary checkbox' }}\r\n                                />\r\n                            }\r\n                            label=\"Active Competition\"\r\n                        />\r\n                    </div>\r\n                </div> \r\n                :\r\n                <div className=\"login-admin-form\">\r\n                    <p className=\"errorMessage\">{loggedInMessages}</p>\r\n                    <div className=\"input-wrap\">\r\n                        <TextField className=\"input-field\"\r\n                            required\r\n                            id=\"admin-id\"\r\n                            label=\"Email Id\"\r\n                            onChange={value => handleAdminLogin(value, 'email')}\r\n                            variant=\"outlined\"\r\n                        />\r\n                    </div>    \r\n                    <div className=\"input-wrap\">\r\n                        <TextField className=\"input-field\"\r\n                            required\r\n                            id=\"admin-pwd\"\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            onChange={value => handleAdminLogin(value, 'pwd')}\r\n                            variant=\"outlined\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"input-wrap action-wrap\">\r\n                        <Button variant=\"contained\" color=\"secondary\" onClick={(e) => triggerLogin(e)}>Login</Button>\r\n                    </div>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n","F:\\Toms\\Business-work\\Boogalu\\src\\Components\\Admin\\Subscription.js",["269","270"],"import React, { useState } from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport ImageUploader from 'react-images-upload';\r\nimport Button from '@material-ui/core/Button';\r\nimport { uploadImage } from \"../../Services/Upload.service\";\r\nimport { saveSubscription } from \"../../Services/Subscription.service\";\r\n\r\nexport default function Subscription() {\r\n    const initialSubscriptionData = {\r\n        name: \"\",\r\n        desc: \"\",\r\n        active: true,\r\n        type: \"\",\r\n        amount: \"\",\r\n        img: \"\",\r\n        startAt: \"\",\r\n        endAt: \"\",\r\n        plans: \"\",\r\n    }\r\n    const [Subscription, setSubscription] = useState(initialSubscriptionData);\r\n    const [isAdminLoggedIn, toggleAdminLogin] = useState(false);\r\n    const [adminEmail, setAdminEmail] = useState('');\r\n    const [adminPwd, setAdminPwd] = useState('');\r\n    const [loggedInMessages, setLoginMessage] = useState('');\r\n\r\n    function handleAdminLogin(value, type) {\r\n        if (type === 'email') {\r\n            setAdminEmail(value?.target?.value);\r\n        } else {\r\n            setAdminPwd(value?.target?.value);\r\n        }\r\n    }\r\n\r\n    function triggerLogin(event) {\r\n        if (adminEmail && adminEmail === 'b2b@boxpuppet.com' && adminPwd && adminPwd === 'Box-puppet@1001') {\r\n            toggleAdminLogin(true);\r\n        } else {\r\n            toggleAdminLogin(false);\r\n            setLoginMessage('Invalid credentials, please enter valid email-Id and Password!');\r\n        }\r\n    }\r\n\r\n    const handleChange = (prop, index) => (event) => {\r\n        let value = event.target.value;\r\n        if (prop === 'active') value = event.target.checked;\r\n        if (prop === 'prices') {\r\n            Subscription.prices[index] = event.target.value;\r\n            value = Subscription.prices;\r\n        }\r\n        setSubscription({ ...Subscription, [prop]: value });\r\n    };\r\n\r\n    const onimageUpload = (picture) => {\r\n        setSubscription({ ...Subscription, img: picture });\r\n    }\r\n\r\n    async function saveDetails(e) {\r\n        console.log(Subscription)\r\n        // upload Subscription image to bucket\r\n        if (Subscription.img[0]) {\r\n            const reader = new FileReader();\r\n            reader.readAsDataURL(Subscription.img[0]);\r\n            reader.onload = () => {\r\n                uploadImage(reader.result, 'subscription', 'small').subscribe((downloadableUrl) => {\r\n                    Subscription.img = downloadableUrl;\r\n                    // save Subscription data to db with imag url\r\n                    saveSubscription(Subscription).subscribe((response) => {\r\n                        console.log('Subscription success', response);\r\n                        setSubscription(initialSubscriptionData);\r\n                    })\r\n                })\r\n            }\r\n        } else {\r\n            saveSubscription(Subscription).subscribe((response) => {\r\n                console.log('Subscription success', response);\r\n                setSubscription(initialSubscriptionData);\r\n            })\r\n        }\r\n    }\r\n    return (\r\n        <div className=\"subscription-bo-wrap clearfix\">\r\n            {\r\n                isAdminLoggedIn ?\r\n                    <h1>Create a new Subscription</h1>\r\n                :\r\n                    <h1>Login to create new Subscription</h1>\r\n            }\r\n            {\r\n                isAdminLoggedIn ?\r\n                <div className=\"inner-form-wrap\">\r\n                    <div className=\"input-wrap\">\r\n                        <TextField className=\"input-field\"\r\n                            required\r\n                            id=\"outlined-required-name\"\r\n                            label=\"Name\"\r\n                            onChange={handleChange('name')}\r\n                            value={Subscription.name}\r\n                            variant=\"outlined\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"input-wrap\">\r\n                        <TextField className=\"input-field\"\r\n                            id=\"outlined-required-desc\"\r\n                            label=\"Description\"\r\n                            onChange={handleChange('desc')}\r\n                            value={Subscription.desc}\r\n                            variant=\"outlined\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"input-wrap\">\r\n                        <TextField className=\"input-field\"\r\n                            id=\"outlined-required-amount\"\r\n                            label=\"Amount\"\r\n                            type=\"number\"\r\n                            onChange={handleChange('amount')}\r\n                            value={Subscription.amount}\r\n                            variant=\"outlined\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"input-wrap\">\r\n                        <FormControl variant=\"outlined\" className=\"input-field\">\r\n                            <InputLabel id=\"select-outlined-label\">Plans</InputLabel>\r\n                            <Select\r\n                                labelId=\"select-outlined-label\"\r\n                                id=\"select-outlined\"\r\n                                value={Subscription.plans}\r\n                                onChange={handleChange('plans')}\r\n                            >\r\n                                <MenuItem value=\"monthly\">Monthly</MenuItem>\r\n                                <MenuItem value=\"annual\">Annual</MenuItem>\r\n                            </Select>\r\n                        </FormControl>\r\n                    </div>\r\n                    <div className=\"input-wrap data-time-wrap\">\r\n                        <TextField\r\n                            id=\"datetime-local-start\"\r\n                            label=\"Start Date & Time\"\r\n                            type=\"datetime-local\"\r\n                            value={Subscription.startAt}\r\n                            onChange={handleChange('startAt')}\r\n                            InputLabelProps={{\r\n                                shrink: true,\r\n                            }}\r\n                        />\r\n                        <TextField\r\n                            id=\"datetime-local-end\"\r\n                            label=\"End Date & Time\"\r\n                            type=\"datetime-local\"\r\n                            value={Subscription.endAt}\r\n                            onChange={handleChange('endAt')}\r\n                            InputLabelProps={{\r\n                                shrink: true,\r\n                            }}\r\n                        />\r\n                    </div>\r\n                    {/* <div className=\"input-wrap\">\r\n                        <ImageUploader\r\n                            withIcon={true}\r\n                            buttonText='Upload image'\r\n                            onChange={onimageUpload}\r\n                            imgExtension={['.jpg', '.gif', '.png', '.gif', '.svg']}\r\n                            maxFileSize={5242880}\r\n                            accept=\"image/*\"\r\n                            withPreview={true}\r\n                            singleImage={true}\r\n                            label=\"Select subscription image\"\r\n                        />\r\n                    </div> */}\r\n                    <div className=\"input-wrap action-wrap\">\r\n                        <Button variant=\"contained\" color=\"primary\">Cancel</Button>\r\n                        <Button variant=\"contained\" color=\"secondary\" onClick={(e) => saveDetails(e)}>Save</Button>\r\n                        <FormControlLabel\r\n                            control={\r\n                                <Checkbox\r\n                                    required\r\n                                    color=\"primary\"\r\n                                    className=\"selected-item-checkbox\"\r\n                                    checked={Subscription.active}\r\n                                    onChange={handleChange('active')}\r\n                                    inputProps={{ 'aria-label': 'secondary checkbox' }}\r\n                                />\r\n                            }\r\n                            label=\"Active Subscription\"\r\n                        />\r\n                    </div>\r\n                </div> : \r\n\r\n                <div className=\"login-admin-form\">\r\n                    <p className=\"errorMessage\">{loggedInMessages}</p>\r\n                    <div className=\"input-wrap\">\r\n                        <TextField className=\"input-field\"\r\n                            required\r\n                            id=\"admin-id\"\r\n                            label=\"Email Id\"\r\n                            onChange={value => handleAdminLogin(value, 'email')}\r\n                            variant=\"outlined\"\r\n                        />\r\n                    </div>    \r\n                    <div className=\"input-wrap\">\r\n                        <TextField className=\"input-field\"\r\n                            required\r\n                            id=\"admin-pwd\"\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            onChange={value => handleAdminLogin(value, 'pwd')}\r\n                            variant=\"outlined\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"input-wrap action-wrap\">\r\n                        <Button variant=\"contained\" color=\"secondary\" onClick={(e) => triggerLogin(e)}>Login</Button>\r\n                    </div>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n","F:\\Toms\\Business-work\\Boogalu\\src\\Components\\EditProfile\\EditProfile.js",["271","272","273","274","275","276","277","278"],"import React, { useState, useEffect, useRef } from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useStoreConsumer } from '../../Providers/StateProvider';\r\nimport { signupUser } from '../../Actions/User';\r\nimport bgImg from '../../Images/bg1.svg';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Visibility from '@material-ui/icons/Visibility';\r\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\nimport ArrowRightSharpIcon from '@material-ui/icons/ArrowRightSharp';\r\nimport { updateUser } from \"../../Services/User.service\";\r\nimport { uploadImage } from \"../../Services/Upload.service\";\r\nimport { FaPlus, FaEdit } from 'react-icons/fa';\r\nimport { NOTIFICATION_SUCCCESS, NOTIFICATION_ERROR, MALE_PROFILE_DEFAULT_IMAGE, FEMALE_PROFILE_DEFAULT_IMAGE } from \"../../Constants\";\r\nimport { enableLoading, disableLoading } from \"../../Actions/Loader\";\r\nimport * as $ from 'jquery';\r\n\r\nexport default function EditProfile() {\r\n    const { state, dispatch } = useStoreConsumer();\r\n    const history = useHistory();\r\n    let loggedInUser = state.loggedInUser;\r\n    // get data from history props if redirected through google or facebook login\r\n    if (history.location.state && (history.location.state.source == 'Facebook' || history.location.state.source == 'Google')) {\r\n        loggedInUser.email = history.location.state.email;\r\n        loggedInUser.name = history.location.state.name;\r\n        // setNeedToRegisterError('You are not registered yet, Please register with Choreoculture.')\r\n    }\r\n    const uploaderRef = useRef(null);\r\n    const [userDetails, setUserDetails] = useState(loggedInUser);\r\n    const [SignUpError, setSignUpError] = useState(null);\r\n    const [showHidePassword, setShowHidePassword] = useState({ showPassword: false, showConfirmPassword: false });\r\n    const [IsProfileImageChanged, setIsProfileImageChanged] = useState(false);\r\n    const [isUserPhotoUploaded, userPhotoUploadToggle] = useState(false);\r\n    const handleChange = (prop) => (event) => {\r\n        setUserDetails({ ...userDetails, [prop]: event.target.value });\r\n        console.log(userDetails)\r\n    };\r\n\r\n    const handleClickShowPassword = (prop) => {\r\n        setShowHidePassword({ ...showHidePassword, [prop]: !showHidePassword[prop] });\r\n    };\r\n\r\n    const handleMouseDownPassword = (event) => {\r\n        event.preventDefault();\r\n    };\r\n\r\n    useEffect(() => {\r\n        $('html,body').animate({\r\n            scrollTop: 0\r\n        }, 500);\r\n        if (userDetails && !userDetails.profileImage) {\r\n            setUserDetails({ ...userDetails, profileImage: MALE_PROFILE_DEFAULT_IMAGE })\r\n        }\r\n    }, [])\r\n\r\n    const setSignupUserCred = (e) => {\r\n        if (userDetails.password != userDetails.confirmPassword) {\r\n            setSignUpError('Password dose not match.');\r\n            return;\r\n        }\r\n        dispatch(enableLoading());\r\n        if (IsProfileImageChanged) {\r\n            uploadImage(userDetails.profileImage, 'user', 'small').subscribe((downloadableUrl) => {\r\n                userDetails.profileImage = downloadableUrl;\r\n                updateUser(userDetails.key, userDetails).subscribe(() => {\r\n                    dispatch(disableLoading());\r\n                    dispatch(signupUser(userDetails));\r\n                    history.push(({\r\n                        pathname: '/profile',\r\n                        state: null\r\n                    }));\r\n                })\r\n            })\r\n        } else {\r\n            updateUser(userDetails.key, userDetails).subscribe(() => {\r\n                dispatch(disableLoading());\r\n                dispatch(signupUser(userDetails));\r\n                history.push(({\r\n                    pathname: '/profile',\r\n                    state: null\r\n                }));\r\n            })\r\n        }\r\n        e.preventDefault();\r\n    }\r\n\r\n    async function onChangeFile(event) {\r\n        event.stopPropagation();\r\n        event.preventDefault();\r\n        var file = event.target.files[0];\r\n        console.log(file);\r\n        if (file) {\r\n            setUserDetails({ ...userDetails, profileImage: null });\r\n            const reader = new FileReader();\r\n            reader.readAsDataURL(file);\r\n            reader.onload = () => {\r\n                userPhotoUploadToggle(true);\r\n                setIsProfileImageChanged(true);\r\n                setUserDetails({ ...userDetails, profileImage: reader.result });\r\n            }\r\n            reader.onerror = error => console.error(error);\r\n        } else setIsProfileImageChanged(false);\r\n    }\r\n\r\n    return (\r\n        <div className=\"logout-wrap edit-page-wrap clearfix\">\r\n            <form className=\"form-wrap clearfix\" onSubmit={setSignupUserCred}>\r\n                <div className=\"heading-outer\">\r\n                    <div className=\"heading1\">Update Profile</div>\r\n                </div>\r\n                <div className=\"profile-img-wrap\">\r\n                    <div className=\"uploaded-img\" >\r\n                        <img src={userDetails.profileImage} onClick={() => { uploaderRef.current.click() }} />\r\n                    </div>\r\n                    {\r\n                        isUserPhotoUploaded ?\r\n                            <i className=\"plus-icon\"><FaEdit /></i>\r\n                            :\r\n                            <i className=\"plus-icon\"><FaPlus /></i>\r\n                    }\r\n                    <input id=\"myInput\"\r\n                        type=\"file\"\r\n                        accept=\"image/*\"\r\n                        ref={uploaderRef}\r\n                        onChange={(e) => onChangeFile(e)}\r\n                    />\r\n                </div>\r\n                <div className=\"form-outer final-registration-block clearfix\">\r\n                    <div className=\"input-wrap\">\r\n                        <TextField className=\"input-field\"\r\n                            required\r\n                            id=\"outlined-required-Name\"\r\n                            label=\"Name\"\r\n                            onChange={handleChange('name')}\r\n                            value={userDetails.name}\r\n                            variant=\"outlined\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"input-wrap\">\r\n                        <TextField className=\"input-field\"\r\n                            required\r\n                            id=\"outlined-required-Username\"\r\n                            label=\"Username\"\r\n                            onChange={handleChange('username')}\r\n                            value={userDetails.username}\r\n                            variant=\"outlined\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"input-wrap\">\r\n                        <TextField className=\"input-field\"\r\n                            required\r\n                            type=\"tel\"\r\n                            id=\"outlined-required-phone\"\r\n                            label=\"Phone\"\r\n                            onChange={handleChange('phone')}\r\n                            value={userDetails.phone}\r\n                            variant=\"outlined\"\r\n                            InputProps={{ readOnly: true }}\r\n                        />\r\n                    </div>\r\n                    <div className=\"input-wrap\">\r\n                        <TextField className=\"input-field\"\r\n                            required\r\n                            id=\"outlined-required-email\"\r\n                            label=\"Email\"\r\n                            type=\"email\"\r\n                            onChange={handleChange('email')}\r\n                            value={userDetails.email}\r\n                            variant=\"outlined\"\r\n                            InputProps={{ readOnly: true }}\r\n                        />\r\n                    </div>\r\n                    <div className=\"input-wrap\">\r\n                        <TextField className=\"input-field\"\r\n                            required\r\n                            id=\"outlined-required-country\"\r\n                            label=\"Country\"\r\n                            onChange={handleChange('country')}\r\n                            value={userDetails.country}\r\n                            variant=\"outlined\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"input-wrap\">\r\n                        <TextField className=\"input-field\"\r\n                            required\r\n                            id=\"outlined-required-state\"\r\n                            label=\"State\"\r\n                            onChange={handleChange('state')}\r\n                            value={userDetails.state}\r\n                            variant=\"outlined\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"input-wrap\">\r\n                        <FormControl className=\"\" variant=\"outlined\" style={{ width: '100%' }}>\r\n                            <InputLabel htmlFor=\"outlined-adornment-password\">Password</InputLabel>\r\n                            <OutlinedInput\r\n                                required\r\n                                id=\"outlined-adornment-password\"\r\n                                type={showHidePassword.showPassword ? 'text' : 'password'}\r\n                                value={userDetails.password}\r\n                                onChange={handleChange('password')}\r\n                                endAdornment={\r\n                                    <InputAdornment position=\"end\">\r\n                                        <IconButton\r\n                                            aria-label=\"toggle password visibility\"\r\n                                            onClick={() => handleClickShowPassword('showPassword')}\r\n                                            onMouseDown={handleMouseDownPassword}\r\n                                            edge=\"end\"\r\n                                        >\r\n                                            {showHidePassword.showPassword ? <Visibility /> : <VisibilityOff />}\r\n                                        </IconButton>\r\n                                    </InputAdornment>\r\n                                }\r\n                                labelWidth={70}\r\n                            />\r\n                        </FormControl>\r\n                    </div>\r\n                    <div className=\"input-wrap\">\r\n                        <FormControl className=\"\" variant=\"outlined\" style={{ width: '100%' }}>\r\n                            <InputLabel htmlFor=\"outlined-adornment-confirm-password\">Confirm Password</InputLabel>\r\n                            <OutlinedInput\r\n                                required\r\n                                id=\"outlined-adornment-confirm-password\"\r\n                                type={showHidePassword.showConfirmPassword ? 'text' : 'password'}\r\n                                value={userDetails.confirmPassword}\r\n                                onChange={handleChange('confirmPassword')}\r\n                                endAdornment={\r\n                                    <InputAdornment position=\"end\">\r\n                                        <IconButton\r\n                                            aria-label=\"toggle confirm password visibility\"\r\n                                            onClick={() => handleClickShowPassword('showConfirmPassword')}\r\n                                            onMouseDown={handleMouseDownPassword}\r\n                                            edge=\"end\"\r\n                                        >\r\n                                            {showHidePassword.showConfirmPassword ? <Visibility /> : <VisibilityOff />}\r\n                                        </IconButton>\r\n                                    </InputAdornment>\r\n                                }\r\n                                labelWidth={70}\r\n                            />\r\n                        </FormControl>\r\n                    </div>\r\n                    <div className=\"input-wrap\">\r\n                        <div className=\"dob-wrap\">\r\n                            <TextField className=\"input-field\"\r\n                                id=\"date\"\r\n                                label=\"Birthday\"\r\n                                type=\"date\"\r\n                                style={{ width: '100%' }}\r\n                                onChange={handleChange('dob')}\r\n                                value={userDetails.dob}\r\n                                InputLabelProps={{\r\n                                    shrink: true,\r\n                                }}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"input-wrap\">\r\n                        <FormControl variant=\"outlined\" className=\"input-field\">\r\n                            <InputLabel id=\"select-outlined-label\">Gender</InputLabel>\r\n                            <Select\r\n                                labelId=\"select-outlined-label\"\r\n                                id=\"select-outlined\"\r\n                                value={userDetails.gender}\r\n                                onChange={handleChange('gender')}\r\n                                label=\"Gender\"\r\n                            >\r\n                                <MenuItem value=\"Male\">Male</MenuItem>\r\n                                <MenuItem value=\"Female\">Female</MenuItem>\r\n                                <MenuItem value=\"Other\">Other</MenuItem>\r\n                            </Select>\r\n                        </FormControl>\r\n                    </div>\r\n                    <div className=\"input-wrap bio-wrap\">\r\n                        <TextField className=\"input-field bio-input\"\r\n                            id=\"outlined-required-bio\"\r\n                            label=\"Bio\"\r\n                            value={userDetails.bio}\r\n                            onChange={handleChange('bio')}\r\n                            variant=\"outlined\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"input-wrap bio-wrap edit-profile-page-input\">\r\n                        <div className=\"tnc-wrap\">\r\n                            <div className=\"tnc-content clearfix\">\r\n                                <div className=\"checkbox-wrap\">\r\n                                    <Checkbox\r\n                                        required\r\n                                        color=\"primary\"\r\n                                        checked={userDetails.tnc}\r\n                                        onChange={(e) => setUserDetails({ ...userDetails, tnc: e.target.checked })}\r\n                                        inputProps={{ 'aria-label': 'secondary checkbox' }}\r\n                                    />\r\n                                </div>\r\n                                <div className=\"note-wrap\">Yes, I agree to the terms and conditions </div>\r\n                            </div>\r\n                        </div>\r\n                        {SignUpError && <div className=\"login-error\">\r\n                            {SignUpError}\r\n                        </div>}\r\n                        <div className=\"submit-btn clearfix\">\r\n                            <Button variant=\"contained\" type=\"submit\" color=\"primary\" >Update\r\n                            <ArrowRightSharpIcon />\r\n                            </Button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n            <div className=\"img-wrap\">\r\n                <img src={bgImg} alt=\"bg1\" />\r\n            </div>\r\n        </div>\r\n    );\r\n}","F:\\Toms\\Business-work\\Boogalu\\src\\Components\\Login\\Login.js",["279","280","281","282","283","284","285","286","287","288","289","290"],"import React, { useState, useEffect } from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useStoreConsumer } from '../../Providers/StateProvider';\r\nimport { GoogleLogin } from 'react-google-login';\r\nimport FacebookLogin from 'react-facebook-login';\r\nimport FacebookIcon from '@material-ui/icons/Facebook';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Visibility from '@material-ui/icons/Visibility';\r\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\r\nimport ArrowRightSharpIcon from '@material-ui/icons/ArrowRightSharp';\r\nimport bgImg from '../../Images/bg1.svg';\r\nimport { loginUser, signupUser } from '../../Actions/User/index';\r\nimport { getUserByEmail, getUserByPhone } from \"../../Services/User.service\";\r\nimport VideoUploader from \"../VideoUploader\";\r\nimport { enableLoading, disableLoading } from \"../../Actions/Loader\";\r\nimport { displayNotification } from \"../../Actions/Notification\";\r\nimport { NOTIFICATION_SUCCCESS, NOTIFICATION_ERROR } from \"../../Constants\";\r\nimport * as $ from 'jquery';\r\n\r\nexport default function Login() {\r\n    const { state, dispatch } = useStoreConsumer();\r\n    const history = useHistory();\r\n    const [loginCred, setloginCred] = useState({ username: \"\", password: \"\", showPassWord: false })\r\n    const [LoginError, setLoginError] = useState(null);\r\n    const [thirdPartyResponse, setThirdPartyResponse] = useState({ isLogginSuccess: false, data: null, source: '' })\r\n    const [openVdoUploadModal, setOpenVdoUploadModal] = useState(false)\r\n\r\n    useEffect(() => {\r\n        if (thirdPartyResponse.source === 'Facebook') signinUser('', 'Facebook');\r\n        if (thirdPartyResponse.source === 'Google') signinUser('', 'Google');\r\n    }, [thirdPartyResponse]);\r\n\r\n    useEffect(() => {\r\n        $('html,body').animate({\r\n            scrollTop: 0\r\n        }, 500);\r\n    }, [])\r\n\r\n    const setLoginResponseToServer = () => {\r\n        // notify server that user is loggedin\r\n        console.log('Save loggin user to db')\r\n\r\n    }\r\n    const successResponseGoogle = function (response) {\r\n        console.log(response);\r\n        let loginResponse = {\r\n            data: {\r\n                name: response.profileObj.name,\r\n                email: response.profileObj.email,\r\n                token: response.googleId,\r\n                profileImage: response.profileObj.imageUrl,\r\n            },\r\n            source: 'Google'\r\n        }\r\n        setThirdPartyResponse(loginResponse);\r\n    }\r\n\r\n    const failureResponseGoogle = function (response) {\r\n        if (response.error != \"idpiframe_initialization_failed\") {\r\n            setLoginError('Sorry there was a problem with your google login request.')\r\n        }\r\n    }\r\n\r\n    const responseFacebook = (response) => {\r\n        console.log(response);\r\n        if (response && response.userID) {\r\n            let loginResponse = {\r\n                isLogginSuccess: true,\r\n                data: response,\r\n                source: 'Facebook'\r\n            }\r\n            setThirdPartyResponse(loginResponse);\r\n        } else {\r\n            setLoginError('Sorry there was a problem with your facebook login request.')\r\n            console.log(\"facebook login error\", response);\r\n        }\r\n    }\r\n\r\n    const handleMouseDownPassword = (event) => {\r\n        event.preventDefault();\r\n    };\r\n\r\n    const handleChange = (prop) => (event) => {\r\n        setLoginError(null);\r\n        setloginCred({ ...loginCred, [prop]: event.target.value });\r\n    };\r\n\r\n    const showPassword = () => {\r\n        setloginCred({ ...loginCred, showPassWord: (loginCred.showPassWord ? false : true) })\r\n    }\r\n\r\n    const checkForUserPhone = (phone) => {\r\n        return new Promise((res, rej) => {\r\n            getUserByPhone(phone).subscribe((data) => {\r\n                if (data && data.length) res(data);\r\n                else res(null);\r\n            })\r\n        })\r\n    }\r\n\r\n    const checkForUserEmail = (email) => {\r\n        return new Promise((res, rej) => {\r\n            getUserByEmail(email).subscribe((data) => {\r\n                if (data && data.length) res(data);\r\n                else res(null);\r\n            })\r\n        })\r\n    }\r\n\r\n    const getUserLoginData = (userData) => {\r\n        return new Promise((res, rej) => {\r\n            if (thirdPartyResponse.data && thirdPartyResponse.data.email) {\r\n                // with gmail or fb flow\r\n                getUserByEmail(userData.email).subscribe((isRegisteredUser) => {\r\n                    if (isRegisteredUser.length) {\r\n                        res(isRegisteredUser[0]);\r\n                    } else {\r\n                        setLoginError('Please enter correct credentials.')\r\n                        rej({ ...userData, isRegistered: false });\r\n                    }\r\n                })\r\n            } else {\r\n                // without gmail fb flow\r\n                checkForUserEmail(userData.emailOrPhone).then((isRegisteredUser) => {\r\n                    if (isRegisteredUser && isRegisteredUser.length) {\r\n                        if (isRegisteredUser[0].password === userData.password) res(isRegisteredUser[0]);\r\n                        else {\r\n                            setLoginError('Please enter correct credentials.')\r\n                            rej();\r\n                        }\r\n                    } else {\r\n                        checkForUserPhone(userData.emailOrPhone).then((isRegisteredUser) => {\r\n                            if (isRegisteredUser && isRegisteredUser.length) {\r\n                                if (isRegisteredUser[0].password === userData.password) res(isRegisteredUser[0]);\r\n                                else {\r\n                                    setLoginError('Please enter correct credentials.')\r\n                                    rej();\r\n                                }\r\n                            } else {\r\n                                setLoginError('Please enter correct credentials.')\r\n                                rej();\r\n                            }\r\n                        })\r\n                    }\r\n                })\r\n            }\r\n        })\r\n    }\r\n    const signinUser = (e, status) => {\r\n        dispatch(enableLoading());\r\n        setLoginError(null);\r\n        let userData = {};\r\n        switch (status) {\r\n            case 'cred':\r\n                setThirdPartyResponse({ isLogginSuccess: false, data: null, source: '' })\r\n                e.preventDefault();\r\n                e.stopPropagation();\r\n                userData = {\r\n                    ...loginCred,\r\n                    phone: loginCred.username,\r\n                    email: loginCred.username,\r\n                    emailOrPhone: loginCred.username\r\n                }\r\n                getUserLoginData(userData)\r\n                    .then((data) => {\r\n                        //user is registered\r\n                        setLoginResponseToServer();\r\n                        data.source = 'Website';\r\n                        dispatch(loginUser(data));\r\n                        dispatch(disableLoading());\r\n                        dispatch(displayNotification({\r\n                            msg: \"Login successfully\",\r\n                            type: NOTIFICATION_SUCCCESS,\r\n                            time: 3000\r\n                        }));\r\n                        if (state.currentLoginFlow == 'competition') history.push('/competitions');\r\n                        else if (state.currentLoginFlow == 'subscription') history.push('/subscription');\r\n                        else if (state.currentLoginFlow == 'upload-video') setOpenVdoUploadModal(true);\r\n                        else history.push('/')\r\n                    })\r\n                    .catch((data) => {\r\n                        dispatch(disableLoading());\r\n                        if (data) {\r\n                            //user not registered\r\n                            history.push({\r\n                                pathname: '/register',\r\n                                state: data\r\n                            })\r\n                        }\r\n                    })\r\n                break;\r\n            case 'Google': case 'Facebook':\r\n                userData = {\r\n                    name: thirdPartyResponse.data.name,\r\n                    email: thirdPartyResponse.data.email,\r\n                }\r\n                getUserLoginData(userData)\r\n                    .then((data) => {\r\n                        //user is registered\r\n                        dispatch(disableLoading());\r\n                        setLoginResponseToServer();\r\n                        data.source = thirdPartyResponse.source;\r\n                        dispatch(loginUser(data));\r\n                        dispatch(displayNotification({\r\n                            msg: \"Login successfully\",\r\n                            type: NOTIFICATION_SUCCCESS,\r\n                            time: 3000\r\n                        }));\r\n                        if (state.currentLoginFlow == 'competition') history.push('/competitions');\r\n                        else if (state.currentLoginFlow == 'subscription') history.push('/subscription');\r\n                        else if (state.currentLoginFlow == 'upload-video') setOpenVdoUploadModal(true);\r\n                        else history.push('/')\r\n                    })\r\n                    .catch((data) => {\r\n                        dispatch(disableLoading());\r\n                        if (data) {\r\n                            data.source = thirdPartyResponse.source;\r\n                            //user not registered\r\n                            history.push({\r\n                                pathname: '/register',\r\n                                state: data\r\n                            })\r\n                        }\r\n                    })\r\n                break;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"login-wrap clearfix\">\r\n            <form className=\"form-wrap clearfix\" onSubmit={(e) => signinUser(e, 'cred')}>\r\n                <div className=\"heading-outer\">\r\n                    <div className=\"heading1\">Welcome Back!</div>\r\n                    <div className=\"heading2\">Login to your existant account of Choreoculture.</div>\r\n                </div>\r\n                <div className=\"form-outer clearfix\">\r\n                    <div className=\"input-wrap\">\r\n                        <TextField className=\"input-field\"\r\n                            required\r\n                            id=\"outlined-required-username\"\r\n                            label=\"Username / Email / Phone\"\r\n                            onChange={handleChange('username')}\r\n                            value={loginCred.username}\r\n                            variant=\"outlined\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"input-wrap\">\r\n                        <FormControl className=\"\" variant=\"outlined\" style={{ width: '100%' }}>\r\n                            <InputLabel htmlFor=\"outlined-adornment-password\">Password</InputLabel>\r\n                            <OutlinedInput\r\n                                required\r\n                                id=\"outlined-adornment-password\"\r\n                                type={loginCred.showPassWord ? 'text' : 'password'}\r\n                                value={loginCred.password}\r\n                                onChange={handleChange('password')}\r\n                                endAdornment={\r\n                                    <InputAdornment position=\"end\">\r\n                                        <IconButton\r\n                                            aria-label=\"toggle password visibility\"\r\n                                            onClick={showPassword}\r\n                                            onMouseDown={handleMouseDownPassword}\r\n                                            edge=\"end\"\r\n                                        >\r\n                                            {loginCred.showPassWord ? <Visibility /> : <VisibilityOff />}\r\n                                        </IconButton>\r\n                                    </InputAdornment>\r\n                                }\r\n                                labelWidth={70}\r\n                            />\r\n                        </FormControl>\r\n                    </div>\r\n                    <div className=\"action-wrap\">\r\n                        {LoginError && <div className=\"login-error\">\r\n                            {LoginError}\r\n                        </div>}\r\n                        <div className=\"submit-btn clearfix\">\r\n                            <Button variant=\"contained\" type=\"submit\" color=\"primary\">Sign In\r\n                            <ArrowRightSharpIcon />\r\n                            </Button>\r\n                        </div>\r\n                        <div className=\"forgot-password clearfix\">\r\n                            <div>Forgot Password ?</div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"or-seprator clearfix\">\r\n                        <span></span>\r\n                        <div>OR</div>\r\n                        <span></span>\r\n                    </div>\r\n                    <div className=\"login-with\">\r\n                        <p className=\"loginWithTitle\">Login with</p>\r\n                        <div className=\"login-with-google\">\r\n                            <GoogleLogin\r\n                                className=\"google-login-btn\"\r\n                                clientId=\"417866547364-mesv7a9cn6bj4n3ge45s8b6hhl1vdam0.apps.googleusercontent.com\"\r\n                                buttonText=\"Login with Google\"\r\n                                onSuccess={successResponseGoogle}\r\n                                onFailure={failureResponseGoogle} >\r\n                            </GoogleLogin>\r\n                        </div>\r\n                        <div className=\"login-with-fb\">\r\n                            <div className=\"login-with-fb\">\r\n                                <FacebookLogin\r\n                                    appId=\"813330422546108\"\r\n                                    autoLoad={false}\r\n                                    fields=\"name,email,picture\"\r\n                                    callback={responseFacebook}\r\n                                    cssClass=\"facebook-login-btn\"\r\n                                    icon={<FacebookIcon />}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"already-login-wrap\">\r\n                        <div className=\"text-wrap\">New to Choreoculture?</div>\r\n                        <Button color=\"primary\" onClick={() => history.push('/register')}>SIGN UP</Button>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n\r\n            <div className=\"img-wrap\">\r\n                <img src={bgImg} />\r\n            </div>\r\n            {openVdoUploadModal && <VideoUploader handleClose={() => setOpenVdoUploadModal(false)} />}\r\n        </div>\r\n    );\r\n}","F:\\Toms\\Business-work\\Boogalu\\src\\Components\\Upcoming\\index.js",["291","292","293"],"import React, { useState, useRef, useEffect } from 'react'\r\nimport LessonsCategories from '../../Data/LessonsCategory';\r\nimport Video from \"../Vedio/Video\";\r\n\r\nfunction Upcoming () {\r\n    const [activeCategory, setActiveCategory] = useState(LessonsCategories[0]);\r\n    return (\r\n        <div className=\"lessons lessons-wrap\" id=\"upcomingLessons\">\r\n            <div className=\"inner-page\">\r\n                <h1>Learn from the Experts</h1>\r\n                <p>\r\n                    Lessons for all users from our expert faculty members.\r\n                    From Hip-Hop to Bharatnatyam. You'll get all learning videos\r\n                    at one place.\r\n                </p>\r\n                <p className=\"launching-soon\">Videos launching soon! Stay connected!</p>\r\n                <p className=\"from-our-expert-title\">Few sample lessons</p>\r\n                <div className=\"lessons-vdo-wrap\">\r\n                    {activeCategory.upcoming.map((item, index) => {\r\n                        return <Video key={'upcoming-'+index} vdoObj={item}></Video>\r\n                    })}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Upcoming;\r\n","F:\\Toms\\Business-work\\Boogalu\\src\\Components\\Splash\\index.js",[],"F:\\Toms\\Business-work\\Boogalu\\src\\Components\\Contactus\\index.js",[],"F:\\Toms\\Business-work\\Boogalu\\src\\Components\\Homepage\\index.js",["294","295","296","297","298"],"import React, { useState, useEffect } from \"react\";\r\nimport { useStoreConsumer } from '../../Providers/StateProvider';\r\nimport bgImg from '../../Images/hip-hop.png';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport * as $ from 'jquery';\r\n\r\nexport default function Homepage() {\r\n    const history = useHistory();\r\n    const { state, dispatch } = useStoreConsumer();\r\n    let loggedInUser = state.loggedInUser;\r\n    const [danceImageVisibleClass, activeDanceImage] = useState('');\r\n\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            activeDanceImage('show');\r\n        }, 800);\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"homepage charcoal-bg clearfix\">\r\n            <div className=\"homepage-wrap clearfix\">\r\n                <div className=\"banner_vdo\">\r\n                    <div className=\"vdo_wrap rounded-dark-box\">\r\n                        <iframe width=\"100%\" src=\"https://www.youtube.com/embed/i3yMXpeLPuU\" frameBorder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowFullScreen></iframe>\r\n                    </div>\r\n                    <div className=\"vdo_wrap rounded-dark-box\">\r\n                        <iframe width=\"100%\" src=\"https://www.youtube.com/embed/dM1ghaspLyc\" frameBorder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowFullScreen></iframe>\r\n                    </div>\r\n                    <div className=\"vdo_wrap rounded-dark-box\">\r\n                        <iframe width=\"100%\" src=\"https://www.youtube.com/embed/U7NaFiqSeVE\" frameBorder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowFullScreen></iframe>\r\n                    </div>\r\n                </div>\r\n                <div className=\"banner_img\">\r\n                    <h1>Dance Classes for Everyone</h1>\r\n                    <div className=\"get-started-wrap\">\r\n                        <h4>The world’s best dance learning tools – at your fingertips. Start free for 7 days.</h4>\r\n                        <button className=\"btn primary-light get_started\" onClick={() => {\r\n                            loggedInUser ? history.push('/competitions') : history.push('/login');\r\n                        }}>Get Started</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={`home-img-wrap ${danceImageVisibleClass}`}>\r\n                <img src={bgImg} alt=\"\" />\r\n            </div>\r\n            <div className=\"homepage-display-1 charcoal-bg-dark\">\r\n                <div className=\"learn_choreo\" id=\"Lessons\">\r\n                    <div className=\"heading-wrap\">\r\n                        <h2>\r\n                            Learn Choreography To <br /> Your Favorite Songs\r\n                        </h2>\r\n                        <div className=\"line1\">Dance to the music that makes YOU want to move at any skill level.</div>\r\n                    </div>\r\n                    <div className=\"flex-container vdo-wrap\" >\r\n                        <div className=\"flex-basis-3 rounded-dark-box\">\r\n                            <iframe className=\"iframe\" src=\"//www.youtube.com/embed/i3yMXpeLPuU?wmode=transparent&amp;autoplay=0&amp;theme=dark&amp;controls=0&amp;autohide=0&amp;loop=0&amp;showinfo=0&amp;rel=0&amp;playlist=false&amp;enablejsapi=0\" scrolling=\"no\" title=\"Vimeo embed\" frameBorder=\"0\" allow=\"autoplay; fullscreen\" allowFullScreen={false}>\r\n                            </iframe>\r\n                        </div>\r\n                        <div className=\"flex-basis-3 rounded-dark-box\">\r\n                            <iframe className=\"iframe\" src=\"//cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fplayer.vimeo.com%2Fvideo%2F453549133%3Fapp_id%3D122963&amp;dntp=1&amp;display_name=Vimeo&amp;url=https%3A%2F%2Fvimeo.com%2F453549133%3Flazy%3D1&amp;image=https%3A%2F%2Fi.vimeocdn.com%2Fvideo%2F951136340_1280.jpg&amp;key=96f1f04c5f4143bcb0f2e68c87d65feb&amp;type=text%2Fhtml&amp;schema=vimeo\" scrolling=\"no\" title=\"Vimeo embed\" frameBorder=\"0\" allow=\"autoplay; fullscreen\" allowFullScreen={false}>\r\n                            </iframe>\r\n                        </div>\r\n                        <div className=\"flex-basis-3 rounded-dark-box\">\r\n                            <iframe className=\"iframe\" src=\"//cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fplayer.vimeo.com%2Fvideo%2F453549133%3Fapp_id%3D122963&amp;dntp=1&amp;display_name=Vimeo&amp;url=https%3A%2F%2Fvimeo.com%2F453549133%3Flazy%3D1&amp;image=https%3A%2F%2Fi.vimeocdn.com%2Fvideo%2F951136340_1280.jpg&amp;key=96f1f04c5f4143bcb0f2e68c87d65feb&amp;type=text%2Fhtml&amp;schema=vimeo\" scrolling=\"no\" title=\"Vimeo embed\" frameBorder=\"0\" allow=\"autoplay; fullscreen\" allowFullScreen={false}>\r\n                            </iframe>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}","F:\\Toms\\Business-work\\Boogalu\\src\\Components\\Signup\\index.js",["299","300","301","302","303","304","305","306","307","308","309","310","311","312","313","314","315","316","317","318","319","320","321","322","323","324","325","326","327","328","329","330","331"],"import React, { useRef, useState, useEffect } from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useStoreConsumer } from '../../Providers/StateProvider';\r\nimport { signupUser } from '../../Actions/User';\r\nimport bgImg from '../../Images/bg1.svg';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Visibility from '@material-ui/icons/Visibility';\r\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\nimport { FaPlus, FaEdit } from 'react-icons/fa';\r\nimport stepListData from '../../Data/RegistrationStepData'\r\nimport ArrowRightSharpIcon from '@material-ui/icons/ArrowRightSharp';\r\nimport { registerUser, getUserByEmail, getUserByPhone } from \"../../Services/User.service\";\r\nimport { enableLoading, disableLoading } from \"../../Actions/Loader\";\r\nimport { displayNotification } from \"../../Actions/Notification\";\r\nimport { NOTIFICATION_SUCCCESS, NOTIFICATION_ERROR, MALE_PROFILE_DEFAULT_IMAGE, FEMALE_PROFILE_DEFAULT_IMAGE } from \"../../Constants\";\r\nimport { uploadImage } from \"../../Services/Upload.service\";\r\nimport * as $ from 'jquery';\r\n\r\nexport default function Signup() {\r\n    const { state, dispatch } = useStoreConsumer();\r\n    const history = useHistory();\r\n    let loggedInUser = state.loggedInUser;\r\n    // if user already login then redirect to home\r\n    if (loggedInUser.name && loggedInUser.phone && loggedInUser.email && loggedInUser.username) history.push({\r\n        pathname: '/',\r\n        state: null\r\n    })\r\n    // get data from history props if redirected through google or facebook login\r\n    if (history.location.state && (history.location.state.source === 'Facebook' || history.location.state.source === 'Google')) {\r\n        loggedInUser.email = history.location.state.email;\r\n        loggedInUser.name = history.location.state.name;\r\n        // setNeedToRegisterError('You are not registered yet, Please register with Choreoculture.')\r\n    }\r\n    const [userDetails, setUserDetails] = useState(loggedInUser);\r\n    const [SignUpError, setSignUpError] = useState(null);\r\n    const [showHidePassword, setShowHidePassword] = useState({ showPassword: false, showConfirmPassword: false });\r\n\r\n    const [activeStep, setActiveStep] = useState('stepOne');\r\n    const [showNextButton, setShowNextButton] = useState(false);\r\n    const [stepData, setStepListData] = useState(stepListData);\r\n    const [selectedOptionsList, setSelectedOptionsList] = useState([]);\r\n    const [isUserPhotoUploaded, userPhotoUploadToggle] = useState(false);\r\n    const uploaderRef = useRef(null);\r\n\r\n    const handleChange = (prop) => (event) => {\r\n        setUserDetails({ ...userDetails, [prop]: event.target.value });\r\n    };\r\n\r\n    const handleClickShowPassword = (prop) => {\r\n        setShowHidePassword({ ...showHidePassword, [prop]: !showHidePassword[prop] });\r\n    };\r\n\r\n    const handleMouseDownPassword = (event) => {\r\n        event.preventDefault();\r\n    };\r\n\r\n    useEffect(() => {\r\n        $('html,body').animate({\r\n            scrollTop: 0\r\n        }, 500);\r\n        if (userDetails && !userDetails.profileImage) {\r\n            setUserDetails({ ...userDetails, profileImage: MALE_PROFILE_DEFAULT_IMAGE })\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (stepData[activeStep]) {\r\n            let isAnySelected = stepData[activeStep].filter((data) => data.isSelected);\r\n            if (isAnySelected.length != 0) setShowNextButton(true);\r\n            else setShowNextButton(false);\r\n            // set selected options\r\n            let selectedOptions = [];\r\n            Object.entries(stepData).map(([parentKey, parentValue]) => {\r\n                parentValue.map((parentValueItem) => {\r\n                    if (parentValueItem.isSelected) {\r\n                        let selectionObj = { value: [parentValueItem.title], key: parentKey, heading: parentValueItem.heading };\r\n                        if (selectedOptions.length != 0) {\r\n                            let isAvl = selectedOptions.filter((data) => data.key === parentKey);\r\n                            if (isAvl.length != 0) {\r\n                                selectedOptions.map((item) => {\r\n                                    if (item.key === parentKey) item.value.push(parentValueItem.title);\r\n                                })\r\n                            } else selectedOptions.push(selectionObj);\r\n                        } else selectedOptions.push(selectionObj);\r\n                    }\r\n                })\r\n            })\r\n            setSelectedOptionsList(selectedOptions);\r\n        }\r\n    }, [activeStep])\r\n\r\n    const saveUserRegistrationDetails = () => {\r\n        return new Promise((res, rej) => {\r\n            dispatch(enableLoading());\r\n            if (userDetails.profileImage != MALE_PROFILE_DEFAULT_IMAGE) {\r\n                uploadImage(userDetails.profileImage, 'user', 'small').subscribe((downloadableUrl) => {\r\n                    userDetails.profileImage = downloadableUrl;\r\n                    registerUser(userDetails).subscribe((data) => {\r\n                        console.log('user registered success', data);\r\n                        res(data.key);\r\n                    })\r\n                })\r\n            } else {\r\n                registerUser(userDetails).subscribe((data) => {\r\n                    console.log('user registered success', data);\r\n                    res(data.key);\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    const checkForUsedPhone = () => {\r\n        return new Promise((res, rej) => {\r\n            getUserByPhone(userDetails.phone).subscribe((data) => {\r\n                dispatch(disableLoading());\r\n                if (data && data.length) {\r\n                    setSignUpError('Phone already registered.');\r\n                    rej(false);\r\n                } else {\r\n                    res(true);\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    const checkForUsedEmail = () => {\r\n        return new Promise((res, rej) => {\r\n            getUserByEmail(userDetails.email).subscribe((data) => {\r\n                dispatch(disableLoading());\r\n                if (data && data.length) {\r\n                    setSignUpError('Email already registered.');\r\n                    rej(false);\r\n                } else {\r\n                    res(true);\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    const setSignupUserCred = (e) => {\r\n        dispatch(enableLoading());\r\n        if (userDetails.password != userDetails.confirmPassword) {\r\n            setSignUpError('Password dose not match.');\r\n            return;\r\n        }\r\n\r\n        Promise.all([checkForUsedEmail(), checkForUsedPhone()]).then(() => {\r\n            saveUserRegistrationDetails()\r\n                .then((userKey) => {\r\n                    userDetails.key = userKey;\r\n                    dispatch(disableLoading());\r\n                    dispatch(signupUser(userDetails));\r\n                    dispatch(displayNotification({\r\n                        msg: \"Registration successfully\",\r\n                        type: NOTIFICATION_SUCCCESS,\r\n                        time: 3000\r\n                    }));\r\n                    if (state.currentLoginFlow == 'competition') history.push('/competitions');\r\n                    else if (state.currentLoginFlow == 'subscription') history.push('/subscription');\r\n                    if (state.currentLoginFlow == 'upload-video') history.push('/upload-video');\r\n                    else history.push(({\r\n                        pathname: '/',\r\n                        state: null\r\n                    }));\r\n                })\r\n                .catch((error) => {\r\n                    // error in user registration\r\n                    if (error) {\r\n\r\n                    }\r\n                })\r\n        }).catch(error => {\r\n            console.error(error)\r\n        });\r\n        e.preventDefault();\r\n    }\r\n\r\n    const setNextStep = () => {\r\n        switch (activeStep) {\r\n            case 'stepOne': setActiveStep('stepTwo'); break;\r\n            case 'stepTwo': setActiveStep('stepThree'); break;\r\n            case 'stepThree': setActiveStep('stepFour'); break;\r\n            case 'stepFour': setActiveStep('stepFive'); break;\r\n            case 'stepFive': setActiveStep(6); break;\r\n        }\r\n    }\r\n\r\n    const setPrevStep = () => {\r\n        switch (activeStep) {\r\n            case 'stepTwo': setActiveStep('stepOne'); break;\r\n            case 'stepThree': setActiveStep('stepTwo'); break;\r\n            case 'stepFour': setActiveStep('stepThree'); break;\r\n            case 'stepFive': setActiveStep('stepFour'); break;\r\n            case 6: setActiveStep('stepFive'); break;\r\n        }\r\n    }\r\n\r\n    const setStepListItemData = (e, activeItem, status) => {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        const stepDataList = Object.assign({}, stepData);\r\n        stepDataList[activeStep].map((item) => {\r\n            if (item.title === activeItem.title) {\r\n                item.isSelected = item.isSelected ? false : true;\r\n            } else {\r\n                if (status != 'multi-select') {\r\n                    item.isSelected = false;\r\n                }\r\n            }\r\n        })\r\n        // set selected options\r\n        let selectedOptions = [];\r\n        Object.entries(stepDataList).map(([parentKey, parentValue]) => {\r\n            parentValue.map((parentValueItem) => {\r\n                if (parentValueItem.isSelected) {\r\n                    let selectionObj = { value: [parentValueItem.title], key: parentKey, heading: parentValueItem.heading };\r\n                    if (selectedOptions.length != 0) {\r\n                        let isAvl = selectedOptions.filter((data) => data.key === parentKey);\r\n                        if (isAvl.length != 0) {\r\n                            selectedOptions.map((item) => {\r\n                                if (item.key === parentKey) item.value.push(parentValueItem.title);\r\n                            })\r\n                        } else selectedOptions.push(selectionObj);\r\n                    } else selectedOptions.push(selectionObj);\r\n                }\r\n            })\r\n        })\r\n        setSelectedOptionsList(selectedOptions);\r\n        let isAnySelected = stepDataList[activeStep].filter((data) => data.isSelected);\r\n        if (isAnySelected.length != 0) setShowNextButton(true);\r\n        else setShowNextButton(false);\r\n        setStepListData(stepDataList);\r\n    }\r\n\r\n    async function onChangeFile(event) {\r\n        event.stopPropagation();\r\n        event.preventDefault();\r\n        var file = event.target.files[0];\r\n        console.log(file);\r\n        if (file) {\r\n            setUserDetails({ ...userDetails, profileImage: null });\r\n            const reader = new FileReader();\r\n            reader.readAsDataURL(file);\r\n            reader.onload = () => {\r\n                userPhotoUploadToggle(true);\r\n                setUserDetails({ ...userDetails, profileImage: reader.result });\r\n            }\r\n            reader.onerror = error => console.error(error);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"logout-wrap clearfix\">\r\n            {activeStep != 6 && <div className=\"step-wrap\">\r\n                <div className=\"heading1\">Let's Get Started!</div>\r\n                {activeStep === 'stepOne' && <>\r\n                    <div className=\"list-content\">\r\n                        <div className=\"list-heading-wrap\">\r\n                            <div className=\"heading2\">What’s your experience with dancing?</div>\r\n                            <div className=\"heading3\">Select One Option</div>\r\n                        </div>\r\n                        <div className=\"list\">\r\n                            {stepData.stepOne.map((item, i) => {\r\n                                return (\r\n                                    <div key={i} className={item.isSelected ? 'list-item selected-item' : 'list-item'} onClick={(e) => setStepListItemData(e, item)}>\r\n                                        <div className=\"title\">{item.title}</div>\r\n                                        <div className=\"desc\">{item.desc}</div>\r\n                                        <Checkbox\r\n                                            required\r\n                                            color=\"primary\"\r\n                                            className=\"selected-item-checkbox\"\r\n                                            checked={item.isSelected}\r\n                                            onChange={(e) => setStepListItemData(e, item)}\r\n                                            inputProps={{ 'aria-label': 'secondary checkbox' }}\r\n                                        />\r\n                                    </div>\r\n                                )\r\n                            })}\r\n                        </div>\r\n                    </div>\r\n                </>}\r\n                {activeStep === 'stepTwo' && <>\r\n                    <div className=\"list-content\">\r\n                        <div className=\"list-heading-wrap\">\r\n                            <div className=\"heading2\">What is your first goal that you want to work on?</div>\r\n                            <div className=\"heading3\">Select One Option</div>\r\n                        </div>\r\n                        <div className=\"list\">\r\n                            {stepData.stepTwo.map((item, i) => {\r\n                                return (\r\n                                    <div key={i} className={item.isSelected ? 'list-item selected-item' : 'list-item'} onClick={(e) => setStepListItemData(e, item)}>\r\n                                        <div className=\"title\">{item.title}</div>\r\n                                        <div className=\"desc\">{item.desc}</div>\r\n                                        <Checkbox\r\n                                            required\r\n                                            color=\"primary\"\r\n                                            className=\"selected-item-checkbox\"\r\n                                            checked={item.isSelected}\r\n                                            onChange={(e) => setStepListItemData(e, item)}\r\n                                            inputProps={{ 'aria-label': 'secondary checkbox' }}\r\n                                        />\r\n                                    </div>\r\n                                )\r\n                            })}\r\n                        </div>\r\n                    </div>\r\n                </>}\r\n                {activeStep === 'stepThree' && <>\r\n                    <div className=\"list-content\">\r\n                        <div className=\"list-heading-wrap\">\r\n                            <div className=\"heading2\">What are you interested in?</div>\r\n                            <div className=\"heading3\">Select all that apply</div>\r\n                        </div>\r\n                        <div className=\"list\">\r\n                            {stepData.stepThree.map((item, i) => {\r\n                                return (\r\n                                    <div key={i} className={item.isSelected ? 'list-item selected-item' : 'list-item'} onClick={(e) => setStepListItemData(e, item, 'multi-select')}>\r\n                                        <div className=\"title\">{item.title}</div>\r\n                                        <div className=\"desc\" style={{ paddingRight: '25px' }}>{item.desc}</div>\r\n                                        <Checkbox\r\n                                            required\r\n                                            color=\"primary\"\r\n                                            className=\"selected-item-checkbox\"\r\n                                            checked={item.isSelected}\r\n                                            onChange={(e) => setStepListItemData(e, item, 'multi-select')}\r\n                                            inputProps={{ 'aria-label': 'secondary checkbox' }}\r\n                                        />\r\n                                    </div>\r\n                                )\r\n                            })}\r\n                        </div>\r\n                    </div>\r\n                </>}\r\n                {activeStep === 'stepFour' && <>\r\n                    <div className=\"list-content\">\r\n                        <div className=\"list-heading-wrap\">\r\n                            <div className=\"heading2\">How long would you like your dance sessions to be?</div>\r\n                            <div className=\"heading3\">Select One Option</div>\r\n                        </div>\r\n                        <div className=\"list\">\r\n                            {stepData.stepFour.map((item, i) => {\r\n                                return (\r\n                                    <div key={i} className={item.isSelected ? 'list-item selected-item' : 'list-item'} onClick={(e) => setStepListItemData(e, item)}>\r\n                                        <div className=\"title\">{item.title}</div>\r\n                                        <div className=\"desc\">{item.desc}</div>\r\n                                        <Checkbox\r\n                                            required\r\n                                            color=\"primary\"\r\n                                            className=\"selected-item-checkbox\"\r\n                                            checked={item.isSelected}\r\n                                            onChange={(e) => setStepListItemData(e, item)}\r\n                                            inputProps={{ 'aria-label': 'secondary checkbox' }}\r\n                                        />\r\n                                    </div>\r\n                                )\r\n                            })}\r\n                        </div>\r\n                    </div>\r\n                </>}\r\n                {activeStep === 'stepFive' && <>\r\n                    <div className=\"list-content\">\r\n                        <div className=\"list-heading-wrap\">\r\n                            <div style={{ paddingBottom: 0 }} className=\"heading2\">Your Personal Schedule & Recommendations</div>\r\n                        </div>\r\n                        <div className=\"list\">\r\n                            {selectedOptionsList.map((item, i) => {\r\n                                return (\r\n                                    <div key={i} className=\"list-item selected-item\" onClick={() => setActiveStep(item.key)}>\r\n                                        <div className=\"title\">{item.heading}</div>\r\n                                        <div className=\"desc\">\r\n                                            {item.value.length === 1 &&\r\n                                                item.value.map((listValue, j) => {\r\n                                                    return <span key={j}>{listValue} </span>\r\n                                                })\r\n                                            }\r\n                                            {item.value.length != 1 &&\r\n                                                item.value.map((listValue, j) => {\r\n                                                    return <span key={j}>{listValue}, </span>\r\n                                                })\r\n                                            }\r\n\r\n                                        </div>\r\n                                        {/* <Checkbox\r\n                                            required\r\n                                            color=\"primary\"\r\n                                            className=\"selected-item-checkbox\"\r\n                                            checked={true}\r\n                                            disabled={true}\r\n                                            inputProps={{ 'aria-label': 'secondary checkbox' }}\r\n                                        /> */}\r\n                                    </div>\r\n                                )\r\n                            })}\r\n                        </div>\r\n                    </div>\r\n                </>}\r\n                {activeStep != 6 && <div className=\"step-already-login-wrap clearfix\">\r\n                    <div className=\"text-wrap\">Already have an account?</div>\r\n                    <Button color=\"primary\" onClick={() => history.push({\r\n                        pathname: '/login',\r\n                        state: null\r\n                    })}>SIGN IN</Button>\r\n                    {\r\n                        showNextButton ?\r\n                            <div className={`next-prev-actions ${activeStep != 'stepOne' ? 'next-step-active' : ''} `}>\r\n                                {activeStep != 'stepOne' && <Button color=\"primary\" variant=\"contained\" className=\"next-btn previous\" onClick={() => setPrevStep()}>Prev</Button>}\r\n                                {showNextButton && <Button color=\"primary\" variant=\"contained\" className=\"next-btn\" onClick={() => setNextStep()}>Next</Button>}\r\n                            </div> : ''\r\n                    }\r\n                </div>}\r\n            </div>}\r\n            {activeStep == 6 && <form className=\"form-wrap final-registration-block clearfix\" onSubmit={setSignupUserCred}>\r\n                <div className=\"heading-outer\">\r\n                    <div className=\"heading1\">Let's Get Started!</div>\r\n                    <div className=\"heading2\">Create an account to Choreoculture to get all features.</div>\r\n                </div>\r\n                {/* {NeedToRegisterError && <div className=\"login-error\">\r\n                    {NeedToRegisterError}\r\n                </div>} */}\r\n                <div className=\"profile-img-wrap\">\r\n                    <div className=\"uploaded-img\" >\r\n                        <img src={userDetails.profileImage} onClick={() => { uploaderRef.current.click() }} />\r\n                    </div>\r\n                    {\r\n                        isUserPhotoUploaded ?\r\n                            <i className=\"plus-icon\"><FaEdit /></i>\r\n                        : \r\n                            <i className=\"plus-icon\"><FaPlus /></i>\r\n                    }\r\n                    <input id=\"myInput\"\r\n                        type=\"file\"\r\n                        accept=\"image/*\"\r\n                        ref={uploaderRef}\r\n                        onChange={(e) => onChangeFile(e)}\r\n                    />\r\n                    {/* <div className=\"upload-btn-file\">\r\n                        <Button\r\n                            variant=\"contained\" color=\"primary\"\r\n                            onClick={() => { uploaderRef.current.click() }}>Upload Video</Button>\r\n                    </div>  */}\r\n                </div>\r\n                <div className=\"form-outer clearfix\">\r\n                    <div className=\"input-wrap\">\r\n                        <TextField className=\"input-field\"\r\n                            required\r\n                            id=\"outlined-required-Name\"\r\n                            label=\"Name\"\r\n                            onChange={handleChange('name')}\r\n                            value={userDetails.name}\r\n                            variant=\"outlined\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"input-wrap\">\r\n                        <TextField className=\"input-field\"\r\n                            required\r\n                            id=\"outlined-required-Username\"\r\n                            label=\"Username\"\r\n                            onChange={handleChange('username')}\r\n                            value={userDetails.username}\r\n                            variant=\"outlined\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"input-wrap\">\r\n                        <TextField className=\"input-field\"\r\n                            required\r\n                            type=\"tel\"\r\n                            id=\"outlined-required-phone\"\r\n                            label=\"Phone\"\r\n                            onChange={handleChange('phone')}\r\n                            value={userDetails.phone}\r\n                            variant=\"outlined\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"input-wrap\">\r\n                        <TextField className=\"input-field\"\r\n                            required\r\n                            id=\"outlined-required-email\"\r\n                            label=\"Email\"\r\n                            type=\"email\"\r\n                            onChange={handleChange('email')}\r\n                            value={userDetails.email}\r\n                            variant=\"outlined\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"input-wrap\">\r\n                        <TextField className=\"input-field\"\r\n                            required\r\n                            id=\"outlined-required-country\"\r\n                            label=\"Country\"\r\n                            onChange={handleChange('country')}\r\n                            value={userDetails.country}\r\n                            variant=\"outlined\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"input-wrap\">\r\n                        <TextField className=\"input-field\"\r\n                            required\r\n                            id=\"outlined-required-state\"\r\n                            label=\"State\"\r\n                            onChange={handleChange('state')}\r\n                            value={userDetails.state}\r\n                            variant=\"outlined\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"input-wrap\">\r\n                        <FormControl className=\"\" variant=\"outlined\">\r\n                            <InputLabel htmlFor=\"outlined-adornment-password\">Password</InputLabel>\r\n                            <OutlinedInput\r\n                                required\r\n                                id=\"outlined-adornment-password\"\r\n                                type={showHidePassword.showPassword ? 'text' : 'password'}\r\n                                value={userDetails.password}\r\n                                onChange={handleChange('password')}\r\n                                endAdornment={\r\n                                    <InputAdornment position=\"end\">\r\n                                        <IconButton\r\n                                            aria-label=\"toggle password visibility\"\r\n                                            onClick={() => handleClickShowPassword('showPassword')}\r\n                                            onMouseDown={handleMouseDownPassword}\r\n                                            edge=\"end\"\r\n                                        >\r\n                                            {showHidePassword.showPassword ? <Visibility /> : <VisibilityOff />}\r\n                                        </IconButton>\r\n                                    </InputAdornment>\r\n                                }\r\n                                labelWidth={70}\r\n                            />\r\n                        </FormControl>\r\n                    </div>\r\n                    <div className=\"input-wrap\">\r\n                        <FormControl className=\"\" variant=\"outlined\">\r\n                            <InputLabel htmlFor=\"outlined-adornment-confirm-password\">Confirm Password</InputLabel>\r\n                            <OutlinedInput\r\n                                required\r\n                                id=\"outlined-adornment-confirm-password\"\r\n                                type={showHidePassword.showConfirmPassword ? 'text' : 'password'}\r\n                                value={userDetails.confirmPassword}\r\n                                onChange={handleChange('confirmPassword')}\r\n                                endAdornment={\r\n                                    <InputAdornment position=\"end\">\r\n                                        <IconButton\r\n                                            aria-label=\"toggle confirm password visibility\"\r\n                                            onClick={() => handleClickShowPassword('showConfirmPassword')}\r\n                                            onMouseDown={handleMouseDownPassword}\r\n                                            edge=\"end\"\r\n                                        >\r\n                                            {showHidePassword.showConfirmPassword ? <Visibility /> : <VisibilityOff />}\r\n                                        </IconButton>\r\n                                    </InputAdornment>\r\n                                }\r\n                                labelWidth={70}\r\n                            />\r\n                        </FormControl>\r\n                    </div>\r\n                    <div className=\"input-wrap\">\r\n                        <div className=\"dob-wrap\">\r\n                            <TextField className=\"input-field\"\r\n                                id=\"date\"\r\n                                label=\"Birthday\"\r\n                                type=\"date\"\r\n                                onChange={handleChange('dob')}\r\n                                value={userDetails.dob}\r\n                                InputLabelProps={{\r\n                                    shrink: true,\r\n                                }}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"input-wrap\">\r\n                        <FormControl variant=\"outlined\" className=\"input-field\">\r\n                            <InputLabel id=\"select-outlined-label\">Gender</InputLabel>\r\n                            <Select\r\n                                labelId=\"select-outlined-label\"\r\n                                id=\"select-outlined\"\r\n                                value={userDetails.gender}\r\n                                onChange={handleChange('gender')}\r\n                                label=\"Gender\"\r\n                            >\r\n                                <MenuItem value=\"Male\">Male</MenuItem>\r\n                                <MenuItem value=\"Female\">Female</MenuItem>\r\n                                <MenuItem value=\"Other\">Other</MenuItem>\r\n                            </Select>\r\n                        </FormControl>\r\n                    </div>\r\n                    <div className=\"input-wrap bio-wrap\">\r\n                        <TextField className=\"input-field bio-input\"\r\n                            id=\"outlined-required-bio\"\r\n                            label=\"Bio\"\r\n                            value={userDetails.bio}\r\n                            onChange={handleChange('bio')}\r\n                            variant=\"outlined\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"tnc-wrap\">\r\n                        <div className=\"tnc-content clearfix\">\r\n                            <div className=\"checkbox-wrap\">\r\n                                <Checkbox\r\n                                    required\r\n                                    color=\"primary\"\r\n                                    checked={userDetails.tnc}\r\n                                    onChange={(e) => setUserDetails({ ...userDetails, tnc: e.target.checked })}\r\n                                    inputProps={{ 'aria-label': 'secondary checkbox' }}\r\n                                />\r\n                            </div>\r\n                            <div className=\"note-wrap\">Yes, I agree to the terms and conditions </div>\r\n                        </div>\r\n                    </div>\r\n                    {SignUpError && <div className=\"login-error\">\r\n                        {SignUpError}\r\n                    </div>}\r\n                    <div className=\"submit-btn clearfix\">\r\n                        <Button variant=\"contained\" type=\"submit\" color=\"primary\" >Sign Up\r\n                         <ArrowRightSharpIcon />\r\n                        </Button>\r\n                        {activeStep != 'stepOne' && <Button color=\"primary\" variant=\"contained\" className=\"next-btn previous\" onClick={() => setPrevStep()}>Prev</Button>}\r\n                    </div>\r\n                    <div className=\"already-login-wrap\">\r\n                        <div className=\"text-wrap\">Already have an account?</div>\r\n                        <Button color=\"primary\" onClick={() => history.push({\r\n                            pathname: '/login',\r\n                            state: null\r\n                        })}>SIGN IN</Button>\r\n                    </div>\r\n                </div>\r\n            </form>}\r\n\r\n            <div className=\"img-wrap\">\r\n                <img src={bgImg} alt=\"bg1\" />\r\n            </div>\r\n        </div>\r\n    );\r\n}","F:\\Toms\\Business-work\\Boogalu\\src\\Components\\Competitions\\index.js",["332","333","334","335"],"import React, { useState, useEffect } from 'react'\r\nimport CompetitionsDetails from \"../CompetitionsDetails\";\r\nimport { getCompetitionsList } from \"../../Services/Competition.service\";\r\nimport { useStoreConsumer } from '../../Providers/StateProvider';\r\nimport { setActiveCompetition } from \"../../Actions/Competition\";\r\nimport { disableLoginFlow } from \"../../Actions/LoginFlow\";\r\nimport { getCompetitionByUserId } from \"../../Services/EnrollCompetition.service\";\r\nimport { enableLoading, disableLoading } from \"../../Actions/Loader\";\r\n\r\nfunction Competitions() {\r\n    const { state, dispatch } = useStoreConsumer();\r\n    const [isOpenDetailsModal, setIsOpenDetailsModal] = useState(false);\r\n    const [CompletitionList, setCompletitionList] = useState(null);\r\n    const [initialStep, setInitialStep] = useState(1);\r\n    const loggedInUser = state.loggedInUser;\r\n\r\n    const prepareUserCompData = (allCompList) => {\r\n        return new Promise((res, rej) => {\r\n            getCompetitionByUserId(loggedInUser.key).subscribe((userCompList) => {\r\n                dispatch(disableLoading());\r\n                if (userCompList.length) {\r\n                    allCompList.map((compDetails) => {\r\n                        let isUserEnrolled = userCompList.filter((userCompData) => userCompData.compId == compDetails.key);\r\n                        if (isUserEnrolled.length) {\r\n                            compDetails.isUserEnrolled = true;\r\n                            compDetails.userSubmitedDetails = isUserEnrolled[0];\r\n                        }\r\n                    })\r\n                    res(allCompList);\r\n                } else res(allCompList);\r\n            });\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        dispatch(enableLoading());\r\n        getCompetitionsList().subscribe(allCompList => {\r\n            if (allCompList.length && loggedInUser.email && loggedInUser.phone) {\r\n                // get user submitted competition details\r\n                prepareUserCompData(allCompList).then((compListWithUserData) => {\r\n                    setCompletitionList(compListWithUserData);\r\n                    console.log(compListWithUserData)\r\n                })\r\n            } else {\r\n                dispatch(disableLoading());\r\n                setCompletitionList(allCompList);\r\n            }\r\n        });\r\n        // if user come from login page\r\n        if (state.currentLoginFlow == 'competition') {\r\n            dispatch(disableLoginFlow());\r\n            setIsOpenDetailsModal(true);\r\n            if (loggedInUser.subscriptions) {\r\n                let isSubscribed = loggedInUser.subscriptions.filter((data) => data.type === 'competition-enrollment');\r\n                if (isSubscribed.length) setInitialStep(3);\r\n                else setInitialStep(1);\r\n            } else setInitialStep(1);\r\n        } else if (state.currentLoginFlow === 'competition-subscription') {\r\n            // if user come from subscription page\r\n            dispatch(disableLoginFlow());\r\n            setIsOpenDetailsModal(true);\r\n            setInitialStep(1);\r\n        } else if (state.currentLoginFlow === 'competition-uploadvdo') {\r\n            // if user come from vdoUpload page\r\n            dispatch(disableLoginFlow());\r\n            setIsOpenDetailsModal(true);\r\n            setInitialStep(3);\r\n        }\r\n    }, [])\r\n\r\n    const openDetailsModal = (competition) => {\r\n        if (competition.isUserEnrolled) setInitialStep(1);\r\n        dispatch(setActiveCompetition(competition));\r\n        setIsOpenDetailsModal(true);\r\n    }\r\n\r\n    return (\r\n        <div className=\"competition-wrap\">\r\n            <div className=\"competition-inner\">\r\n                <div className=\"title-wrap\">\r\n                    <h1>Our Active Competition !</h1>\r\n                    <div className=\"competition-desc\">Participate in different competitions &amp; win exciting prizes.</div>\r\n                </div>\r\n                <ul className=\"competition-list\" >\r\n                    {CompletitionList && CompletitionList.map((competition) => {\r\n                        return <li key={competition.name + '-id'} onClick={() => openDetailsModal(competition)}>\r\n                            <img src={competition.img} alt={competition.name} />\r\n                            <h2>{competition.name}  {competition.isUserEnrolled && <span>- Video submitted</span>}</h2>\r\n                        </li>\r\n                    })}\r\n                </ul>\r\n\r\n                {isOpenDetailsModal && <CompetitionsDetails open={isOpenDetailsModal} handleClose={() => setIsOpenDetailsModal(false)} initialStep={initialStep} />}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Competitions\r\n","F:\\Toms\\Business-work\\Boogalu\\src\\Components\\Subscriptions\\index.js",["336","337","338","339","340"],"import React, { useState, useEffect } from 'react'\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useStoreConsumer } from '../../Providers/StateProvider';\r\nimport { getActiveSubscriptionsList } from \"../../Services/Subscription.service\";\r\nimport { setActiveSubscription } from \"../../Actions/Subscription\";\r\nimport BuySubscription from \"../BuySubscription\";\r\nimport { enableLoginFlow, disableLoginFlow } from \"../../Actions/LoginFlow\";\r\nimport { saveUserSubscription } from \"../../Services/User.service\";\r\nimport { loginUser } from \"../../Actions/User\";\r\nimport { SUBSCRIPTION_ACTIVE_STATUS } from \"../../Constants\";\r\nimport { enableLoading, disableLoading } from \"../../Actions/Loader\";\r\n\r\nfunction Subscriptions() {\r\n    const { state, dispatch } = useStoreConsumer();\r\n    const history = useHistory();\r\n    const loggedInUser = state.loggedInUser;\r\n    const [AvailableSubscriptions, setAvailableSubscriptions] = useState([]);\r\n    const [showSubscriptionDetails, setShowSubscriptionDetails] = useState(false);\r\n    const [activeStep, setActiveStep] = useState(1);\r\n    const [alreadySubscribed, setAlreadySubscribed] = useState(false)\r\n\r\n    // check for payment status if user is in payment flow\r\n    useEffect(() => {\r\n        dispatch(enableLoading());\r\n        if (history.location.search && history.location.search.includes('status')) {\r\n            getActiveSubscriptionsList().subscribe((subscriptionsList) => {\r\n                setAvailableSubscriptions(subscriptionsList);\r\n                dispatch(disableLoading());\r\n                console.log(subscriptionsList);\r\n            })\r\n            let paymentStatus = history.location.search.split('status=')[1];\r\n            if (paymentStatus == 'success') {\r\n                const subscriptionSuccessObj = {\r\n                    subId: state.activeSubscription.key,\r\n                    type: state.activeSubscription.type,\r\n                    status: SUBSCRIPTION_ACTIVE_STATUS, // current subscription status Active or Ended\r\n                    subscribedAt: new Date()\r\n                }\r\n                let loggedInUserData = { ...loggedInUser };\r\n                if (loggedInUserData.subscriptions) loggedInUserData.subscriptions.push(subscriptionSuccessObj)\r\n                else (loggedInUserData.subscriptions = [subscriptionSuccessObj]);\r\n\r\n                dispatch(enableLoading());\r\n                saveUserSubscription(state.activeSubscription.key, loggedInUserData).subscribe((response) => {\r\n                    dispatch(loginUser(loggedInUserData));\r\n                    setShowSubscriptionDetails(true);\r\n                    dispatch(disableLoading());\r\n                    setActiveStep(2);\r\n                });\r\n            } else {\r\n                // payment failure\r\n                setShowSubscriptionDetails(true);\r\n                setActiveStep(3)\r\n            }\r\n            history.push('/subscription');\r\n        } else {\r\n            getActiveSubscriptionsList().subscribe((subscriptionsList) => {\r\n                setAvailableSubscriptions(subscriptionsList);\r\n                dispatch(disableLoading());\r\n                console.log(subscriptionsList);\r\n                //if user come from competition details \r\n                if (state.currentLoginFlow == 'competition-subscription') {\r\n                    let subscriptionForCompetition = subscriptionsList.filter((data) => data.type === 'competition-enrollment');\r\n                    dispatch(setActiveSubscription(subscriptionForCompetition[0]));\r\n                    setActiveStep(1);\r\n                    setShowSubscriptionDetails(true);\r\n                }\r\n            })\r\n            //is user go to login flow from itself(current page)\r\n            if (state.currentLoginFlow == 'subscription') {\r\n                dispatch(disableLoginFlow());\r\n                setShowSubscriptionDetails(true);\r\n            }\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        let isSubscribed = loggedInUser?.subscriptions?.filter((data) => data.type === 'competition-enrollment');\r\n        if (isSubscribed && isSubscribed.length) setAlreadySubscribed(true);\r\n    }, [state.loggedInUser])\r\n\r\n    const setSubscription = (subscription) => {\r\n        dispatch(setActiveSubscription(subscription));\r\n        setActiveStep(1);\r\n        if (loggedInUser.name && loggedInUser.phone && loggedInUser.username) {\r\n            setShowSubscriptionDetails(true);\r\n        } else {\r\n            dispatch(enableLoginFlow('subscription'));\r\n            history.push({\r\n                pathname: '/login',\r\n                state: null\r\n            })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"subscription subscription-outer charcoal-bg\">\r\n            <div id=\"Subscription\" className=\"charcoal-bg\">\r\n                <div className=\"flex-container-VC subscription-wrap charcoal-bg\">\r\n                    <div className=\"flex-3 heading-content\">\r\n                        <h1>Unlimited Classes For The Price Of One</h1>\r\n                        <div className=\"line1\">Dance to the music that makes YOU want to move at any skill level.</div>\r\n                    </div>\r\n                    <div className=\"inner-plans-wrap\">\r\n                        {AvailableSubscriptions && AvailableSubscriptions.map((subscription) => {\r\n                            return <div className=\"flex-2 plan\" onClick={() => setSubscription(subscription)} key={subscription.key}>\r\n                                <div className=\"plan_tag\">{subscription.name}</div>\r\n                                <div className=\"plan_price\">@{subscription.amount}<span>{subscription.plans}</span></div>\r\n                                <div className=\"plan_tag\">{subscription.desc}</div>\r\n                                {alreadySubscribed && <div>Alredy subscribed</div>}\r\n                            </div>\r\n                        })}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            {showSubscriptionDetails && <BuySubscription handleClose={() => setShowSubscriptionDetails(false)} activeStep={activeStep} alreadySubscribed={alreadySubscribed} />}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Subscriptions\r\n","F:\\Toms\\Business-work\\Boogalu\\src\\Components\\VideoUploader\\index.js",["341","342","343"],"import React, { useRef, useState, useEffect } from 'react'\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { useStoreConsumer } from '../../Providers/StateProvider';\r\nimport { uploadVideo, uploadImage } from \"../../Services/Upload.service\";\r\nimport { saveUploadedVideo } from \"../../Services/UploadedVideo.service\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { THUMBNAIL_URL } from \"../../Constants\";\r\nimport ImageUploader from 'react-images-upload';\r\nimport { disableLoginFlow } from \"../../Actions/LoginFlow\";\r\nimport { FaCloudUploadAlt } from 'react-icons/fa';\r\nimport { setDataRefetchModuleName } from \"../../Actions/Utility\";\r\nimport { NOTIFICATION_ERROR } from \"../../Constants\";\r\nimport { displayNotification } from \"../../Actions/Notification\";\r\n// modal imports\r\nimport Modal from '@material-ui/core/Modal';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport Fade from '@material-ui/core/Fade';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport { enableLoading, disableLoading } from \"../../Actions/Loader\";\r\n//circular progress\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\n\r\nexport default function VideoUploader({ selectedVdo, handleVdoUploadResponse }) {\r\n    const history = useHistory();\r\n    const { state, dispatch } = useStoreConsumer();\r\n    const loggedInUser = state.loggedInUser;\r\n    const uploaderRef = useRef(null);\r\n    const [SelectedVideo, setSelectedVideo] = useState(selectedVdo ? selectedVdo : { title: \"\", desc: \"\", file: null });\r\n    const [UploadedVdoUrl, setUploadedVdoUrl] = useState(null);\r\n    const [ThumbnailImage, setThumbnailImage] = useState(null);\r\n    const [openVdoUploaderModal, setOpenVdoUploaderModal] = useState(true);\r\n    const [progress, setProgress] = useState(0);\r\n    const [ShowVdoUploadProgress, setShowVdoUploadProgress] = useState(false);\r\n\r\n    // useEffect(() => {\r\n    //     const timer = setInterval(() => {\r\n    //         setProgress((prevProgress) => (prevProgress >= 100 ? 0 : prevProgress + 10));\r\n    //     }, 800);\r\n    //     return () => {\r\n    //         clearInterval(timer);\r\n    //     };\r\n    // }, []);\r\n\r\n    useEffect(() => {\r\n        dispatch(disableLoginFlow());\r\n    }, [])\r\n\r\n    const useStyles = makeStyles((theme) => ({\r\n        modal: {\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n        },\r\n        paper: {\r\n            backgroundColor: theme.palette.background.paper,\r\n            border: '2px solid #000',\r\n            boxShadow: theme.shadows[5],\r\n            padding: theme.spacing(2, 4, 3),\r\n        },\r\n    }));\r\n    const classes = useStyles();\r\n\r\n    async function onChangeFile(event) {\r\n        event.stopPropagation();\r\n        event.preventDefault();\r\n        var file = event.target.files[0];\r\n        console.log(file);\r\n        // 1MB in Bytes is 1,048,576 so you can multiply it by the limit you need.\r\n        if (file) {\r\n            if (file.size > 52428800) {\r\n                alert(\"File is too big!\");\r\n                dispatch(displayNotification({\r\n                    msg: \"File is too big!\",\r\n                    type: NOTIFICATION_ERROR,\r\n                    time: 3000\r\n                }))\r\n                setSelectedVideo({ ...SelectedVideo, file: null });\r\n                uploaderRef.current.click();\r\n            } else {\r\n                setSelectedVideo({ ...SelectedVideo, file: null });\r\n                const reader = new FileReader();\r\n                reader.readAsDataURL(file);\r\n                reader.onload = () => {\r\n                    setSelectedVideo({ ...SelectedVideo, file: reader.result });\r\n                }\r\n                reader.onerror = error => console.error(error);\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleChange = (prop) => (event) => {\r\n        setSelectedVideo({ ...SelectedVideo, [prop]: event.target.value });\r\n    };\r\n\r\n    async function uploadSelectedVideo() {\r\n        var thumbnailImage = THUMBNAIL_URL;\r\n        if (ThumbnailImage && ThumbnailImage[0]) {\r\n            const reader = new FileReader();\r\n            reader.readAsDataURL(ThumbnailImage[0]);\r\n            reader.onload = () => {\r\n                uploadImage(reader.result, 'thumbnail', 'small').subscribe((downloadableUrl) => {\r\n                    thumbnailImage = downloadableUrl;\r\n                })\r\n            }\r\n            reader.onerror = error => console.error(error);\r\n        }\r\n\r\n        uploadVideo(SelectedVideo.file).subscribe((response) => {\r\n            dispatch(enableLoading());\r\n            setShowVdoUploadProgress(true);\r\n            if (response.donePercentage) {\r\n                setProgress(response.donePercentage);\r\n                console.log('Upload is ' + response.donePercentage + '% done');\r\n            }\r\n            if (response.downloadURL && !UploadedVdoUrl) {\r\n                // dispatch(enableLoading());\r\n                setShowVdoUploadProgress(false);\r\n                setUploadedVdoUrl(response.downloadURL);\r\n                const uploadObj = {\r\n                    title: SelectedVideo.title,\r\n                    desc: SelectedVideo.desc,\r\n                    url: response.downloadURL,\r\n                    userId: loggedInUser.key,\r\n                    thumbnail: thumbnailImage\r\n                }\r\n                saveUploadedVideo(uploadObj).subscribe((response) => {\r\n                    console.log(\"vedio data saved to db\", response);\r\n                    dispatch(disableLoading());\r\n                    const pathName = history?.location?.pathname.split('/')[1];\r\n                    pathName.includes('profile') && dispatch(setDataRefetchModuleName('user-uploaded-video'));\r\n                    closeUploaderModal();\r\n                    if (state.currentLoginFlow == 'competition-uploadvdo') handleVdoUploadResponse(3);\r\n                    else history.push('/profile');\r\n                })\r\n            }\r\n        })\r\n        console.log(SelectedVideo);\r\n        console.log(loggedInUser);\r\n    }\r\n\r\n    const onThumbnailImgSelect = (picture) => {\r\n        setThumbnailImage(picture);\r\n    }\r\n\r\n    const closeUploaderModal = () => {\r\n        const pathName = history?.location?.pathname.split('/')[1];\r\n        if (pathName.includes('register') || pathName.includes('login')) {\r\n            history.push('/profile');\r\n        }\r\n        // else if (state.currentLoginFlow == 'competition-uploadvdo') history.push('/competition');\r\n        // handleClose();\r\n        handleVdoUploadResponse();\r\n        setOpenVdoUploaderModal(false);\r\n\r\n    }\r\n\r\n    function CircularProgressWithLabel(props) {\r\n        return (\r\n            <Box position=\"relative\" display=\"inline-flex\">\r\n                <CircularProgress variant=\"determinate\" {...props} />\r\n                <Box\r\n                    top={0}\r\n                    left={0}\r\n                    bottom={0}\r\n                    right={0}\r\n                    position=\"absolute\"\r\n                    display=\"flex\"\r\n                    alignItems=\"center\"\r\n                    justifyContent=\"center\"\r\n                >\r\n                    <Typography variant=\"caption\" component=\"div\" color=\"textSecondary\">{`${Math.round(\r\n                        props.value,\r\n                    )}%`}</Typography>\r\n                </Box>\r\n            </Box>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Modal\r\n                aria-labelledby=\"transition-modal-title\"\r\n                aria-describedby=\"transition-modal-description\"\r\n                className='competition-modal-box'\r\n                open={openVdoUploaderModal}\r\n                onClose={() => closeUploaderModal(false)}\r\n                closeAfterTransition\r\n                BackdropComponent={Backdrop}\r\n                BackdropProps={{\r\n                    timeout: 500,\r\n                }}\r\n            >\r\n                <Fade in={openVdoUploaderModal}>\r\n                    <div className=\"video-uploader-inner-modal\">\r\n                        <IconButton className=\"close-modal-btn\" onClick={() => closeUploaderModal(false)}>\r\n                            <CloseIcon />\r\n                        </IconButton>\r\n                        <h3>Upload your dance performance video!</h3>\r\n                        <div className={`uploader-wrap ${SelectedVideo.file ? 'selected-file' : ''}`}>\r\n                            {\r\n                                !SelectedVideo.file ?\r\n                                    <div className=\"upload-input-wrap\">\r\n                                        <i className=\"upload-icon\"><FaCloudUploadAlt /></i>\r\n                                        <input id=\"myInput\"\r\n                                            type=\"file\"\r\n                                            accept=\"video/mp4,video/x-m4v,video/*\"\r\n                                            ref={uploaderRef}\r\n                                            onChange={(e) => onChangeFile(e)}\r\n                                        />\r\n                                    </div> : ''\r\n                            }\r\n\r\n                            {!SelectedVideo.file ?\r\n                                <div className=\"upload-btn-file\">\r\n                                    <Button\r\n                                        variant=\"contained\" color=\"primary\"\r\n                                        onClick={() => { uploaderRef.current.click() }}>Upload Video</Button>\r\n                                </div> :\r\n                                <div className=\"video-information-wrap\">\r\n                                    <video width=\"400\" controls>\r\n                                        <source src={SelectedVideo.file} />\r\n                                    </video>\r\n                                    <div className=\"change-video-btn\">\r\n                                        <Button\r\n                                            variant=\"contained\" color=\"primary\"\r\n                                            onClick={() => { uploaderRef.current.click() }}\r\n                                        >Change vdo</Button>\r\n                                    </div>\r\n                                    <div className=\"input-form-wrap\">\r\n                                        <div className=\"input-wrap image-uploader-wrap\">\r\n                                            <ImageUploader\r\n                                                withIcon={true}\r\n                                                buttonText='Select image'\r\n                                                onChange={onThumbnailImgSelect}\r\n                                                imgExtension={['.jpg', '.gif', '.png', '.gif', '.svg']}\r\n                                                maxFileSize={5242880}\r\n                                                accept=\"image/*\"\r\n                                                withPreview={true}\r\n                                                singleImage={true}\r\n                                                label=\"Select thumbnail image\"\r\n                                            />\r\n                                        </div>\r\n                                        <div className=\"text-form-wrapper\">\r\n                                            <div className=\"input-field-wrap\">\r\n                                                <TextField className=\"input-field\"\r\n                                                    required\r\n                                                    id=\"outlined-required-title\"\r\n                                                    label=\"Video title\"\r\n                                                    onChange={handleChange('title')}\r\n                                                    value={SelectedVideo.title}\r\n                                                    variant=\"outlined\"\r\n                                                    autoComplete=\"off\"\r\n                                                />\r\n                                            </div>\r\n                                            <div className=\"input-field-wrap\">\r\n                                                <TextField className=\"input-field\"\r\n                                                    required\r\n                                                    id=\"outlined-required-desc\"\r\n                                                    label=\"Video description\"\r\n                                                    onChange={handleChange('desc')}\r\n                                                    value={SelectedVideo.desc}\r\n                                                    variant=\"outlined\"\r\n                                                    autoComplete=\"off\"\r\n                                                />\r\n                                            </div>\r\n                                            <Button variant=\"contained\" color=\"secondary\" onClick={(e) => uploadSelectedVideo(e)}>Upload</Button>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>}\r\n                        </div>\r\n                    </div>\r\n                </Fade>\r\n            </Modal>\r\n            {ShowVdoUploadProgress && <div className=\"progress-wrap\">\r\n                <div className=\"progress-body\">\r\n                    <CircularProgressWithLabel value={progress} />\r\n                </div>\r\n            </div>}\r\n        </div>\r\n    )\r\n}","F:\\Toms\\Business-work\\Boogalu\\src\\Components\\Feeds\\index.js",["344","345","346","347","348","349","350","351","352","353","354","355","356","357","358","359","360","361","362","363","364"],"import React, { useEffect, useState } from 'react'\r\nimport { getUploadedVideosList } from \"../../Services/UploadedVideo.service\";\r\nimport { updateVideoLikes, updateVideoComments } from \"../../Services/UploadedVideo.service\";\r\nimport { getAllUser } from \"../../Services/User.service\";\r\nimport FavoriteBorder from '@material-ui/icons/FavoriteBorder';\r\nimport Favorite from '@material-ui/icons/Favorite';\r\nimport CommentOutlined from '@material-ui/icons/CommentOutlined';\r\nimport { useStoreConsumer } from '../../Providers/StateProvider';\r\nimport VideoDetails from '../VideoDetails'\r\nimport ProfileImage from \"../ProfileImage\";\r\nimport Vedio from \"../Vedio/Video\";\r\n\r\nfunction Feeds() {\r\n\r\n    const [feedList, setFeedList] = useState([])\r\n    const [userList, setUserList] = useState([])\r\n    const [activeVideoObj, setActiveVideoObj] = useState({})\r\n    const [commentModal, setCommentModal] = useState(false)\r\n    const { state, dispatch } = useStoreConsumer();\r\n    const loggedInUser = state.loggedInUser;\r\n\r\n    const getAllUserList = () => {\r\n        return new Promise((res, rej) => {\r\n            getAllUser().subscribe((users) => {\r\n                setUserList(users);\r\n                res(users);\r\n            });\r\n        })\r\n    }\r\n\r\n    const getAllUploadedVideos = () => {\r\n        return new Promise((res, rej) => {\r\n            getUploadedVideosList().subscribe((videos) => {\r\n                res(videos);\r\n            });\r\n        })\r\n    }\r\n\r\n    const handleLikes = (video, status) => {\r\n        let videoObj = { ...video }\r\n        if (status == 'liked') {\r\n            if (videoObj.likes) {\r\n                videoObj.likes.push({ value: 1, userId: loggedInUser.key })\r\n            } else {\r\n                videoObj.likes = [{ value: 1, userId: loggedInUser.key }]\r\n            }\r\n        } else {\r\n            let likes = videoObj.likes.filter(data => data.userId != loggedInUser.key)\r\n            videoObj.likes = likes\r\n        }\r\n        videoObj.likes.map((likeObj) => { delete likeObj.profileImage; delete likeObj.username; })\r\n        updateVideoLikes(videoObj.key, videoObj).subscribe(() => {\r\n            let feedListCopy = [...feedList]\r\n            feedListCopy.map((feed) => {\r\n                if (feed.key == videoObj.key) {\r\n                    feed.likes = videoObj.likes\r\n                }\r\n\r\n                if (feed.likes && feed.likes.length) {\r\n                    let isAvail = feed.likes.filter(data => data.userId == loggedInUser.key)\r\n                    isAvail.length > 0 ? feed.isLiked = true : feed.isLiked = false\r\n                } else {\r\n                    feed.isLiked = false\r\n                }\r\n                addUserDetailsToFeed(feed, userList);\r\n            })\r\n            setFeedList(feedListCopy)\r\n        })\r\n    }\r\n\r\n    const handleComments = (commentString) => {\r\n        let videoObj = { ...activeVideoObj }\r\n        if (videoObj.comments) {\r\n            videoObj.comments.push({ value: commentString, userId: loggedInUser.key })\r\n        } else {\r\n            videoObj.comments = [{ value: commentString, userId: loggedInUser.key }]\r\n        }\r\n\r\n        videoObj.comments.map((commentObj) => { delete commentObj.profileImage; delete commentObj.username; })\r\n        updateVideoComments(videoObj.key, videoObj).subscribe(() => {\r\n            let feedListCopy = [...feedList]\r\n            feedListCopy.map((feed) => {\r\n                if (feed.key == videoObj.key) {\r\n                    feed.comments = videoObj.comments\r\n                }\r\n                addUserDetailsToFeed(feed, userList);\r\n            })\r\n            setFeedList(feedListCopy)\r\n        })\r\n    }\r\n\r\n    const handleCommentClick = (video) => {\r\n        setCommentModal(true);\r\n        setActiveVideoObj(video)\r\n    }\r\n\r\n    const addUserDetailsToFeed = (feed, allUser) => {\r\n        if (feed.likes && feed.likes.length) {\r\n            feed.likes.map((likeObj) => {\r\n                let userData = allUser.filter(userObj => userObj.key == likeObj.userId);\r\n                if (userData.length != 0) {\r\n                    likeObj.username = userData[0].username;\r\n                    likeObj.profileImage = userData[0].profileImage;\r\n                }\r\n            })\r\n        }\r\n        if (feed.comments && feed.comments.length) {\r\n            feed.comments.map((commentObj) => {\r\n                let userData = allUser.filter(userObj => userObj.key == commentObj.userId);\r\n                if (userData.length != 0) {\r\n                    commentObj.username = userData[0].username;\r\n                    commentObj.profileImage = userData[0].profileImage;\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        Promise.all([getAllUserList(), getAllUploadedVideos()]).then((data) => {\r\n            let tempUserList = data[0]\r\n            let tempFeedList = data[1]\r\n\r\n            tempUserList.map((user) => {\r\n                tempFeedList.map((feed) => {\r\n                    if (user.key == feed.userId) {\r\n                        feed.username = user.name;\r\n                        feed.profileImage = user.profileImage;\r\n                    }\r\n                    if (feed.likes && feed.likes.length) {\r\n                        let isAvail = feed.likes.filter(data => data.userId == loggedInUser.key)\r\n                        isAvail.length > 0 ? feed.isLiked = true : feed.isLiked = false\r\n                    } else {\r\n                        feed.isLiked = false\r\n                    }\r\n                    addUserDetailsToFeed(feed, tempUserList);\r\n                })\r\n            })\r\n            setFeedList(tempFeedList)\r\n        })\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"user-dashboard-wrap\">\r\n            <div className=\"user-list-wrap\">\r\n                {userList && userList.map((user) => {\r\n                    return <div key={user.key} className=\"user-icon-wrap\">\r\n                        <ProfileImage src={user.profileImage} type=\"large\" />\r\n                        <div>{user.username}</div>\r\n                    </div>\r\n                })}\r\n            </div>\r\n            <div className=\"feed-dashboard-wrap\">\r\n                {/* <div className=\"loggedin-user\">\r\n                    <div>\r\n                        <ProfileImage src={loggedInUser.profileImage} />\r\n                        <div>\r\n                            <div>{loggedInUser.username}</div>\r\n                            <div className=\"username\">{loggedInUser.name}</div>\r\n                        </div>\r\n                    </div>\r\n                </div> */}\r\n                <div className=\"feed-wrap\">\r\n                    {feedList && feedList.map((feed) => {\r\n                        return <div key={feed.key} className=\"feed-card\">\r\n                            <div className=\"username\">\r\n                                <ProfileImage src={feed.profileImage} />\r\n                                <span>{feed.username}</span>\r\n                            </div>\r\n                            <div>\r\n                                <Vedio vdoObj={feed} />\r\n                            </div>\r\n                            <div className=\"video-title-like-wrap\">\r\n                                <div className=\"title\">{feed.title}</div>\r\n                                <div className=\"like-comment\">\r\n                                    {feed.likes && feed.likes.length > 0 && <div className=\"likes-count\">{feed.likes.length} Likes</div>}\r\n                                    {!feed.isLiked && <FavoriteBorder title=\"Unlike\" onClick={() => handleLikes(feed, 'liked')} />}\r\n                                    {feed.isLiked && <Favorite title=\"Like\" onClick={() => handleLikes(feed, 'unliked')} />}\r\n                                    <CommentOutlined title=\"comment\" onClick={() => handleCommentClick(feed)} />\r\n                                </div>\r\n\r\n                            </div>\r\n                        </div>\r\n                    })}\r\n                </div>\r\n            </div>\r\n\r\n            {commentModal && <VideoDetails handleClose={() => setCommentModal(false)} handleLikes={handleLikes} handleComments={handleComments} videoObj={activeVideoObj} />}\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Feeds\r\n","F:\\Toms\\Business-work\\Boogalu\\src\\Components\\Loader\\index.js",[],"F:\\Toms\\Business-work\\Boogalu\\src\\Components\\Page404\\index.js",[],"F:\\Toms\\Business-work\\Boogalu\\src\\Components\\Notification\\index.js",["365"],"import React, { useState, useEffect } from 'react'\r\nimport { useStoreConsumer } from '../../Providers/StateProvider';\r\nimport { removeNotification } from \"../../Actions/Notification\";\r\nexport default function Notification() {\r\n\r\n    const { state, dispatch } = useStoreConsumer();\r\n    const [ShowNotification, setShowNotification] = useState(true);\r\n    const [ActiveNotification, setActiveNotification] = useState(null);\r\n\r\n    useEffect(() => {\r\n        if (state.notification && state.notification.msg) {\r\n            setShowNotification(true);\r\n            setActiveNotification(state.notification);\r\n            setTimeout(() => {\r\n                setShowNotification(false);\r\n                setActiveNotification(null);\r\n                dispatch(removeNotification({ msg: '', type: '', time: 3000 }))\r\n            }, state.notification.time);\r\n        }\r\n    }, [state])\r\n    return (\r\n        <>\r\n            {ShowNotification ? <div className={`${ActiveNotification?.type} notification-wrap`}>\r\n                <div className=\"notification-type\">\r\n                    <div className=\"notification-msg\">{ActiveNotification?.msg}</div>\r\n                </div>\r\n            </div> : null}\r\n        </>\r\n    )\r\n}","F:\\Toms\\Business-work\\Boogalu\\src\\Reducers\\index.js",[],"F:\\Toms\\Business-work\\Boogalu\\src\\Services\\Upload.service.js",["366","367"],"import { Observable } from 'rxjs';\r\nimport firebase from './firebase';\r\nconst storageRef = firebase.storage().ref();\r\n\r\nconst BASE_PATH = '/uploads';\r\nvar FILE_NAME = '';\r\nvar FILE_PATH = '';\r\n// from ==> competition or user upload\r\n// type => small or large\r\nexport function uploadImage(image, from, type) {\r\n\r\n    let date = new Date();\r\n    let id = date.getTime().toString();\r\n    FILE_NAME = (type ? type : '') + 'pic' + id + '.jpg';\r\n    FILE_PATH = BASE_PATH + '/' + from + '/' + FILE_NAME;\r\n\r\n    let uploadTask = storageRef.child(FILE_PATH).putString(image, 'data_url');\r\n\r\n    return new Observable((observer) => {\r\n        uploadTask.on('state_changed',\r\n            (snapshot) => {\r\n                let progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\r\n                console.log('Upload is ' + progress + '% done');\r\n                switch (snapshot.state) {\r\n                    case firebase.storage.TaskState.PAUSED: // or 'paused'\r\n                        console.log('Upload is paused');\r\n                        break;\r\n                    case firebase.storage.TaskState.RUNNING: // or 'running'\r\n                        console.log('Upload is running');\r\n                        break;\r\n                }\r\n            }, (error) => {\r\n                console.log(error);\r\n            }, () => {\r\n                uploadTask.snapshot.ref.getDownloadURL().then(function (downloadURL) {\r\n                    observer.next(downloadURL);\r\n                });\r\n            });\r\n    });\r\n}\r\n\r\nexport function deleteImage(imageUrl) {\r\n    storageRef.refFromURL(imageUrl).delete();\r\n}\r\n\r\nexport function uploadVideo(video) {\r\n\r\n    let date = new Date();\r\n    let id = date.getTime().toString();\r\n    FILE_NAME = 'user' + id + '.mp4';\r\n    FILE_PATH = BASE_PATH + '/video/' + FILE_NAME;\r\n\r\n    let uploadTask = storageRef.child(FILE_PATH).putString(video, 'data_url');\r\n\r\n    return new Observable((observer) => {\r\n        uploadTask.on('state_changed',\r\n            (snapshot) => {\r\n                let progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\r\n                // console.log('Upload is ' + progress + '% done');\r\n                observer.next({ donePercentage: progress });\r\n                switch (snapshot.state) {\r\n                    case firebase.storage.TaskState.PAUSED: // or 'paused'\r\n                        console.log('Upload is paused');\r\n                        break;\r\n                    case firebase.storage.TaskState.RUNNING: // or 'running'\r\n                        console.log('Upload is running');\r\n                        break;\r\n                }\r\n            }, (error) => {\r\n                console.log(error);\r\n            }, () => {\r\n                uploadTask.snapshot.ref.getDownloadURL().then(function (downloadURL) {\r\n                    observer.next({ downloadURL });\r\n                });\r\n            });\r\n    });\r\n}\r\n\r\nexport function deleteVideo(videoUrl) {\r\n    storageRef.refFromURL(videoUrl).delete();\r\n}\r\n","F:\\Toms\\Business-work\\Boogalu\\src\\Services\\Utils.js",["368","369","370"],"export function formatTime(time) {\r\n    time = new Date(time);\r\n    const hour24 = time.getHours();\r\n    let minutes = (time.getMinutes() === 0) ? '00' : time.getMinutes();\r\n    minutes = (minutes > 0 && minutes < 10) ? `0${minutes}` : minutes;\r\n    const ampm = (hour24 >= 12) ? 'PM' : 'AM';\r\n    let hour = hour24 % 12 || 12;\r\n    //append zero is hour is single digit\r\n    if (hour < 10) {\r\n        hour = `0${hour}`;\r\n    }\r\n    return `${hour}:${minutes} ${ampm}`;\r\n};\r\n\r\nexport function formatDate(date, status) {\r\n    date = new Date(date);\r\n    var monthNames = [\r\n        \"January\", \"February\", \"March\",\r\n        \"April\", \"May\", \"June\", \"July\",\r\n        \"August\", \"September\", \"October\",\r\n        \"November\", \"December\"\r\n    ];\r\n    let day = date.getDate();\r\n    let monthIndex = date.getMonth();\r\n    let year = date.getFullYear();\r\n    if (status == 3) return day + 'th ' + monthNames[monthIndex] + \" \" + year;\r\n    if (status == 2) return day + 'th ' + monthNames[monthIndex];\r\n    if (status == 1) return day;\r\n};\r\n\r\nexport function timeStampToNewDate(timeStamp) {\r\n    return new Date(timeStamp.seconds * 1000 + Math.round(timeStamp.nanoseconds / 1000000));\r\n}\r\n\r\nexport function toBase64(file) {\r\n    new Promise((resolve, reject) => {\r\n        const reader = new FileReader();\r\n        reader.readAsDataURL(file);\r\n        reader.onload = () => resolve(reader.result);\r\n        reader.onerror = error => reject(error);\r\n    });\r\n}","F:\\Toms\\Business-work\\Boogalu\\src\\Services\\Competition.service.js",[],"F:\\Toms\\Business-work\\Boogalu\\src\\Components\\Vedio\\Video.js",[],"F:\\Toms\\Business-work\\Boogalu\\src\\Actions\\User\\index.js",[],"F:\\Toms\\Business-work\\Boogalu\\src\\Services\\UploadedVideo.service.js",[],"F:\\Toms\\Business-work\\Boogalu\\src\\Services\\User.service.js",[],"F:\\Toms\\Business-work\\Boogalu\\src\\Services\\EnrollCompetition.service.js",[],"F:\\Toms\\Business-work\\Boogalu\\src\\Services\\Subscription.service.js",[],"F:\\Toms\\Business-work\\Boogalu\\src\\Data\\LessonsCategory.js",[],"F:\\Toms\\Business-work\\Boogalu\\src\\Actions\\LoginFlow\\index.js",[],"F:\\Toms\\Business-work\\Boogalu\\src\\Actions\\Competition\\index.js",[],"F:\\Toms\\Business-work\\Boogalu\\src\\Components\\VideoDetails\\index.js",["371","372","373","374"],"F:\\Toms\\Business-work\\Boogalu\\src\\Components\\CompetitionsDetails\\index.js",["375","376","377","378","379","380","381","382","383","384","385","386","387","388","389","390","391"],"import React, { useState, useEffect, useRef } from 'react'\r\nimport Modal from '@material-ui/core/Modal';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport Fade from '@material-ui/core/Fade';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport { FaCloudUploadAlt } from 'react-icons/fa';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useStoreConsumer } from '../../Providers/StateProvider';\r\nimport { THUMBNAIL_URL } from '../../Constants';\r\nimport \"./CompetitionsDetails.scss\";\r\nimport EnrollCompetition from \"../EnrollCompetition\";\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport { setActiveCompetition } from \"../../Actions/Competition\";\r\nimport { enableLoginFlow } from \"../../Actions/LoginFlow\";\r\nimport { getUploadedVideosByUserId } from \"../../Services/UploadedVideo.service\";\r\nimport { formatDate, formatTime } from \"../../Services/Utils\";\r\nimport VideoUploader from \"../VideoUploader\";\r\nimport { enableLoading, disableLoading } from \"../../Actions/Loader\";\r\nimport { NOTIFICATION_ERROR } from \"../../Constants\";\r\nimport { displayNotification } from \"../../Actions/Notification\";\r\n//activestep 1 === Competition details\r\n//activestep 2 === User submitted competition details if already enrolled\r\n//activestep 3 === Video selection\r\n//activestep 4 === final age group and video submission for competition\r\n\r\nexport default function CompetitionsDetails({ open, handleClose, initialStep }) {\r\n\r\n    const { state, dispatch } = useStoreConsumer();\r\n    const uploaderRef = useRef(null);\r\n    const history = useHistory();\r\n    const competitionDetails = state.activeCompetition;\r\n    console.log(competitionDetails);\r\n    const loggedInUser = state.loggedInUser;\r\n    const [userUploadedVdos, setUserUploadedVideoList] = useState([]);\r\n    const tncRef = useRef();\r\n    const [TnC, setTnC] = useState(false);\r\n    const [ActiveStep, setActiveStep] = useState(initialStep || 1);\r\n    const [disableSubmitVdoButton, setDisableSubmitVdoButton] = useState(false);\r\n    const [VdoUploadDateLimit, setVdoUploadDateLimit] = useState(null)\r\n    const [SelectedVideo, setSelectedVideo] = useState({ title: \"\", desc: \"\", file: null });\r\n\r\n    useEffect(() => {\r\n        document.addEventListener('mousedown', handleClickOutside);\r\n        return () => {\r\n            document.removeEventListener('mousedown', handleClickOutside);\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (competitionDetails) {\r\n            let vdoUploadUpto = new Date(competitionDetails.startAt);\r\n            new Date(vdoUploadUpto.setDate(vdoUploadUpto.getDate() + 30));\r\n            let displayDate = formatDate(vdoUploadUpto, 3) + \" \" + formatTime(vdoUploadUpto)\r\n            setVdoUploadDateLimit(displayDate);\r\n        }\r\n    }, [competitionDetails]);\r\n\r\n    useEffect(() => {\r\n        (loggedInUser.email && loggedInUser.phone && ActiveStep === 3 && userUploadedVdos.length == 0) && getUploadedVideosByUserId(loggedInUser.key).subscribe((vdoList) => {\r\n            if (vdoList && vdoList.length) {\r\n                vdoList.map((uploadedVdo) => {\r\n                    if (competitionDetails.isUserEnrolled) {\r\n                        if (uploadedVdo.key == competitionDetails.userSubmitedDetails.vdo.key) {\r\n                            uploadedVdo.isSelected = true;\r\n                            let updatedCompetition = competitionDetails;\r\n                            updatedCompetition.selectedVideo = uploadedVdo;\r\n                            dispatch(setActiveCompetition(updatedCompetition));\r\n                            setDisableSubmitVdoButton(true);\r\n                        }\r\n                    }\r\n                })\r\n                setUserUploadedVideoList(vdoList)\r\n            } else {\r\n                // if user not uploaded any video then set upload new tab active\r\n                setActiveTabInVdoSelection(2);\r\n            }\r\n        });\r\n    }, [ActiveStep]);\r\n\r\n    const setActiveTabInVdoSelection = (tab) => {\r\n        const getCurrentData = 'tab-2';\r\n        const tabsLinks = Array.from(document.querySelectorAll('.tab-links'));\r\n        const tabsBoxes = Array.from(document.querySelectorAll('.js-inner-tab-box'));\r\n        let currentTab = tab == 1 ? 'tab-1' : 'tab-2'\r\n        tabsBoxes.forEach(item => {\r\n            if (item.getAttribute('id') === currentTab) {\r\n                item.classList.add('active');\r\n            } else {\r\n                item.classList.remove('active');\r\n            }\r\n        });\r\n        tabsLinks.forEach(item => {\r\n            if (item?.dataset?.id === currentTab) {\r\n                item.classList.add('active');\r\n            } else {\r\n                item.classList.remove('active');\r\n            }\r\n        });\r\n    }\r\n\r\n    function handleClickOutside(event) {\r\n        if (tncRef && tncRef.current && !tncRef.current.contains(event.target)) {\r\n            setTnC(false);\r\n        }\r\n    }\r\n\r\n    const selectVdo = (e, vdo) => {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        if (competitionDetails.isUserEnrolled && competitionDetails.userSubmitedDetails.vdo.key == vdo.key) {\r\n            setDisableSubmitVdoButton(true);\r\n            let updatedCompetition = competitionDetails;\r\n            delete updatedCompetition.selectedVideo;\r\n            dispatch(setActiveCompetition(updatedCompetition));\r\n        }\r\n        else setDisableSubmitVdoButton(false);\r\n        let updatedVdos = userUploadedVdos;\r\n        updatedVdos.map((item) => {\r\n            if (item.key == vdo.key) {\r\n                item.isSelected = true;\r\n                let updatedCompetition = competitionDetails;\r\n                updatedCompetition.selectedVideo = item;\r\n                dispatch(setActiveCompetition(updatedCompetition));\r\n            }\r\n            else item.isSelected = false;\r\n        })\r\n        setUserUploadedVideoList([...updatedVdos]);\r\n    }\r\n\r\n    function toggleTabination(event) {\r\n        event.stopPropagation();\r\n\r\n        const getCurrentData = event.target.getAttribute('data-id');\r\n\r\n        const tabsLinks = Array.from(document.querySelectorAll('.tab-links'));\r\n        const tabsBoxes = Array.from(document.querySelectorAll('.js-inner-tab-box'));\r\n\r\n        tabsLinks.forEach(item => {\r\n            item.classList.remove('active');\r\n        });\r\n        event.target.classList.add('active');\r\n        tabsBoxes.forEach(item => {\r\n            if (item.getAttribute('id') === getCurrentData) {\r\n                item.classList.add('active');\r\n            } else {\r\n                item.classList.remove('active');\r\n            }\r\n        });\r\n    }\r\n\r\n    const proceedForLogin = () => {\r\n        handleClose();\r\n        dispatch(enableLoginFlow('competition'));\r\n        history.push({\r\n            pathname: '/login',\r\n            state: null\r\n        })\r\n    }\r\n\r\n    async function onChangeFile(event) {\r\n        event.preventDefault();\r\n        var file = event.target.files[0];\r\n        console.log(file);\r\n        if (file) {\r\n            if (file.size > 52428800) {\r\n                alert(\"File is too big!\");\r\n                dispatch(displayNotification({\r\n                    msg: \"File is too big!\",\r\n                    type: NOTIFICATION_ERROR,\r\n                    time: 3000\r\n                }))\r\n                setSelectedVideo({ ...SelectedVideo, file: null });\r\n                uploaderRef.current.click();\r\n            } else {\r\n                setSelectedVideo({ ...SelectedVideo, file: null });\r\n                const reader = new FileReader();\r\n                reader.readAsDataURL(file);\r\n                reader.onload = () => {\r\n                    setSelectedVideo({ ...SelectedVideo, file: reader.result });\r\n                    dispatch(enableLoginFlow('competition-uploadvdo'));\r\n                    // handleClose();\r\n                    // open = false;\r\n                }\r\n                reader.onerror = error => console.error(error);\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleVdoUploadResponse = (value) => {\r\n        if (value) {\r\n            dispatch(enableLoading());\r\n            getUploadedVideosByUserId(loggedInUser.key).subscribe((vdoList) => {\r\n                if (vdoList) {\r\n                    setActiveTabInVdoSelection(1);\r\n                    vdoList.map((uploadedVdo) => {\r\n                        if (competitionDetails.isUserEnrolled) {\r\n                            if (uploadedVdo.key == competitionDetails.userSubmitedDetails.vdo.key) {\r\n                                uploadedVdo.isSelected = true;\r\n                                let updatedCompetition = competitionDetails;\r\n                                updatedCompetition.selectedVideo = uploadedVdo;\r\n                                dispatch(setActiveCompetition(updatedCompetition));\r\n                                setDisableSubmitVdoButton(true);\r\n                            }\r\n                        }\r\n                    })\r\n                    dispatch(disableLoading());\r\n                    setUserUploadedVideoList(vdoList)\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Modal\r\n                aria-labelledby=\"transition-modal-title\"\r\n                aria-describedby=\"transition-modal-description\"\r\n                className='competition-modal-box'\r\n                open={open}\r\n                onClose={handleClose}\r\n                closeAfterTransition\r\n                BackdropComponent={Backdrop}\r\n                BackdropProps={{\r\n                    timeout: 500,\r\n                }}\r\n            >\r\n                <Fade in={open}>\r\n                    <div className=\"outer-modal-wrap\">\r\n                        {<div className=\"inner-modal-wrap\">\r\n                            {(ActiveStep == 1 || ActiveStep === 2) && <IconButton className=\"close-modal-btn\" onClick={() => { handleClose(); (state.activeCompetition && !state.currentLoginFlow) && dispatch(setActiveCompetition(null)) }}>\r\n                                <CloseIcon />\r\n                            </IconButton>}\r\n                            {(ActiveStep == 3 || ActiveStep == 4) && <IconButton className=\"close-modal-btn back-step-btn\" onClick={() => setActiveStep(ActiveStep - 1)}>\r\n                                <ArrowBackIcon />\r\n                            </IconButton>}\r\n                            <h2 id=\"title\">{competitionDetails.name}</h2>\r\n                            {(ActiveStep == 1 || ActiveStep == 2) && <div>\r\n                                <div className=\"image-contentWrap\">\r\n                                    <div className=\"image-wrap\">\r\n                                        <img src={competitionDetails.img} alt={competitionDetails.name} />\r\n                                    </div>\r\n                                    <div className=\"about-competition-wrap\">\r\n                                        <div className=\"sub-titles\">About Competition</div>\r\n                                        <p id=\"description\">{competitionDetails.desc}</p>\r\n\r\n                                        <div className=\"sub-titles\">Age Category</div>\r\n                                        <ul>\r\n                                            <li>Age 4 to 13 years</li>\r\n                                            <li>Age 14 to 17 years</li>\r\n                                            <li>Age 18 and above</li>\r\n                                        </ul>\r\n\r\n                                        <div className=\"sub-titles\" id=\"fees\">\r\n                                            Fees: <span>{competitionDetails.fee}</span>\r\n                                        </div>\r\n\r\n                                        <div className=\"start-at sub-titles\">\r\n                                            Start At: <span>{competitionDetails.startingDate}</span>\r\n                                        </div>\r\n                                        <div className=\"end-at sub-titles\">\r\n                                            End At: <span>{competitionDetails.endingDate}</span>\r\n                                        </div>\r\n\r\n                                        {competitionDetails && competitionDetails.isUserEnrolled ?\r\n                                            <div className=\"sub-titles\">\r\n                                                You can change/modify video till\r\n                                            <span>{VdoUploadDateLimit}</span></div> :\r\n                                            <div className=\"sub-titles\">\r\n                                                Upload video till <span>{VdoUploadDateLimit}</span></div>}\r\n\r\n                                        <div className=\"sub-titles\">Winners and Prizes Rule</div>\r\n                                        <ul>\r\n                                            <li>Top 3 Winner From Each Category Get Award.</li>\r\n                                            <li>There will be a three category as mention above.</li>\r\n                                            <li>Winner will be based on best performance.</li>\r\n                                        </ul>\r\n\r\n                                        <ul className=\"prices\">\r\n                                            <li className=\"sub-titles price-details\">\r\n                                                First Price : <span>{competitionDetails.prices[0]}</span>\r\n                                            </li>\r\n                                            <li className=\"sub-titles price-details\">\r\n                                                Second Price : <span>{competitionDetails.prices[1]}</span>\r\n                                            </li>\r\n                                            <li className=\"sub-titles price-details\">\r\n                                                Third Price : <span>{competitionDetails.prices[2]}</span>\r\n                                            </li>\r\n                                        </ul>\r\n\r\n                                        <div className=\"sub-titles\">Submission And Result</div>\r\n                                        <ul>\r\n                                            <li>You Have to submit Your video till 15th June</li>\r\n                                            <li>Result will be declared on 16th June At 4 Pm On</li>\r\n                                            <li>Winner will be based on best performance.</li>\r\n                                        </ul>\r\n                                        <h4 className=\"before-submit-message\">Time To Express Your Talent on Our Platform during this Lockdown</h4>\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <div className=\"action-wrap\">\r\n                                    <div className=\"terms-button\" ref={tncRef} onClick={() => setTnC((TnC ? false : true))}>\r\n                                        Terms &amp; Conditions\r\n                                    {TnC && <div className=\"tool-tip-wrap\">\r\n                                            <div>You may not be able to attend the live session if you are late.</div>\r\n                                            <div>You may face interruptions during the course of the live stream due to internet connectivity issues.</div>\r\n                                            <div>Show details and the artist lineup are subject to change as per the artist’s discretion.</div>\r\n                                            <div> No refunds on purchased tickets are possible, even in case of any rescheduling.</div>\r\n                                        </div>}\r\n                                    </div>\r\n                                    {/* check for user logged in or not */}\r\n                                    {loggedInUser.email && loggedInUser.username ?\r\n                                        <div>\r\n                                            {!competitionDetails?.isUserEnrolled && <Button variant=\"contained\" color=\"primary\" onClick={() => setActiveStep(3)}>Submit Video</Button>}\r\n                                        </div> :\r\n                                        <div>\r\n                                            {/* <div>To upload video you need to login first</div> */}\r\n                                            <Button variant=\"contained\" color=\"primary\" onClick={() => proceedForLogin()}>Login</Button>\r\n                                        </div>\r\n                                    }\r\n                                    {loggedInUser && true && competitionDetails?.isUserEnrolled && <div className=\"change-video-wrap\">\r\n                                        <div >\r\n                                            Submitted details:\r\n                                        {/* <video width=\"400\" controls>\r\n                                            <source src={competitionDetails.userSubmitedDetails.vdo.url} />\r\n                                        </video> */}\r\n                                            <Button variant=\"contained\" color=\"primary\" onClick={() => setActiveStep(3)}>Change Video</Button>\r\n                                        </div>\r\n                                    </div>}\r\n                                </div>\r\n                            </div>}\r\n                            {ActiveStep === 3 && <div className=\"video-submit-section\">\r\n                                <div className=\"lessons-vdo-wrap\">\r\n                                    <div className=\"tabination-wrap\">\r\n                                        <div className=\"tab-btn-section\">\r\n                                            <button className=\"tab-links active\" data-id=\"tab-1\" onClick={e => toggleTabination(e)}>My video list</button>\r\n                                            <button className=\"tab-links\" data-id=\"tab-2\" onClick={e => toggleTabination(e)}>Upload new</button>\r\n                                        </div>\r\n                                        <div className=\"tab-content-wrap\">\r\n                                            <div id=\"tab-1\" className=\"inner-box js-inner-tab-box list-box active\">\r\n                                                {userUploadedVdos.length != 0 && userUploadedVdos.map((item, index) => {\r\n                                                    return <div className={item.isSelected ? 'vdo-outer selected-vdo' : 'vdo-outer'} key={index} onClick={(e) => selectVdo(e, item)}>\r\n                                                        <div className=\"vdo-wrap\" >\r\n                                                            <img src={item.thumbnail ? item.thumbnail : THUMBNAIL_URL} alt=\"video-url\" />\r\n                                                        </div>\r\n                                                        <div className=\"video-title\">{item.title}</div>\r\n                                                    </div>\r\n                                                })}\r\n                                            </div>\r\n                                            <div id=\"tab-2\" className=\"inner-box js-inner-tab-box new-upload-box\">\r\n                                                <div className=\"input-upload-wrap\">\r\n                                                    <input\r\n                                                        accept=\"video/mp4,video/x-m4v,video/*\"\r\n                                                        ref={uploaderRef}\r\n                                                        onChange={(e) => onChangeFile(e)}\r\n                                                        type=\"file\" id=\"video-upload\" title=\"upload video for competition\" />\r\n                                                    <i className=\"upload-icon\"><FaCloudUploadAlt /></i>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                                {!disableSubmitVdoButton && <Button variant=\"contained\" color=\"primary\" onClick={() => setActiveStep(4)}>Upload</Button>}\r\n                            </div>}\r\n\r\n                            {ActiveStep === 4 && <div>\r\n                                <EnrollCompetition handleClose={(e) => handleClose(e)} changeSelectedVdo={() => setActiveStep(3)} />\r\n                            </div>}\r\n                            {SelectedVideo?.file && <VideoUploader selectedVdo={SelectedVideo} handleVdoUploadResponse={(e) => handleVdoUploadResponse(e)} />}\r\n                        </div>}\r\n                    </div>\r\n                </Fade>\r\n            </Modal>\r\n        </div>\r\n    )\r\n}","F:\\Toms\\Business-work\\Boogalu\\src\\Actions\\Notification\\index.js",[],"F:\\Toms\\Business-work\\Boogalu\\src\\Actions\\Loader\\index.js",[],"F:\\Toms\\Business-work\\Boogalu\\src\\Actions\\Utility\\index.js",[],"F:\\Toms\\Business-work\\Boogalu\\src\\Constants\\index.js",[],"F:\\Toms\\Business-work\\Boogalu\\src\\Services\\firebase.js",[],"F:\\Toms\\Business-work\\Boogalu\\src\\Data\\RegistrationStepData.js",[],"F:\\Toms\\Business-work\\Boogalu\\src\\Components\\ProfileImage\\index.js",["392"],"import React from 'react'\r\nimport AccountCircleOutlinedIcon from '@material-ui/icons/AccountCircleOutlined';\r\n\r\nexport default function ProfileImage({ src, type }) {\r\n    return (\r\n        <div className={type == 'large' ? 'profile-image-wrap large-image' : 'profile-image-wrap small-image'}>\r\n            {src ? <img src={src} alt=\"user profile\" /> : <AccountCircleOutlinedIcon />}\r\n        </div>\r\n    )\r\n}","F:\\Toms\\Business-work\\Boogalu\\src\\Database\\index.js",["393"],"import { data } from 'jquery';\r\nimport firebase from '../Services/firebase';\r\nconst database = firebase.firestore();\r\nexport default database;","F:\\Toms\\Business-work\\Boogalu\\src\\Components\\BuySubscription\\index.js",["394","395","396","397","398","399"],"import React, { useRef, useState, useEffect } from 'react'\r\nimport Button from '@material-ui/core/Button';\r\nimport { useStoreConsumer } from '../../Providers/StateProvider';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { formatDate } from \"../../Services/Utils\";\r\nimport { disableLoginFlow } from \"../../Actions/LoginFlow\";\r\nimport { saveCompetition } from \"../../Services/EnrollCompetition.service\";\r\n// modal imports\r\nimport Modal from '@material-ui/core/Modal';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport Fade from '@material-ui/core/Fade';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport { enableLoading, disableLoading } from \"../../Actions/Loader\";\r\n\r\nexport default function BuySubsription({ handleClose, activeStep, alreadySubscribed }) {\r\n    const history = useHistory();\r\n    const { state, dispatch } = useStoreConsumer();\r\n    const loggedInUser = state.loggedInUser;\r\n    const [openDetailsModal, setOpenDetailsModal] = useState(true);\r\n    const subscriptionDetails = state.activeSubscription;\r\n    const [subsciptionValidity, setsubsciptionValidity] = useState(null);\r\n    const competitionDetails = state.activeCompetition;\r\n\r\n    useEffect(() => {\r\n        let validUpto = new Date();\r\n        new Date(validUpto.setDate(validUpto.getDate() + 30));\r\n        let displayDate = formatDate(validUpto, 3);\r\n        setsubsciptionValidity(displayDate);\r\n    }, [subscriptionDetails])\r\n\r\n    const handleModalClose = () => {\r\n        setOpenDetailsModal(false);\r\n        dispatch(disableLoginFlow());\r\n        handleClose();\r\n    }\r\n\r\n    const submitForCompetition = () => {\r\n        dispatch(enableLoading());\r\n        const competitionObj = {\r\n            compId: competitionDetails.key,\r\n            compName: competitionDetails.name,\r\n            compImg: competitionDetails.img,\r\n            userId: loggedInUser.key,\r\n            vdo: {\r\n                key: competitionDetails.selectedVideo.key,\r\n                title: competitionDetails.selectedVideo.title,\r\n                thumbnail: competitionDetails.selectedVideo.thumbnail,\r\n                url: competitionDetails.selectedVideo.url,\r\n                desc: competitionDetails.selectedVideo.desc,\r\n            },\r\n            ageGroup: competitionDetails.ageGroup,\r\n            status: 'Submited'\r\n        }\r\n        console.log(competitionObj)\r\n        saveCompetition(competitionObj).subscribe((response) => {\r\n            dispatch(disableLoading());\r\n            console.log('vdo uploaded for competition suceess');\r\n            dispatch(disableLoginFlow());\r\n            history.push('/profile');\r\n        })\r\n    }\r\n\r\n    const proceedForCompetition = () => {\r\n        if (state.currentLoginFlow == 'competition-subscription') {\r\n            submitForCompetition();\r\n        } else history.push('/competition');\r\n    }\r\n    const proceedForPayment = () => {\r\n        var params = \"?phone=\" + loggedInUser.phone + \"&orderId=\" + subscriptionDetails.key + \"&amount=\" + subscriptionDetails.amount + \"&uId=\" + loggedInUser.uId + \"&email=\" + loggedInUser.email;\r\n        // window.open('http://localhost:5001/boogalusite/us-central1/payment' + params, '_self');\r\n        window.open('https://us-central1-boogalusite.cloudfunctions.net/payment' + params, '_self');\r\n    }\r\n\r\n    return (\r\n        <div className=\"subscription-modal-wrap\">\r\n            <Modal\r\n                aria-labelledby=\"transition-modal-title\"\r\n                aria-describedby=\"transition-modal-description\"\r\n                className='subscription-modal-box'\r\n                open={openDetailsModal}\r\n                onClose={() => handleModalClose(false)}\r\n                closeAfterTransition\r\n                BackdropComponent={Backdrop}\r\n                BackdropProps={{\r\n                    timeout: 500,\r\n                }}\r\n            >\r\n                <Fade in={openDetailsModal}>\r\n                    <div className=\"subscription-inner-modal\">\r\n                        <IconButton className=\"close-modal-btn\" onClick={() => handleModalClose(false)}>\r\n                            <CloseIcon />\r\n                        </IconButton>\r\n                        <h3>Boogalu Subscription</h3>\r\n                        {activeStep == 1 && <div>\r\n                            <div className=\"subs-details-wrap\">\r\n                                <p>\r\n                                    Welcome, we are glad to see you. Now, you can subscribe to our application, and\r\n                                    get a chance to participate in any competition for one month.\r\n                                </p>\r\n                                <p> Just {subscriptionDetails.amount}/{subscriptionDetails.plans}</p>\r\n                                {/* <div>{subscriptionDetails.name}</div> */}\r\n                                {/* <div>{subscriptionDetails.desc}</div> */}\r\n                                {/* <div>{subscriptionDetails.amount} / {subscriptionDetails.plans}</div> */}\r\n                                {/* <div>Valid Upto- {subsciptionValidity}</div> */}\r\n                            </div>\r\n                            {alreadySubscribed ? <Button variant=\"contained\" color=\"secondary\" onClick={(e) => proceedForCompetition()}>Continue to competition</Button> : <Button variant=\"contained\" color=\"secondary\" onClick={(e) => proceedForPayment(e)}>Subscribe</Button>}\r\n                        </div>}\r\n                        {activeStep == 2 && <div>\r\n                            <div>payment success</div>\r\n                            <Button variant=\"contained\" color=\"secondary\" onClick={(e) => proceedForCompetition()}>Continue to competition</Button>\r\n                        </div>}\r\n                        {activeStep == 3 && <div>\r\n                            <div>payment fail</div>\r\n                            <Button variant=\"contained\" color=\"secondary\" onClick={(e) => proceedForPayment(e)}>Retry</Button>\r\n                        </div>}\r\n                    </div>\r\n                </Fade>\r\n            </Modal>\r\n        </div>\r\n    )\r\n}","F:\\Toms\\Business-work\\Boogalu\\src\\Actions\\Subscription\\index.js",[],"F:\\Toms\\Business-work\\Boogalu\\src\\Components\\EnrollCompetition\\index.js",["400","401"],"import React, { useState, useEffect } from 'react'\r\nimport ArrowRightSharpIcon from '@material-ui/icons/ArrowRightSharp';\r\nimport Button from '@material-ui/core/Button';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport { THUMBNAIL_URL } from '../../Constants';\r\nimport { useStoreConsumer } from '../../Providers/StateProvider';\r\nimport { saveCompetition, updateCompetition } from \"../../Services/EnrollCompetition.service\";\r\nimport { enableLoginFlow } from \"../../Actions/LoginFlow\";\r\nimport { setActiveCompetition } from \"../../Actions/Competition\";\r\nimport { enableLoading, disableLoading } from \"../../Actions/Loader\";\r\n\r\nfunction EnrollCompetition({ handleClose, changeSelectedVdo }) {\r\n\r\n    const history = useHistory();\r\n    const { state, dispatch } = useStoreConsumer();\r\n    const loggedInUser = state.loggedInUser;\r\n    const competitionDetails = state.activeCompetition;\r\n    const SelectedVdo = competitionDetails.selectedVideo;\r\n    const [IsUserSubscribed, setIsUserSubscribed] = useState(null);\r\n\r\n    useEffect(() => {\r\n        if (loggedInUser.subscriptions) {\r\n            let isSubscribed = loggedInUser.subscriptions.filter((data) => data.type === 'competition-enrollment');\r\n            if (isSubscribed.length) setIsUserSubscribed(true);\r\n            else setIsUserSubscribed(false);\r\n        } else setIsUserSubscribed(false);\r\n    }, [])\r\n\r\n    const onAgeGroupChange = (groupValue) => {\r\n        let compData = { ...competitionDetails };\r\n        compData.ageGroup = groupValue;\r\n        dispatch(setActiveCompetition(compData));\r\n    }\r\n\r\n    const submitForCompetition = () => {\r\n        dispatch(enableLoading());\r\n        const competitionObj = {\r\n            compId: competitionDetails.key,\r\n            compName: competitionDetails.name,\r\n            compImg: competitionDetails.img,\r\n            userId: loggedInUser.key,\r\n            vdo: {\r\n                key: competitionDetails.selectedVideo.key,\r\n                title: competitionDetails.selectedVideo.title,\r\n                thumbnail: competitionDetails.selectedVideo.thumbnail,\r\n                url: competitionDetails.selectedVideo.url,\r\n                desc: competitionDetails.selectedVideo.desc,\r\n            },\r\n            ageGroup: competitionDetails.ageGroup,\r\n            status: 'Submited'\r\n        }\r\n        console.log(competitionObj)\r\n        if (competitionDetails.isUserEnrolled) {\r\n            updateCompetition(competitionDetails.userSubmitedDetails.key, competitionObj).subscribe((response) => {\r\n                dispatch(disableLoading());\r\n                console.log('vdo updated for competition suceess');\r\n                history.push('/profile');\r\n            })\r\n        } else {\r\n            saveCompetition(competitionObj).subscribe((response) => {\r\n                dispatch(disableLoading());\r\n                console.log('vdo uploaded for competition suceess');\r\n                history.push('/profile');\r\n            })\r\n        }\r\n\r\n        // handleClose();\r\n    }\r\n\r\n    const proceedForSubscription = () => {\r\n        handleClose();\r\n        dispatch(enableLoginFlow('competition-subscription'));\r\n        history.push({\r\n            pathname: '/subscription',\r\n            state: null\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className=\"final-enrollment-wrap\">\r\n            <h2 id=\"title\">Basic Details for Enrollment</h2>\r\n            {/* <img src={competitionDetails.img} alt={competitionDetails.name} style={{ width: '20%' }} /> */}\r\n            {/* <p id=\"description\">{competitionDetails.desc}</p> */}\r\n            <div className=\"userdata\">\r\n                <div className=\"user-info\"><label>Name:</label><span>{loggedInUser.name}</span></div>\r\n                <div className=\"user-info\"><label>Phone:</label><span>{loggedInUser.phone}</span></div>\r\n                <div className=\"user-info\"><label>Email:</label><span>{loggedInUser.email}</span></div>\r\n                <div className=\"user-info\"><label>Gender:</label><span>{loggedInUser.gender}</span></div>\r\n            </div>\r\n            {!competitionDetails?.isUserEnrolled ? <div className=\"age-group-dropdown\">\r\n                <FormControl variant=\"outlined\" className=\"input-field\">\r\n                    <InputLabel id=\"select-outlined-label\">Select Age Group</InputLabel>\r\n                    <Select\r\n                        labelId=\"select-outlined-label\"\r\n                        id=\"select-outlined\"\r\n                        value={competitionDetails.ageGroup}\r\n                        onChange={(e) => onAgeGroupChange(e.target.value)}\r\n                        label=\"Select Age Group\"\r\n                    >\r\n                        <MenuItem value=\"Age 4 to 13 years\">Age 4 to 13 years</MenuItem>\r\n                        <MenuItem value=\"Age 14 to 17 years\">Age 14 to 17 years</MenuItem>\r\n                        <MenuItem value=\"Age 18 and above\">Age 18 and above</MenuItem>\r\n                    </Select>\r\n                </FormControl>\r\n            </div>\r\n                :\r\n                <div>Submited age group - {competitionDetails.userSubmitedDetails.ageGroup}</div>\r\n            }\r\n            {SelectedVdo && <div className=\"selected-vdo\">\r\n                <div className=\"sub-title\">Selected video for competition</div>\r\n                <div className=\"change-link\" onClick={() => changeSelectedVdo()}>Change</div>\r\n                <div className=\"vdo-wrap\" >\r\n                    <img src={SelectedVdo.thumbnail ? SelectedVdo.thumbnail : THUMBNAIL_URL} style={{ width: \"50%\" }} />\r\n                    <div>{SelectedVdo.title}</div>\r\n                </div>\r\n            </div>}\r\n            {/* check for user subscribed or not */}\r\n            {IsUserSubscribed ?\r\n                <div>\r\n                    {!competitionDetails?.isUserEnrolled ? <Button variant=\"contained\" color=\"primary\" onClick={() => submitForCompetition()}>Complete Enrollment <ArrowRightSharpIcon /></Button>\r\n                        : <Button variant=\"contained\" color=\"primary\" onClick={() => submitForCompetition()}>Update Competition<ArrowRightSharpIcon /></Button>\r\n                    }\r\n                </div> :\r\n                <div>\r\n                    {/* <div>To upload video you need to subscribe</div> */}\r\n                    <Button variant=\"contained\" color=\"primary\" onClick={() => proceedForSubscription()}>Continue</Button>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default EnrollCompetition\r\n",{"ruleId":"402","replacedBy":"403"},{"ruleId":"404","replacedBy":"405"},{"ruleId":"406","severity":1,"message":"407","line":2,"column":50,"nodeType":"408","messageId":"409","endLine":2,"endColumn":54},{"ruleId":"406","severity":1,"message":"410","line":5,"column":7,"nodeType":"408","messageId":"409","endLine":5,"endColumn":24},{"ruleId":"406","severity":1,"message":"411","line":1,"column":17,"nodeType":"408","messageId":"409","endLine":1,"endColumn":25},{"ruleId":"412","severity":1,"message":"413","line":26,"column":8,"nodeType":"414","endLine":26,"endColumn":10,"suggestions":"415"},{"ruleId":"416","severity":1,"message":"417","line":61,"column":66,"nodeType":"418","endLine":61,"endColumn":81},{"ruleId":"419","severity":1,"message":"420","line":78,"column":29,"nodeType":"421","endLine":78,"endColumn":83},{"ruleId":"416","severity":1,"message":"417","line":84,"column":114,"nodeType":"418","endLine":84,"endColumn":129},{"ruleId":"416","severity":1,"message":"417","line":90,"column":110,"nodeType":"418","endLine":90,"endColumn":125},{"ruleId":"416","severity":1,"message":"417","line":96,"column":109,"nodeType":"418","endLine":96,"endColumn":124},{"ruleId":"406","severity":1,"message":"422","line":11,"column":33,"nodeType":"408","messageId":"409","endLine":11,"endColumn":51},{"ruleId":"412","severity":1,"message":"413","line":83,"column":8,"nodeType":"414","endLine":83,"endColumn":18,"suggestions":"423"},{"ruleId":"406","severity":1,"message":"424","line":86,"column":15,"nodeType":"408","messageId":"409","endLine":86,"endColumn":32},{"ruleId":"425","severity":1,"message":"426","line":222,"column":33,"nodeType":"421","endLine":222,"endColumn":140},{"ruleId":"419","severity":1,"message":"427","line":236,"column":25,"nodeType":"421","endLine":236,"endColumn":89},{"ruleId":"406","severity":1,"message":"428","line":71,"column":32,"nodeType":"408","messageId":"409","endLine":71,"endColumn":53},{"ruleId":"412","severity":1,"message":"429","line":89,"column":8,"nodeType":"414","endLine":89,"endColumn":10,"suggestions":"430"},{"ruleId":"431","severity":1,"message":"432","line":102,"column":29,"nodeType":"433","messageId":"434","endLine":102,"endColumn":31},{"ruleId":"435","severity":1,"message":"436","line":106,"column":46,"nodeType":"437","messageId":"438","endLine":106,"endColumn":48},{"ruleId":"435","severity":1,"message":"436","line":108,"column":56,"nodeType":"437","messageId":"438","endLine":108,"endColumn":58},{"ruleId":"431","severity":1,"message":"439","line":109,"column":87,"nodeType":"433","messageId":"434","endLine":109,"endColumn":89},{"ruleId":"431","severity":1,"message":"432","line":110,"column":53,"nodeType":"433","messageId":"434","endLine":110,"endColumn":55},{"ruleId":"435","severity":1,"message":"436","line":117,"column":62,"nodeType":"437","messageId":"438","endLine":117,"endColumn":64},{"ruleId":"431","severity":1,"message":"439","line":118,"column":87,"nodeType":"433","messageId":"434","endLine":118,"endColumn":89},{"ruleId":"431","severity":1,"message":"432","line":119,"column":53,"nodeType":"433","messageId":"434","endLine":119,"endColumn":55},{"ruleId":"412","severity":1,"message":"440","line":132,"column":8,"nodeType":"414","endLine":132,"endColumn":10,"suggestions":"441"},{"ruleId":"431","severity":1,"message":"439","line":135,"column":37,"nodeType":"433","messageId":"434","endLine":135,"endColumn":39},{"ruleId":"412","severity":1,"message":"440","line":138,"column":8,"nodeType":"414","endLine":138,"endColumn":15,"suggestions":"442"},{"ruleId":"431","severity":1,"message":"439","line":184,"column":72,"nodeType":"433","messageId":"434","endLine":184,"endColumn":74},{"ruleId":"431","severity":1,"message":"439","line":197,"column":20,"nodeType":"433","messageId":"434","endLine":197,"endColumn":22},{"ruleId":"431","severity":1,"message":"432","line":204,"column":67,"nodeType":"433","messageId":"434","endLine":204,"endColumn":69},{"ruleId":"435","severity":1,"message":"436","line":207,"column":38,"nodeType":"437","messageId":"438","endLine":207,"endColumn":40},{"ruleId":"435","severity":1,"message":"436","line":210,"column":37,"nodeType":"437","messageId":"438","endLine":210,"endColumn":39},{"ruleId":"431","severity":1,"message":"439","line":211,"column":30,"nodeType":"433","messageId":"434","endLine":211,"endColumn":32},{"ruleId":"431","severity":1,"message":"439","line":216,"column":73,"nodeType":"433","messageId":"434","endLine":216,"endColumn":75},{"ruleId":"435","severity":1,"message":"436","line":234,"column":44,"nodeType":"437","messageId":"438","endLine":234,"endColumn":46},{"ruleId":"435","severity":1,"message":"436","line":237,"column":37,"nodeType":"437","messageId":"438","endLine":237,"endColumn":39},{"ruleId":"431","severity":1,"message":"439","line":238,"column":30,"nodeType":"433","messageId":"434","endLine":238,"endColumn":32},{"ruleId":"425","severity":1,"message":"426","line":257,"column":29,"nodeType":"421","endLine":257,"endColumn":68},{"ruleId":"425","severity":1,"message":"426","line":355,"column":41,"nodeType":"421","endLine":355,"endColumn":74},{"ruleId":"406","severity":1,"message":"443","line":13,"column":10,"nodeType":"408","messageId":"409","endLine":13,"endColumn":18},{"ruleId":"406","severity":1,"message":"444","line":9,"column":8,"nodeType":"408","messageId":"409","endLine":9,"endColumn":21},{"ruleId":"406","severity":1,"message":"445","line":59,"column":11,"nodeType":"408","messageId":"409","endLine":59,"endColumn":24},{"ruleId":"406","severity":1,"message":"446","line":22,"column":10,"nodeType":"408","messageId":"409","endLine":22,"endColumn":31},{"ruleId":"406","severity":1,"message":"422","line":22,"column":33,"nodeType":"408","messageId":"409","endLine":22,"endColumn":51},{"ruleId":"406","severity":1,"message":"447","line":22,"column":81,"nodeType":"408","messageId":"409","endLine":22,"endColumn":109},{"ruleId":"431","severity":1,"message":"439","line":31,"column":66,"nodeType":"433","messageId":"434","endLine":31,"endColumn":68},{"ruleId":"431","severity":1,"message":"439","line":31,"column":113,"nodeType":"433","messageId":"434","endLine":31,"endColumn":115},{"ruleId":"412","severity":1,"message":"448","line":62,"column":8,"nodeType":"414","endLine":62,"endColumn":10,"suggestions":"449"},{"ruleId":"431","severity":1,"message":"432","line":65,"column":34,"nodeType":"433","messageId":"434","endLine":65,"endColumn":36},{"ruleId":"425","severity":1,"message":"426","line":121,"column":25,"nodeType":"421","endLine":121,"endColumn":111},{"ruleId":"406","severity":1,"message":"450","line":18,"column":21,"nodeType":"408","messageId":"409","endLine":18,"endColumn":31},{"ruleId":"406","severity":1,"message":"422","line":23,"column":33,"nodeType":"408","messageId":"409","endLine":23,"endColumn":51},{"ruleId":"412","severity":1,"message":"451","line":37,"column":8,"nodeType":"414","endLine":37,"endColumn":28,"suggestions":"452"},{"ruleId":"431","severity":1,"message":"432","line":65,"column":28,"nodeType":"433","messageId":"434","endLine":65,"endColumn":30},{"ruleId":"453","severity":1,"message":"454","line":159,"column":9,"nodeType":"455","messageId":"456","endLine":232,"endColumn":10},{"ruleId":"431","severity":1,"message":"439","line":182,"column":52,"nodeType":"433","messageId":"434","endLine":182,"endColumn":54},{"ruleId":"431","severity":1,"message":"439","line":183,"column":57,"nodeType":"433","messageId":"434","endLine":183,"endColumn":59},{"ruleId":"431","severity":1,"message":"439","line":184,"column":57,"nodeType":"433","messageId":"434","endLine":184,"endColumn":59},{"ruleId":"431","severity":1,"message":"439","line":215,"column":52,"nodeType":"433","messageId":"434","endLine":215,"endColumn":54},{"ruleId":"431","severity":1,"message":"439","line":216,"column":57,"nodeType":"433","messageId":"434","endLine":216,"endColumn":59},{"ruleId":"431","severity":1,"message":"439","line":217,"column":57,"nodeType":"433","messageId":"434","endLine":217,"endColumn":59},{"ruleId":"425","severity":1,"message":"426","line":328,"column":17,"nodeType":"421","endLine":328,"endColumn":36},{"ruleId":"406","severity":1,"message":"457","line":1,"column":27,"nodeType":"408","messageId":"409","endLine":1,"endColumn":33},{"ruleId":"406","severity":1,"message":"458","line":1,"column":35,"nodeType":"408","messageId":"409","endLine":1,"endColumn":44},{"ruleId":"406","severity":1,"message":"459","line":6,"column":28,"nodeType":"408","messageId":"409","endLine":6,"endColumn":45},{"ruleId":"406","severity":1,"message":"460","line":5,"column":13,"nodeType":"408","messageId":"409","endLine":5,"endColumn":14},{"ruleId":"406","severity":1,"message":"461","line":9,"column":20,"nodeType":"408","messageId":"409","endLine":9,"endColumn":28},{"ruleId":"462","severity":1,"message":"463","line":24,"column":25,"nodeType":"421","endLine":24,"endColumn":223},{"ruleId":"462","severity":1,"message":"463","line":27,"column":25,"nodeType":"421","endLine":27,"endColumn":223},{"ruleId":"462","severity":1,"message":"463","line":30,"column":25,"nodeType":"421","endLine":30,"endColumn":223},{"ruleId":"406","severity":1,"message":"422","line":24,"column":33,"nodeType":"408","messageId":"409","endLine":24,"endColumn":51},{"ruleId":"406","severity":1,"message":"447","line":24,"column":81,"nodeType":"408","messageId":"409","endLine":24,"endColumn":109},{"ruleId":"412","severity":1,"message":"448","line":73,"column":8,"nodeType":"414","endLine":73,"endColumn":10,"suggestions":"464"},{"ruleId":"431","severity":1,"message":"432","line":78,"column":38,"nodeType":"433","messageId":"434","endLine":78,"endColumn":40},{"ruleId":"435","severity":1,"message":"436","line":82,"column":69,"nodeType":"437","messageId":"438","endLine":82,"endColumn":71},{"ruleId":"435","severity":1,"message":"436","line":83,"column":51,"nodeType":"437","messageId":"438","endLine":83,"endColumn":53},{"ruleId":"431","severity":1,"message":"432","line":86,"column":52,"nodeType":"433","messageId":"434","endLine":86,"endColumn":54},{"ruleId":"431","severity":1,"message":"432","line":88,"column":46,"nodeType":"433","messageId":"434","endLine":88,"endColumn":48},{"ruleId":"435","severity":1,"message":"436","line":89,"column":60,"nodeType":"437","messageId":"438","endLine":89,"endColumn":62},{"ruleId":"412","severity":1,"message":"465","line":99,"column":8,"nodeType":"414","endLine":99,"endColumn":20,"suggestions":"466"},{"ruleId":"431","severity":1,"message":"432","line":104,"column":42,"nodeType":"433","messageId":"434","endLine":104,"endColumn":44},{"ruleId":"431","severity":1,"message":"432","line":151,"column":34,"nodeType":"433","messageId":"434","endLine":151,"endColumn":36},{"ruleId":"431","severity":1,"message":"439","line":167,"column":48,"nodeType":"433","messageId":"434","endLine":167,"endColumn":50},{"ruleId":"431","severity":1,"message":"439","line":168,"column":53,"nodeType":"433","messageId":"434","endLine":168,"endColumn":55},{"ruleId":"431","severity":1,"message":"439","line":169,"column":48,"nodeType":"433","messageId":"434","endLine":169,"endColumn":50},{"ruleId":"453","severity":1,"message":"454","line":188,"column":9,"nodeType":"455","messageId":"456","endLine":194,"endColumn":10},{"ruleId":"453","severity":1,"message":"454","line":198,"column":9,"nodeType":"455","messageId":"456","endLine":204,"endColumn":10},{"ruleId":"435","severity":1,"message":"436","line":211,"column":45,"nodeType":"437","messageId":"438","endLine":211,"endColumn":47},{"ruleId":"431","severity":1,"message":"432","line":215,"column":28,"nodeType":"433","messageId":"434","endLine":215,"endColumn":30},{"ruleId":"435","severity":1,"message":"436","line":222,"column":69,"nodeType":"437","messageId":"438","endLine":222,"endColumn":71},{"ruleId":"435","severity":1,"message":"436","line":223,"column":47,"nodeType":"437","messageId":"438","endLine":223,"endColumn":49},{"ruleId":"431","severity":1,"message":"432","line":226,"column":48,"nodeType":"433","messageId":"434","endLine":226,"endColumn":50},{"ruleId":"431","severity":1,"message":"432","line":228,"column":42,"nodeType":"433","messageId":"434","endLine":228,"endColumn":44},{"ruleId":"435","severity":1,"message":"436","line":229,"column":56,"nodeType":"437","messageId":"438","endLine":229,"endColumn":58},{"ruleId":"431","severity":1,"message":"432","line":239,"column":34,"nodeType":"433","messageId":"434","endLine":239,"endColumn":36},{"ruleId":"431","severity":1,"message":"432","line":263,"column":25,"nodeType":"433","messageId":"434","endLine":263,"endColumn":27},{"ruleId":"431","severity":1,"message":"432","line":385,"column":64,"nodeType":"433","messageId":"434","endLine":385,"endColumn":66},{"ruleId":"431","severity":1,"message":"432","line":406,"column":29,"nodeType":"433","messageId":"434","endLine":406,"endColumn":31},{"ruleId":"431","severity":1,"message":"432","line":414,"column":77,"nodeType":"433","messageId":"434","endLine":414,"endColumn":79},{"ruleId":"431","severity":1,"message":"432","line":415,"column":45,"nodeType":"433","messageId":"434","endLine":415,"endColumn":47},{"ruleId":"431","severity":1,"message":"439","line":421,"column":25,"nodeType":"433","messageId":"434","endLine":421,"endColumn":27},{"ruleId":"425","severity":1,"message":"426","line":431,"column":25,"nodeType":"421","endLine":431,"endColumn":111},{"ruleId":"431","severity":1,"message":"432","line":624,"column":37,"nodeType":"433","messageId":"434","endLine":624,"endColumn":39},{"ruleId":"435","severity":1,"message":"436","line":22,"column":51,"nodeType":"437","messageId":"438","endLine":22,"endColumn":53},{"ruleId":"431","severity":1,"message":"439","line":23,"column":104,"nodeType":"433","messageId":"434","endLine":23,"endColumn":106},{"ruleId":"431","severity":1,"message":"439","line":50,"column":36,"nodeType":"433","messageId":"434","endLine":50,"endColumn":38},{"ruleId":"412","severity":1,"message":"467","line":69,"column":8,"nodeType":"414","endLine":69,"endColumn":10,"suggestions":"468"},{"ruleId":"431","severity":1,"message":"439","line":32,"column":31,"nodeType":"433","messageId":"434","endLine":32,"endColumn":33},{"ruleId":"431","severity":1,"message":"439","line":62,"column":44,"nodeType":"433","messageId":"434","endLine":62,"endColumn":46},{"ruleId":"431","severity":1,"message":"439","line":70,"column":40,"nodeType":"433","messageId":"434","endLine":70,"endColumn":42},{"ruleId":"412","severity":1,"message":"469","line":75,"column":8,"nodeType":"414","endLine":75,"endColumn":10,"suggestions":"470"},{"ruleId":"412","severity":1,"message":"471","line":80,"column":8,"nodeType":"414","endLine":80,"endColumn":28,"suggestions":"472"},{"ruleId":"412","severity":1,"message":"473","line":51,"column":8,"nodeType":"414","endLine":51,"endColumn":10,"suggestions":"474"},{"ruleId":"406","severity":1,"message":"475","line":66,"column":11,"nodeType":"408","messageId":"409","endLine":66,"endColumn":18},{"ruleId":"431","severity":1,"message":"439","line":137,"column":48,"nodeType":"433","messageId":"434","endLine":137,"endColumn":50},{"ruleId":"406","severity":1,"message":"461","line":19,"column":20,"nodeType":"408","messageId":"409","endLine":19,"endColumn":28},{"ruleId":"431","severity":1,"message":"439","line":41,"column":20,"nodeType":"433","messageId":"434","endLine":41,"endColumn":22},{"ruleId":"431","severity":1,"message":"432","line":48,"column":67,"nodeType":"433","messageId":"434","endLine":48,"endColumn":69},{"ruleId":"435","severity":1,"message":"436","line":51,"column":38,"nodeType":"437","messageId":"438","endLine":51,"endColumn":40},{"ruleId":"435","severity":1,"message":"436","line":54,"column":37,"nodeType":"437","messageId":"438","endLine":54,"endColumn":39},{"ruleId":"431","severity":1,"message":"439","line":55,"column":30,"nodeType":"433","messageId":"434","endLine":55,"endColumn":32},{"ruleId":"431","severity":1,"message":"439","line":60,"column":73,"nodeType":"433","messageId":"434","endLine":60,"endColumn":75},{"ruleId":"435","severity":1,"message":"436","line":79,"column":44,"nodeType":"437","messageId":"438","endLine":79,"endColumn":46},{"ruleId":"435","severity":1,"message":"436","line":82,"column":37,"nodeType":"437","messageId":"438","endLine":82,"endColumn":39},{"ruleId":"431","severity":1,"message":"439","line":83,"column":30,"nodeType":"433","messageId":"434","endLine":83,"endColumn":32},{"ruleId":"435","severity":1,"message":"436","line":99,"column":38,"nodeType":"437","messageId":"438","endLine":99,"endColumn":40},{"ruleId":"431","severity":1,"message":"439","line":100,"column":70,"nodeType":"433","messageId":"434","endLine":100,"endColumn":72},{"ruleId":"431","severity":1,"message":"432","line":101,"column":37,"nodeType":"433","messageId":"434","endLine":101,"endColumn":39},{"ruleId":"435","severity":1,"message":"436","line":108,"column":44,"nodeType":"437","messageId":"438","endLine":108,"endColumn":46},{"ruleId":"431","severity":1,"message":"439","line":109,"column":70,"nodeType":"433","messageId":"434","endLine":109,"endColumn":72},{"ruleId":"431","severity":1,"message":"432","line":110,"column":37,"nodeType":"433","messageId":"434","endLine":110,"endColumn":39},{"ruleId":"435","severity":1,"message":"436","line":123,"column":37,"nodeType":"437","messageId":"438","endLine":123,"endColumn":39},{"ruleId":"435","severity":1,"message":"436","line":124,"column":41,"nodeType":"437","messageId":"438","endLine":124,"endColumn":43},{"ruleId":"431","severity":1,"message":"439","line":125,"column":34,"nodeType":"433","messageId":"434","endLine":125,"endColumn":36},{"ruleId":"431","severity":1,"message":"439","line":130,"column":77,"nodeType":"433","messageId":"434","endLine":130,"endColumn":79},{"ruleId":"412","severity":1,"message":"476","line":140,"column":8,"nodeType":"414","endLine":140,"endColumn":10,"suggestions":"477"},{"ruleId":"412","severity":1,"message":"473","line":20,"column":8,"nodeType":"414","endLine":20,"endColumn":15,"suggestions":"478"},{"ruleId":"453","severity":1,"message":"454","line":24,"column":17,"nodeType":"455","messageId":"456","endLine":31,"endColumn":18},{"ruleId":"453","severity":1,"message":"454","line":61,"column":17,"nodeType":"455","messageId":"456","endLine":68,"endColumn":18},{"ruleId":"431","severity":1,"message":"439","line":26,"column":16,"nodeType":"433","messageId":"434","endLine":26,"endColumn":18},{"ruleId":"431","severity":1,"message":"439","line":27,"column":16,"nodeType":"433","messageId":"434","endLine":27,"endColumn":18},{"ruleId":"431","severity":1,"message":"439","line":28,"column":16,"nodeType":"433","messageId":"434","endLine":28,"endColumn":18},{"ruleId":"406","severity":1,"message":"458","line":1,"column":27,"nodeType":"408","messageId":"409","endLine":1,"endColumn":36},{"ruleId":"406","severity":1,"message":"460","line":13,"column":13,"nodeType":"408","messageId":"409","endLine":13,"endColumn":14},{"ruleId":"406","severity":1,"message":"479","line":18,"column":30,"nodeType":"408","messageId":"409","endLine":18,"endColumn":49},{"ruleId":"431","severity":1,"message":"432","line":23,"column":25,"nodeType":"433","messageId":"434","endLine":23,"endColumn":27},{"ruleId":"431","severity":1,"message":"439","line":61,"column":98,"nodeType":"433","messageId":"434","endLine":61,"endColumn":100},{"ruleId":"435","severity":1,"message":"436","line":63,"column":43,"nodeType":"437","messageId":"438","endLine":63,"endColumn":45},{"ruleId":"431","severity":1,"message":"439","line":65,"column":45,"nodeType":"433","messageId":"434","endLine":65,"endColumn":47},{"ruleId":"412","severity":1,"message":"480","line":80,"column":8,"nodeType":"414","endLine":80,"endColumn":20,"suggestions":"481"},{"ruleId":"406","severity":1,"message":"482","line":83,"column":15,"nodeType":"408","messageId":"409","endLine":83,"endColumn":29},{"ruleId":"431","severity":1,"message":"439","line":86,"column":30,"nodeType":"433","messageId":"434","endLine":86,"endColumn":32},{"ruleId":"431","severity":1,"message":"439","line":112,"column":97,"nodeType":"433","messageId":"434","endLine":112,"endColumn":99},{"ruleId":"435","severity":1,"message":"436","line":120,"column":32,"nodeType":"437","messageId":"438","endLine":120,"endColumn":34},{"ruleId":"431","severity":1,"message":"439","line":121,"column":26,"nodeType":"433","messageId":"434","endLine":121,"endColumn":28},{"ruleId":"435","severity":1,"message":"436","line":197,"column":47,"nodeType":"437","messageId":"438","endLine":197,"endColumn":49},{"ruleId":"431","severity":1,"message":"439","line":199,"column":49,"nodeType":"433","messageId":"434","endLine":199,"endColumn":51},{"ruleId":"431","severity":1,"message":"439","line":232,"column":42,"nodeType":"433","messageId":"434","endLine":232,"endColumn":44},{"ruleId":"431","severity":1,"message":"439","line":235,"column":42,"nodeType":"433","messageId":"434","endLine":235,"endColumn":44},{"ruleId":"431","severity":1,"message":"439","line":235,"column":61,"nodeType":"433","messageId":"434","endLine":235,"endColumn":63},{"ruleId":"431","severity":1,"message":"439","line":239,"column":42,"nodeType":"433","messageId":"434","endLine":239,"endColumn":44},{"ruleId":"431","severity":1,"message":"439","line":239,"column":61,"nodeType":"433","messageId":"434","endLine":239,"endColumn":63},{"ruleId":"431","severity":1,"message":"432","line":342,"column":74,"nodeType":"433","messageId":"434","endLine":342,"endColumn":76},{"ruleId":"431","severity":1,"message":"439","line":6,"column":30,"nodeType":"433","messageId":"434","endLine":6,"endColumn":32},{"ruleId":"406","severity":1,"message":"483","line":1,"column":10,"nodeType":"408","messageId":"409","endLine":1,"endColumn":14},{"ruleId":"406","severity":1,"message":"457","line":1,"column":17,"nodeType":"408","messageId":"409","endLine":1,"endColumn":23},{"ruleId":"406","severity":1,"message":"484","line":22,"column":12,"nodeType":"408","messageId":"409","endLine":22,"endColumn":31},{"ruleId":"431","severity":1,"message":"439","line":65,"column":36,"nodeType":"433","messageId":"434","endLine":65,"endColumn":38},{"ruleId":"431","severity":1,"message":"439","line":95,"column":37,"nodeType":"433","messageId":"434","endLine":95,"endColumn":39},{"ruleId":"431","severity":1,"message":"439","line":109,"column":37,"nodeType":"433","messageId":"434","endLine":109,"endColumn":39},{"ruleId":"431","severity":1,"message":"439","line":113,"column":37,"nodeType":"433","messageId":"434","endLine":113,"endColumn":39},{"ruleId":"412","severity":1,"message":"485","line":31,"column":8,"nodeType":"414","endLine":31,"endColumn":10,"suggestions":"486"},{"ruleId":"425","severity":1,"message":"426","line":117,"column":21,"nodeType":"421","endLine":117,"endColumn":121},"no-native-reassign",["487"],"no-negated-in-lhs",["488"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'loggedInUserState' is assigned a value but never used.","'useState' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'history?.location?.pathname'. Either include it or remove the dependency array.","ArrayExpression",["489"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'NOTIFICATION_ERROR' is defined but never used.",["490"],"'listenRouteChange' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'setUserLikedVideoList' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dispatch', 'history', 'loggedInUser', and 'onWindowScroll'. Either include them or remove the dependency array.",["491"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","Expected '===' and instead saw '=='.","React Hook useEffect has missing dependencies: 'dispatch' and 'loggedInUser.key'. Either include them or remove the dependency array.",["492"],["493"],"'toBase64' is defined but never used.","'ImageUploader' is defined but never used.","'onimageUpload' is assigned a value but never used.","'NOTIFICATION_SUCCCESS' is defined but never used.","'FEMALE_PROFILE_DEFAULT_IMAGE' is defined but never used.","React Hook useEffect has a missing dependency: 'userDetails'. Either include it or remove the dependency array. You can also do a functional update 'setUserDetails(u => ...)' if you only need 'userDetails' in the 'setUserDetails' call.",["494"],"'signupUser' is defined but never used.","React Hook useEffect has a missing dependency: 'signinUser'. Either include it or remove the dependency array.",["495"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'useRef' is defined but never used.","'useEffect' is defined but never used.","'setActiveCategory' is assigned a value but never used.","'$' is defined but never used.","'dispatch' is assigned a value but never used.","jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.",["496"],"React Hook useEffect has a missing dependency: 'stepData'. Either include it or remove the dependency array.",["497"],"React Hook useEffect has missing dependencies: 'dispatch', 'loggedInUser.email', 'loggedInUser.phone', 'loggedInUser.subscriptions', 'prepareUserCompData', and 'state.currentLoginFlow'. Either include them or remove the dependency array.",["498"],"React Hook useEffect has missing dependencies: 'dispatch', 'history', 'loggedInUser', 'state.activeSubscription.key', 'state.activeSubscription.type', and 'state.currentLoginFlow'. Either include them or remove the dependency array.",["499"],"React Hook useEffect has a missing dependency: 'loggedInUser?.subscriptions'. Either include it or remove the dependency array.",["500"],"React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["501"],"'classes' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'loggedInUser.key'. Either include it or remove the dependency array.",["502"],["503"],"'setOpenDetailsModal' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'competitionDetails', 'dispatch', 'loggedInUser.email', 'loggedInUser.key', 'loggedInUser.phone', and 'userUploadedVdos.length'. Either include them or remove the dependency array.",["504"],"'getCurrentData' is assigned a value but never used.","'data' is defined but never used.","'subsciptionValidity' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'loggedInUser.subscriptions'. Either include it or remove the dependency array.",["505"],"no-global-assign","no-unsafe-negation",{"desc":"506","fix":"507"},{"desc":"508","fix":"509"},{"desc":"510","fix":"511"},{"desc":"512","fix":"513"},{"desc":"514","fix":"515"},{"desc":"516","fix":"517"},{"desc":"518","fix":"519"},{"desc":"516","fix":"520"},{"desc":"521","fix":"522"},{"desc":"523","fix":"524"},{"desc":"525","fix":"526"},{"desc":"527","fix":"528"},{"desc":"529","fix":"530"},{"desc":"531","fix":"532"},{"desc":"533","fix":"534"},{"desc":"535","fix":"536"},{"desc":"537","fix":"538"},"Update the dependencies array to be: [history?.location?.pathname]",{"range":"539","text":"540"},"Update the dependencies array to be: [history?.location?.pathname, isMobile]",{"range":"541","text":"542"},"Update the dependencies array to be: [dispatch, history, loggedInUser, onWindowScroll]",{"range":"543","text":"544"},"Update the dependencies array to be: [dispatch, loggedInUser.key]",{"range":"545","text":"546"},"Update the dependencies array to be: [dispatch, loggedInUser.key, state]",{"range":"547","text":"548"},"Update the dependencies array to be: [userDetails]",{"range":"549","text":"550"},"Update the dependencies array to be: [signinUser, thirdPartyResponse]",{"range":"551","text":"552"},{"range":"553","text":"550"},"Update the dependencies array to be: [activeStep, stepData]",{"range":"554","text":"555"},"Update the dependencies array to be: [dispatch, loggedInUser.email, loggedInUser.phone, loggedInUser.subscriptions, prepareUserCompData, state.currentLoginFlow]",{"range":"556","text":"557"},"Update the dependencies array to be: [dispatch, history, loggedInUser, state.activeSubscription.key, state.activeSubscription.type, state.currentLoginFlow]",{"range":"558","text":"559"},"Update the dependencies array to be: [loggedInUser?.subscriptions, state.loggedInUser]",{"range":"560","text":"561"},"Update the dependencies array to be: [dispatch]",{"range":"562","text":"563"},"Update the dependencies array to be: [loggedInUser.key]",{"range":"564","text":"565"},"Update the dependencies array to be: [dispatch, state]",{"range":"566","text":"567"},"Update the dependencies array to be: [ActiveStep, competitionDetails, dispatch, loggedInUser.email, loggedInUser.key, loggedInUser.phone, userUploadedVdos.length]",{"range":"568","text":"569"},"Update the dependencies array to be: [loggedInUser.subscriptions]",{"range":"570","text":"571"},[950,952],"[history?.location?.pathname]",[3555,3565],"[history?.location?.pathname, isMobile]",[3911,3913],"[dispatch, history, loggedInUser, onWindowScroll]",[5901,5903],"[dispatch, loggedInUser.key]",[6169,6176],"[dispatch, loggedInUser.key, state]",[3140,3142],"[userDetails]",[2066,2086],"[signinUser, thirdPartyResponse]",[3671,3673],[5021,5033],"[activeStep, stepData]",[3307,3309],"[dispatch, loggedInUser.email, loggedInUser.phone, loggedInUser.subscriptions, prepareUserCompData, state.currentLoginFlow]",[3899,3901],"[dispatch, history, loggedInUser, state.activeSubscription.key, state.activeSubscription.type, state.currentLoginFlow]",[4129,4149],"[loggedInUser?.subscriptions, state.loggedInUser]",[2483,2485],"[dispatch]",[5622,5624],"[loggedInUser.key]",[870,877],"[dispatch, state]",[4009,4021],"[ActiveStep, competitionDetails, dispatch, loggedInUser.email, loggedInUser.key, loggedInUser.phone, userUploadedVdos.length]",[1580,1582],"[loggedInUser.subscriptions]"]