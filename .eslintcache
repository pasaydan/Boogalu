[{"F:\\Toms\\Business-work\\Boogalu\\src\\index.js":"1","F:\\Toms\\Business-work\\Boogalu\\src\\reportWebVitals.js":"2","F:\\Toms\\Business-work\\Boogalu\\src\\App.js":"3","F:\\Toms\\Business-work\\Boogalu\\src\\Providers\\StateProvider.js":"4","F:\\Toms\\Business-work\\Boogalu\\src\\Components\\Login\\Login.js":"5","F:\\Toms\\Business-work\\Boogalu\\src\\Components\\Profile\\Profile.js":"6","F:\\Toms\\Business-work\\Boogalu\\src\\Components\\Navigation\\index.js":"7","F:\\Toms\\Business-work\\Boogalu\\src\\Components\\Admin\\Subscription.js":"8","F:\\Toms\\Business-work\\Boogalu\\src\\Components\\Footer\\index.js":"9","F:\\Toms\\Business-work\\Boogalu\\src\\Components\\Admin\\Competition.js":"10","F:\\Toms\\Business-work\\Boogalu\\src\\Components\\EditProfile\\EditProfile.js":"11","F:\\Toms\\Business-work\\Boogalu\\src\\Services\\LocalstorageCache.js":"12","F:\\Toms\\Business-work\\Boogalu\\src\\Components\\Homepage\\index.js":"13","F:\\Toms\\Business-work\\Boogalu\\src\\Components\\Competitions\\index.js":"14","F:\\Toms\\Business-work\\Boogalu\\src\\Components\\Subscriptions\\index.js":"15","F:\\Toms\\Business-work\\Boogalu\\src\\Components\\Signup\\index.js":"16","F:\\Toms\\Business-work\\Boogalu\\src\\Components\\Page404\\index.js":"17","F:\\Toms\\Business-work\\Boogalu\\src\\Components\\VideoUploader\\index.js":"18","F:\\Toms\\Business-work\\Boogalu\\src\\Components\\Contactus\\index.js":"19","F:\\Toms\\Business-work\\Boogalu\\src\\Components\\Splash\\index.js":"20","F:\\Toms\\Business-work\\Boogalu\\src\\Components\\Loader\\index.js":"21","F:\\Toms\\Business-work\\Boogalu\\src\\Components\\Upcoming\\index.js":"22","F:\\Toms\\Business-work\\Boogalu\\src\\Components\\Feeds\\index.js":"23","F:\\Toms\\Business-work\\Boogalu\\src\\Components\\Notification\\index.js":"24","F:\\Toms\\Business-work\\Boogalu\\src\\Reducers\\index.js":"25","F:\\Toms\\Business-work\\Boogalu\\src\\Services\\User.service.js":"26","F:\\Toms\\Business-work\\Boogalu\\src\\Services\\UploadedVideo.service.js":"27","F:\\Toms\\Business-work\\Boogalu\\src\\Services\\Competition.service.js":"28","F:\\Toms\\Business-work\\Boogalu\\src\\Services\\EnrollCompetition.service.js":"29","F:\\Toms\\Business-work\\Boogalu\\src\\Services\\Utils.js":"30","F:\\Toms\\Business-work\\Boogalu\\src\\Services\\Upload.service.js":"31","F:\\Toms\\Business-work\\Boogalu\\src\\Components\\Vedio\\Video.js":"32","F:\\Toms\\Business-work\\Boogalu\\src\\Actions\\User\\index.js":"33","F:\\Toms\\Business-work\\Boogalu\\src\\Services\\Other.service.js":"34","F:\\Toms\\Business-work\\Boogalu\\src\\Components\\CompetitionsDetails\\index.js":"35","F:\\Toms\\Business-work\\Boogalu\\src\\Constants\\index.js":"36","F:\\Toms\\Business-work\\Boogalu\\src\\Actions\\Notification\\index.js":"37","F:\\Toms\\Business-work\\Boogalu\\src\\Actions\\Utility\\index.js":"38","F:\\Toms\\Business-work\\Boogalu\\src\\Actions\\LoginFlow\\index.js":"39","F:\\Toms\\Business-work\\Boogalu\\src\\Actions\\Loader\\index.js":"40","F:\\Toms\\Business-work\\Boogalu\\src\\Actions\\Competition\\index.js":"41","F:\\Toms\\Business-work\\Boogalu\\src\\Data\\LessonsCategory.js":"42","F:\\Toms\\Business-work\\Boogalu\\src\\Components\\VideoDetails\\index.js":"43","F:\\Toms\\Business-work\\Boogalu\\src\\Services\\firebase.js":"44","F:\\Toms\\Business-work\\Boogalu\\src\\Data\\RegistrationStepData.js":"45","F:\\Toms\\Business-work\\Boogalu\\src\\Services\\Subscription.service.js":"46","F:\\Toms\\Business-work\\Boogalu\\src\\Services\\Email.service.js":"47","F:\\Toms\\Business-work\\Boogalu\\src\\Components\\ProfileImage\\index.js":"48","F:\\Toms\\Business-work\\Boogalu\\src\\Database\\index.js":"49","F:\\Toms\\Business-work\\Boogalu\\src\\Components\\LessonVideoComponent\\index.js":"50","F:\\Toms\\Business-work\\Boogalu\\src\\Components\\BuySubscription\\index.js":"51","F:\\Toms\\Business-work\\Boogalu\\src\\Actions\\Subscription\\index.js":"52","F:\\Toms\\Business-work\\Boogalu\\src\\Components\\EnrollCompetition\\index.js":"53","F:\\Toms\\Business-work\\Boogalu\\src\\Data\\Dummy.js":"54"},{"size":737,"mtime":1610191707084,"results":"55","hashOfConfig":"56"},{"size":375,"mtime":1610191707092,"results":"57","hashOfConfig":"56"},{"size":4651,"mtime":1614015879977,"results":"58","hashOfConfig":"56"},{"size":1104,"mtime":1612288719884,"results":"59","hashOfConfig":"56"},{"size":17489,"mtime":1612950461219,"results":"60","hashOfConfig":"56"},{"size":24521,"mtime":1612581613023,"results":"61","hashOfConfig":"56"},{"size":14648,"mtime":1614015953467,"results":"62","hashOfConfig":"56"},{"size":9877,"mtime":1612113584395,"results":"63","hashOfConfig":"56"},{"size":4562,"mtime":1611768340593,"results":"64","hashOfConfig":"56"},{"size":11266,"mtime":1612113376602,"results":"65","hashOfConfig":"56"},{"size":16090,"mtime":1612288719878,"results":"66","hashOfConfig":"56"},{"size":251,"mtime":1610191707084,"results":"67","hashOfConfig":"56"},{"size":8909,"mtime":1614015761564,"results":"68","hashOfConfig":"56"},{"size":5317,"mtime":1612495621425,"results":"69","hashOfConfig":"56"},{"size":7866,"mtime":1612495621595,"results":"70","hashOfConfig":"56"},{"size":36498,"mtime":1612950453709,"results":"71","hashOfConfig":"56"},{"size":469,"mtime":1612078925784,"results":"72","hashOfConfig":"56"},{"size":15853,"mtime":1612618214271,"results":"73","hashOfConfig":"56"},{"size":5899,"mtime":1612581612998,"results":"74","hashOfConfig":"56"},{"size":479,"mtime":1613488540831,"results":"75","hashOfConfig":"56"},{"size":370,"mtime":1612111467586,"results":"76","hashOfConfig":"56"},{"size":1523,"mtime":1612720653551,"results":"77","hashOfConfig":"56"},{"size":8783,"mtime":1612581613012,"results":"78","hashOfConfig":"56"},{"size":1263,"mtime":1614016158414,"results":"79","hashOfConfig":"56"},{"size":1993,"mtime":1612581613251,"results":"80","hashOfConfig":"56"},{"size":2574,"mtime":1612168119781,"results":"81","hashOfConfig":"56"},{"size":2502,"mtime":1612322848058,"results":"82","hashOfConfig":"56"},{"size":3117,"mtime":1611725424905,"results":"83","hashOfConfig":"56"},{"size":3387,"mtime":1611993980668,"results":"84","hashOfConfig":"56"},{"size":1447,"mtime":1611725424909,"results":"85","hashOfConfig":"56"},{"size":3006,"mtime":1611725424906,"results":"86","hashOfConfig":"56"},{"size":617,"mtime":1612501941873,"results":"87","hashOfConfig":"56"},{"size":403,"mtime":1610191706906,"results":"88","hashOfConfig":"56"},{"size":448,"mtime":1612581613255,"results":"89","hashOfConfig":"56"},{"size":22842,"mtime":1612581612995,"results":"90","hashOfConfig":"56"},{"size":2303,"mtime":1612581613023,"results":"91","hashOfConfig":"56"},{"size":336,"mtime":1612168119753,"results":"92","hashOfConfig":"56"},{"size":369,"mtime":1612168119765,"results":"93","hashOfConfig":"56"},{"size":320,"mtime":1611725424874,"results":"94","hashOfConfig":"56"},{"size":299,"mtime":1612235378700,"results":"95","hashOfConfig":"56"},{"size":382,"mtime":1612581612990,"results":"96","hashOfConfig":"56"},{"size":12210,"mtime":1611462124486,"results":"97","hashOfConfig":"56"},{"size":4273,"mtime":1612368043096,"results":"98","hashOfConfig":"56"},{"size":1017,"mtime":1611725424909,"results":"99","hashOfConfig":"56"},{"size":7647,"mtime":1610191706964,"results":"100","hashOfConfig":"56"},{"size":2649,"mtime":1612009015730,"results":"101","hashOfConfig":"56"},{"size":565,"mtime":1612495621595,"results":"102","hashOfConfig":"56"},{"size":408,"mtime":1612322848055,"results":"103","hashOfConfig":"56"},{"size":142,"mtime":1611725424900,"results":"104","hashOfConfig":"56"},{"size":10507,"mtime":1612720899071,"results":"105","hashOfConfig":"56"},{"size":6165,"mtime":1612581612990,"results":"106","hashOfConfig":"56"},{"size":196,"mtime":1612009015708,"results":"107","hashOfConfig":"56"},{"size":9228,"mtime":1612495621495,"results":"108","hashOfConfig":"56"},{"size":1664,"mtime":1612720524722,"results":"109","hashOfConfig":"56"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},"g3scqe",{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"112"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"112"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":41,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"112"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"128","messages":"129","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"112"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"112"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"112"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"112"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"144","messages":"145","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"112"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"112"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":34,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"112"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"112"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"112"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"112"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"112"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185","usedDeprecatedRules":"112"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"112"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197","usedDeprecatedRules":"112"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"215","usedDeprecatedRules":"112"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"226","usedDeprecatedRules":"112"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"229","usedDeprecatedRules":"112"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"232","usedDeprecatedRules":"112"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"235","usedDeprecatedRules":"112"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"240","usedDeprecatedRules":"112"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},"F:\\Toms\\Business-work\\Boogalu\\src\\index.js",[],["243","244"],"F:\\Toms\\Business-work\\Boogalu\\src\\reportWebVitals.js",[],"F:\\Toms\\Business-work\\Boogalu\\src\\App.js",[],"F:\\Toms\\Business-work\\Boogalu\\src\\Providers\\StateProvider.js",["245"],"import React, { createContext, useReducer, useContext } from 'react';\r\nimport storeReducer from '../Reducers';\r\nimport LocalstorageCache from '../Services/LocalstorageCache';\r\n\r\nconst loggedInUserState = {\r\n  name: '',\r\n  username: '',\r\n  email: '',\r\n  phone: '',\r\n  dob: '2017-05-24',\r\n  gender: '',\r\n  country: '',\r\n  state: '',\r\n  password: '',\r\n  confirmPassword: '',\r\n  bio: '',\r\n  tnc: true,\r\n  profileImage: '',\r\n  source: ''\r\n}\r\n\r\nconst initialState = localStorage.getItem(\"Choreoculture\") ? JSON.parse(localStorage.getItem(\"Choreoculture\"))\r\n  : {\r\n    loggedInUser: {},\r\n    isLoading: null,\r\n    currentLoginFlow: null,\r\n    notification: {\r\n      msg: \"\",\r\n      type: \"\",\r\n      time: 3000\r\n    }\r\n  };\r\nconst store = createContext(initialState);\r\nconst { Provider } = store;\r\n\r\nconst useStoreConsumer = () => useContext(store);\r\n\r\nconst StateProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(LocalstorageCache(storeReducer), initialState);\r\n\r\n  return <Provider value={{ state, dispatch }}>{children}</Provider>;\r\n};\r\n\r\nexport { store, StateProvider, useStoreConsumer }","F:\\Toms\\Business-work\\Boogalu\\src\\Components\\Login\\Login.js",["246","247","248","249","250","251","252","253","254","255","256","257","258","259","260"],"import React, { useState, useEffect } from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useStoreConsumer } from '../../Providers/StateProvider';\r\nimport { GoogleLogin } from 'react-google-login';\r\nimport FacebookLogin from 'react-facebook-login';\r\nimport FacebookIcon from '@material-ui/icons/Facebook';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport boogaluLogo from '../../Images/Boogalu-logo.svg';\r\nimport Visibility from '@material-ui/icons/Visibility';\r\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\r\nimport ArrowRightSharpIcon from '@material-ui/icons/ArrowRightSharp';\r\nimport bgImg from '../../Images/bg1.svg';\r\nimport { loginUser, signupUser } from '../../Actions/User/index';\r\nimport { getUserByEmail, getUserByPhone } from \"../../Services/User.service\";\r\nimport VideoUploader from \"../VideoUploader\";\r\nimport { enableLoading, disableLoading } from \"../../Actions/Loader\";\r\nimport { displayNotification, removeNotification } from \"../../Actions/Notification\";\r\nimport { NOTIFICATION_SUCCCESS, NOTIFICATION_ERROR } from \"../../Constants\";\r\nimport * as $ from 'jquery';\r\n\r\nexport default function Login() {\r\n    const { state, dispatch } = useStoreConsumer();\r\n    const history = useHistory();\r\n    const [loginCred, setloginCred] = useState({ username: \"\", password: \"\", showPassWord: false })\r\n    const [LoginError, setLoginError] = useState(null);\r\n    const [thirdPartyResponse, setThirdPartyResponse] = useState({ isLogginSuccess: false, data: null, source: '' })\r\n    const [openVdoUploadModal, setOpenVdoUploadModal] = useState(false)\r\n    const [componentShowClass, toggleShowClass] = useState('')\r\n\r\n    useEffect(() => {\r\n        if (thirdPartyResponse.source === 'Facebook') signinUser('', 'Facebook');\r\n        if (thirdPartyResponse.source === 'Google') signinUser('', 'Google');\r\n    }, [thirdPartyResponse]);\r\n\r\n    useEffect(() => {\r\n        dispatch(removeNotification({\r\n            msg: \"\",\r\n            type: NOTIFICATION_SUCCCESS,\r\n            time: 0\r\n        }));\r\n        \r\n        setTimeout(() => {\r\n            toggleShowClass('show');\r\n        }, 300);\r\n\r\n        $('html,body').animate({\r\n            scrollTop: 0\r\n        }, 500);\r\n    }, [])\r\n\r\n    const setLoginResponseToServer = () => {\r\n        // notify server that user is loggedin\r\n        console.log('Save loggin user to db')\r\n\r\n    }\r\n    const successResponseGoogle = function (response) {\r\n        console.log(response);\r\n        let loginResponse = {\r\n            data: {\r\n                name: response.profileObj.name,\r\n                email: response.profileObj.email,\r\n                token: response.googleId,\r\n                profileImage: response.profileObj.imageUrl,\r\n            },\r\n            source: 'Google'\r\n        }\r\n        setThirdPartyResponse(loginResponse);\r\n    }\r\n\r\n    const failureResponseGoogle = function (response) {\r\n        if (response.error != \"idpiframe_initialization_failed\") {\r\n            setLoginError('Sorry there was a problem with your google login request.')\r\n        }\r\n    }\r\n\r\n    const responseFacebook = (response) => {\r\n        console.log(response);\r\n        if (response && response.userID) {\r\n            let loginResponse = {\r\n                isLogginSuccess: true,\r\n                data: response,\r\n                source: 'Facebook'\r\n            }\r\n            setThirdPartyResponse(loginResponse);\r\n        } else {\r\n            setLoginError('Sorry there was a problem with your facebook login request.')\r\n            console.log(\"facebook login error\", response);\r\n        }\r\n    }\r\n\r\n    const handleMouseDownPassword = (event) => {\r\n        event.preventDefault();\r\n    };\r\n\r\n    const handleChange = (prop) => (event) => {\r\n        setLoginError(null);\r\n        setloginCred({ ...loginCred, [prop]: event.target.value });\r\n    };\r\n\r\n    const showPassword = () => {\r\n        setloginCred({ ...loginCred, showPassWord: (loginCred.showPassWord ? false : true) })\r\n    }\r\n\r\n    const checkForUserPhone = (phone) => {\r\n        return new Promise((res, rej) => {\r\n            getUserByPhone(phone).subscribe((data) => {\r\n                if (data && data.length) res(data);\r\n                else res(null);\r\n            })\r\n        })\r\n    }\r\n\r\n    const checkForUserEmail = (email) => {\r\n        return new Promise((res, rej) => {\r\n            getUserByEmail(email).subscribe((data) => {\r\n                if (data && data.length) res(data);\r\n                else res(null);\r\n            })\r\n        })\r\n    }\r\n\r\n    const getUserLoginData = (userData) => {\r\n        return new Promise((res, rej) => {\r\n            if (thirdPartyResponse.data && thirdPartyResponse.data.email) {\r\n                // with gmail or fb flow\r\n                getUserByEmail(userData.email).subscribe((isRegisteredUser) => {\r\n                    if (isRegisteredUser.length) {\r\n                        res(isRegisteredUser[0]);\r\n                    } else {\r\n                        setLoginError('Please enter correct credentials.')\r\n                        rej({ ...userData, isRegistered: false });\r\n                    }\r\n                })\r\n            } else {\r\n                // without gmail fb flow\r\n                checkForUserEmail(userData.emailOrPhone).then((isRegisteredUser) => {\r\n                    if (isRegisteredUser && isRegisteredUser.length) {\r\n                        if (isRegisteredUser[0].password === userData.password) res(isRegisteredUser[0]);\r\n                        else {\r\n                            setLoginError('Please enter correct credentials.')\r\n                            rej();\r\n                        }\r\n                    } else {\r\n                        checkForUserPhone(userData.emailOrPhone).then((isRegisteredUser) => {\r\n                            if (isRegisteredUser && isRegisteredUser.length) {\r\n                                if (isRegisteredUser[0].password === userData.password) res(isRegisteredUser[0]);\r\n                                else {\r\n                                    setLoginError('Please enter correct credentials.')\r\n                                    rej();\r\n                                }\r\n                            } else {\r\n                                setLoginError('Please enter correct credentials.')\r\n                                rej();\r\n                            }\r\n                        })\r\n                    }\r\n                })\r\n            }\r\n        })\r\n    }\r\n    const signinUser = (e, status) => {\r\n        dispatch(enableLoading());\r\n        setLoginError(null);\r\n        let userData = {};\r\n        switch (status) {\r\n            case 'cred':\r\n                setThirdPartyResponse({ isLogginSuccess: false, data: null, source: '' })\r\n                e.preventDefault();\r\n                e.stopPropagation();\r\n                userData = {\r\n                    ...loginCred,\r\n                    phone: loginCred.username,\r\n                    email: loginCred.username,\r\n                    emailOrPhone: loginCred.username\r\n                }\r\n                getUserLoginData(userData)\r\n                    .then((data) => {\r\n                        //user is registered\r\n                        setLoginResponseToServer();\r\n                        data.source = 'Website';\r\n                        dispatch(loginUser(data));\r\n                        dispatch(disableLoading());\r\n                        dispatch(displayNotification({\r\n                            msg: \"Login successfully\",\r\n                            type: NOTIFICATION_SUCCCESS,\r\n                            time: 3000\r\n                        }));\r\n                        if (state.currentLoginFlow == 'competition') history.push('/competitions');\r\n                        else if (state.currentLoginFlow == 'subscription') history.push('/subscription');\r\n                        else if (state.currentLoginFlow == 'upload-video') setOpenVdoUploadModal(true);\r\n                        else history.push('/')\r\n                    })\r\n                    .catch((data) => {\r\n                        dispatch(disableLoading());\r\n                        if (data) {\r\n                            //user not registered\r\n                            history.push({\r\n                                pathname: '/register',\r\n                                state: data\r\n                            })\r\n                        }\r\n                    })\r\n                break;\r\n            case 'Google': case 'Facebook':\r\n                userData = {\r\n                    name: thirdPartyResponse.data.name,\r\n                    email: thirdPartyResponse.data.email,\r\n                }\r\n                getUserLoginData(userData)\r\n                    .then((data) => {\r\n                        //user is registered\r\n                        dispatch(disableLoading());\r\n                        setLoginResponseToServer();\r\n                        data.source = thirdPartyResponse.source;\r\n                        dispatch(loginUser(data));\r\n                        dispatch(displayNotification({\r\n                            msg: \"Login successfully\",\r\n                            type: NOTIFICATION_SUCCCESS,\r\n                            time: 3000\r\n                        }));\r\n                        if (state.currentLoginFlow == 'competition') history.push('/competitions');\r\n                        else if (state.currentLoginFlow == 'subscription') history.push('/subscription');\r\n                        else if (state.currentLoginFlow == 'upload-video') setOpenVdoUploadModal(true);\r\n                        else history.push('/')\r\n                    })\r\n                    .catch((data) => {\r\n                        dispatch(disableLoading());\r\n                        if (data) {\r\n                            data.source = thirdPartyResponse.source;\r\n                            //user not registered\r\n                            history.push({\r\n                                pathname: '/register',\r\n                                state: data\r\n                            })\r\n                        }\r\n                    })\r\n                break;\r\n        }\r\n    }\r\n\r\n    function goToPrevious(event) {\r\n        history.goBack();\r\n    }\r\n\r\n    return (\r\n        <div className=\"login-wrap new-login-signup-ui clearfix gradient-bg-animation\">\r\n            <div className={`inner-form-wrap ${componentShowClass}`}>\r\n                <form className=\"form-wrap clearfix\" onSubmit={(e) => signinUser(e, 'cred')}>\r\n                    <div className=\"heading-outer\">\r\n                        <a onClick={(e) => goToPrevious(e)} className=\"arrow-back-home\" title=\"Back\">\r\n                            <ArrowBackIcon />\r\n                        </a>\r\n                        <a href=\"/\" className=\"logo\" title=\"Back to Home\">\r\n                            <img src={boogaluLogo} alt=\"Boogalu\" />\r\n                        </a>\r\n                        <div className=\"heading1\">Welcome Back!</div>\r\n                        <div className=\"heading2\">Login to your existing Boogalu account.</div>\r\n                    </div>\r\n                    <div className=\"form-outer clearfix\">\r\n                        <div className=\"input-wrap\">\r\n                            <TextField className=\"input-field\"\r\n                                required\r\n                                id=\"outlined-required-username\"\r\n                                label=\"Username / Email / Phone\"\r\n                                onChange={handleChange('username')}\r\n                                value={loginCred.username}\r\n                                variant=\"outlined\"\r\n                            />\r\n                        </div>\r\n                        <div className=\"input-wrap\">\r\n                            <FormControl className=\"\" variant=\"outlined\" style={{ width: '100%' }}>\r\n                                <InputLabel htmlFor=\"outlined-adornment-password\">Password</InputLabel>\r\n                                <OutlinedInput\r\n                                    required\r\n                                    id=\"outlined-adornment-password\"\r\n                                    type={loginCred.showPassWord ? 'text' : 'password'}\r\n                                    value={loginCred.password}\r\n                                    onChange={handleChange('password')}\r\n                                    endAdornment={\r\n                                        <InputAdornment position=\"end\">\r\n                                            <IconButton\r\n                                                aria-label=\"toggle password visibility\"\r\n                                                onClick={showPassword}\r\n                                                onMouseDown={handleMouseDownPassword}\r\n                                                edge=\"end\"\r\n                                            >\r\n                                                {loginCred.showPassWord ? <Visibility /> : <VisibilityOff />}\r\n                                            </IconButton>\r\n                                        </InputAdornment>\r\n                                    }\r\n                                    labelWidth={70}\r\n                                />\r\n                            </FormControl>\r\n                        </div>\r\n                        <div className=\"action-wrap\">\r\n                            {LoginError && <div className=\"login-error\">\r\n                                {LoginError}\r\n                            </div>}\r\n                            <div className=\"submit-btn clearfix\">\r\n                                <Button variant=\"contained\" type=\"submit\" color=\"primary\">Sign In\r\n                                <ArrowRightSharpIcon />\r\n                                </Button>\r\n                            </div>\r\n                            <div className=\"forgot-password clearfix\">\r\n                                <div>Forgot Password ?</div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"or-seprator clearfix\">\r\n                            <span></span>\r\n                            <div>OR</div>\r\n                            <span></span>\r\n                        </div>\r\n                        <div className=\"login-with\">\r\n                            <p className=\"loginWithTitle\">Login with</p>\r\n                            <div className=\"login-with-google\">\r\n                                <GoogleLogin\r\n                                    className=\"google-login-btn\"\r\n                                    clientId=\"417866547364-mesv7a9cn6bj4n3ge45s8b6hhl1vdam0.apps.googleusercontent.com\"\r\n                                    buttonText=\"Login with Google\"\r\n                                    onSuccess={successResponseGoogle}\r\n                                    onFailure={failureResponseGoogle} >\r\n                                </GoogleLogin>\r\n                            </div>\r\n                            <div className=\"login-with-fb\">\r\n                                <div className=\"login-with-fb\">\r\n                                    <FacebookLogin\r\n                                        appId=\"813330422546108\"\r\n                                        autoLoad={false}\r\n                                        fields=\"name,email,picture\"\r\n                                        callback={responseFacebook}\r\n                                        cssClass=\"facebook-login-btn\"\r\n                                        icon={<FacebookIcon />}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n                <div className=\"image-wrap\">\r\n                    <img src=\"https://i.imgur.com/KS2W5BM.jpg\" alt=\"signup-image\" />\r\n                    <div className=\"singup-details\">\r\n                        <div className=\"already-login-wrap\">\r\n                            <div className=\"text-wrap\">\r\n                                New to Boogalu?\r\n                                <p className=\"sub-text\">Singup and get a chance to enroll on different competitions and win awesome prizes!</p>\r\n                            </div>\r\n                            <Button className=\"singup-btn\" color=\"primary\" onClick={() => history.push('/register')}>SIGN UP</Button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"img-wrap\">\r\n                <img src={bgImg} />\r\n            </div>\r\n            {openVdoUploadModal && <VideoUploader handleClose={() => setOpenVdoUploadModal(false)} />}\r\n            <ul className=\"circles\">\r\n                <li></li>\r\n                <li></li>\r\n                <li></li>\r\n                <li></li>\r\n                <li></li>\r\n                <li></li>\r\n                <li></li>\r\n                <li></li>\r\n                <li></li>\r\n                <li></li>\r\n            </ul>\r\n        </div>\r\n    );\r\n}","F:\\Toms\\Business-work\\Boogalu\\src\\Components\\Profile\\Profile.js",["261","262","263","264","265","266","267","268","269","270","271","272","273","274","275","276","277","278","279","280","281","282","283","284","285","286","287","288","289","290","291","292","293","294","295","296","297","298","299","300","301"],"import React, { useState, useEffect, useRef } from 'react'\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useStoreConsumer } from '../../Providers/StateProvider';\r\nimport AccountCircleOutlinedIcon from '@material-ui/icons/AccountCircleOutlined';\r\nimport LoyaltyOutlinedIcon from '@material-ui/icons/LoyaltyOutlined';\r\nimport FavoriteBorderOutlinedIcon from '@material-ui/icons/FavoriteBorderOutlined';\r\nimport CollectionsOutlinedIcon from '@material-ui/icons/CollectionsOutlined';\r\nimport PropTypes from 'prop-types';\r\nimport { useTheme } from '@material-ui/core/styles';\r\nimport SwipeableViews from 'react-swipeable-views';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\nimport firstPrizeBadge from '../../Images/1st-prize-badge.png';\r\nimport secondPrizeBadge from '../../Images/2nd-prize-badge.png';\r\nimport thirdPrizeBadge from '../../Images/3rd-prize-badge.png';\r\nimport * as $ from 'jquery';\r\nimport { getUploadedVideosByUserId } from \"../../Services/UploadedVideo.service\";\r\nimport { getCompetitionByUserId } from \"../../Services/EnrollCompetition.service\";\r\nimport CompetitionsDetails from \"../CompetitionsDetails\";\r\nimport { getCompetitionsList } from \"../../Services/Competition.service\";\r\nimport { setActiveCompetition } from \"../../Actions/Competition\";\r\nimport Vedio from \"../Vedio/Video\";\r\nimport { enableLoading, disableLoading } from \"../../Actions/Loader\";\r\nimport { removeDataRefetchModuleName } from \"../../Actions/Utility\";\r\nimport FavoriteBorder from '@material-ui/icons/FavoriteBorder';\r\nimport Favorite from '@material-ui/icons/Favorite';\r\nimport CommentOutlined from '@material-ui/icons/CommentOutlined';\r\nimport { updateVideoLikes, updateVideoComments } from \"../../Services/UploadedVideo.service\";\r\nimport VideoDetails from '../VideoDetails'\r\nimport { getAllUser } from \"../../Services/User.service\";\r\nimport { getUploadedVideosList } from \"../../Services/UploadedVideo.service\";\r\nimport { FaBars } from 'react-icons/fa';\r\nimport { disableLoginFlow, enableLoginFlow } from \"../../Actions/LoginFlow\";\r\nimport { setActiveVideoForCompetition } from \"../../Actions/Competition\";\r\nfunction TabPanel(props) {\r\n    const { children, value, index, ...other } = props;\r\n\r\n    return (\r\n        <div\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`full-width-tabpanel-${index}`}\r\n            aria-labelledby={`full-width-tab-${index}`}\r\n            {...other}\r\n        >\r\n            {value === index && (\r\n                <Box p={3}>\r\n                    <Typography>{children}</Typography>\r\n                </Box>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n    children: PropTypes.node,\r\n    index: PropTypes.any.isRequired,\r\n    value: PropTypes.any.isRequired,\r\n};\r\n\r\nfunction a11yProps(index) {\r\n    return {\r\n        id: `full-width-tab-${index}`,\r\n        'aria-controls': `full-width-tabpanel-${index}`,\r\n    };\r\n}\r\nfunction Profile() {\r\n    const history = useHistory();\r\n    const theme = useTheme();\r\n    const { state, dispatch } = useStoreConsumer();\r\n    const [value, setValue] = useState(0);\r\n    const loggedInUser = state.loggedInUser;\r\n    const [UserUploadedVideoList, setUserUploadedVideoList] = useState([]);\r\n    const [UserCompetitionsList, setUserCompetitionsList] = useState([]);\r\n    const [UserLikedVideoList, setUserLikedVideoList] = useState([]);\r\n    const [openUserEnrolledCompDetailsModal, setOpenUserEnrolledCompDetailsModal] = useState(false);\r\n    const [initialStep, setInitialStep] = useState(1);\r\n    const profileOuterRef = useRef();\r\n    const userTabsRef = useRef();\r\n    const [activeVideoObj, setActiveVideoObj] = useState({})\r\n    const [commentModal, setCommentModal] = useState(false)\r\n    const [userList, setUserList] = useState([])\r\n    const [showProfileTab, setShowProfileTab] = useState(false);\r\n    const [openUploadCompModalFor, setOpenUploadCompModalFor] = useState(null)\r\n    const ref = useRef();\r\n    useOnClickOutside(ref, () => { setShowProfileTab(false); setOpenUploadCompModalFor(null) });\r\n\r\n    useEffect(() => {\r\n        if (!loggedInUser || !loggedInUser.email) history.push('/login')\r\n        $('html,body').animate({\r\n            scrollTop: 0\r\n        }, 500);\r\n\r\n        if (state.currentLoginFlow == 'profile-competition') {\r\n            setValue(1);\r\n            dispatch(disableLoginFlow());\r\n            dispatch(setActiveVideoForCompetition());\r\n        };\r\n\r\n        document.addEventListener('scroll', onWindowScroll);\r\n        dispatch(enableLoading());\r\n        getCompetitionByUserId(loggedInUser.key).subscribe((list) => { dispatch(disableLoading()); setUserCompetitionsList(list) });\r\n        // getCompetitionByUserId(loggedInUser.key).subscribe((list) => UserLikedVideoList(list));\r\n    }, []);\r\n\r\n    const getAllUserList = () => {\r\n        return new Promise((res, rej) => {\r\n            getAllUser().subscribe((users) => {\r\n                res(users);\r\n            });\r\n        })\r\n    }\r\n    const getAllUploadedVideos = () => {\r\n        return new Promise((res, rej) => {\r\n            getUploadedVideosList().subscribe((videos) => {\r\n                res(videos);\r\n            });\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        getUploadedVideosByUserId(loggedInUser.key).subscribe((list) => {\r\n            setUserUploadedVideoList(list);\r\n            if (list.length != 0) {\r\n                getAllUserList().then((data) => {\r\n                    setUserList(data);\r\n                    let userList = data;\r\n                    let userVdoCopy = [...list];\r\n                    userVdoCopy.map((vdoObj) => {\r\n                        if (vdoObj.likes && vdoObj.likes.length) {\r\n                            vdoObj.likes.map((likeObj) => {\r\n                                let userData = userList.filter(userObj => userObj.key == likeObj.userId);\r\n                                if (userData.length != 0) {\r\n                                    likeObj.username = userData[0].username;\r\n                                    likeObj.profileImage = userData[0].profileImage;\r\n                                }\r\n                            })\r\n                        }\r\n                        if (vdoObj.comments && vdoObj.comments.length) {\r\n                            vdoObj.comments.map((commentObj) => {\r\n                                let userData = userList.filter(userObj => userObj.key == commentObj.userId);\r\n                                if (userData.length != 0) {\r\n                                    commentObj.username = userData[0].username;\r\n                                    commentObj.profileImage = userData[0].profileImage;\r\n                                }\r\n                            })\r\n                        }\r\n                    })\r\n                    dispatch(disableLoading());\r\n                    console.log('userVdoCopy', userVdoCopy)\r\n                    setUserUploadedVideoList(userVdoCopy)\r\n                })\r\n            } else dispatch(disableLoading());\r\n        });\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (state.refetchDataModule == 'user-uploaded-video') {\r\n            getUploadedVideosByUserId(loggedInUser.key).subscribe((list) => { dispatch(removeDataRefetchModuleName()); setUserUploadedVideoList(list) });\r\n        }\r\n    }, [state])\r\n\r\n    function onWindowScroll(event) {\r\n        if (window.outerWidth > 1023) {\r\n            if (window.scrollY >= 302) {\r\n                toggleStickyHeader('add');\r\n            } else {\r\n                toggleStickyHeader('remove');\r\n            }\r\n        } else {\r\n            if (window.scrollY >= 294) {\r\n                toggleStickyHeader('add');\r\n            } else {\r\n                toggleStickyHeader('remove');\r\n            }\r\n        }\r\n    }\r\n\r\n    function toggleStickyHeader(toggleValue) {\r\n        if (toggleValue === 'add') {\r\n            if (userTabsRef.current) {\r\n                userTabsRef.current.classList.add('sticky');\r\n            }\r\n            if (profileOuterRef.current) {\r\n                profileOuterRef.current.classList.add('sticky');\r\n            }\r\n        } else {\r\n            if (userTabsRef.current) {\r\n                userTabsRef.current.classList.remove('sticky');\r\n            }\r\n            if (profileOuterRef.current) {\r\n                profileOuterRef.current.classList.remove('sticky');\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleChange = (event, newValue) => {\r\n        setValue(newValue);\r\n        if (newValue == 1 && UserLikedVideoList.length == 0) {\r\n            dispatch(enableLoading());\r\n            getAllUploadedVideos().then((feeds) => {\r\n                if (feeds) {\r\n                    let userLikedVdos = []\r\n                    feeds.map((feed) => {\r\n                        if (feed.likes && feed.likes.length) {\r\n                            let isAvail = feed.likes.filter(data => data.userId == loggedInUser.key)\r\n                            if (isAvail.length != 0) userLikedVdos.push(feed)\r\n                        }\r\n                    })\r\n                    dispatch(disableLoading());\r\n                    setUserLikedVideoList(userLikedVdos);\r\n                } else dispatch(disableLoading());\r\n            })\r\n        }\r\n    };\r\n\r\n    const handleChangeIndex = (index) => {\r\n        setValue(index);\r\n    };\r\n\r\n    const openCompetitionDetailsModal = (competition) => {\r\n        getCompetitionsList().subscribe(allCompList => {\r\n            let isUserEnrolled = allCompList.filter((data) => data.key == competition.compId);\r\n            if (isUserEnrolled.length) {\r\n                isUserEnrolled[0].isUserEnrolled = true;\r\n                isUserEnrolled[0].userSubmitedDetails = competition;\r\n                setInitialStep(2);\r\n                dispatch(setActiveCompetition(isUserEnrolled[0]));\r\n                setOpenUserEnrolledCompDetailsModal(true);\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    const addUserDetailsToFeed = (feed, allUser) => {\r\n        if (feed.likes && feed.likes.length) {\r\n            feed.likes.map((likeObj) => {\r\n                let userData = allUser.filter(userObj => userObj.key == likeObj.userId);\r\n                if (userData.length != 0) {\r\n                    likeObj.username = userData[0].username;\r\n                    likeObj.profileImage = userData[0].profileImage;\r\n                }\r\n            })\r\n        }\r\n        if (feed.comments && feed.comments.length) {\r\n            feed.comments.map((commentObj) => {\r\n                let userData = allUser.filter(userObj => userObj.key == commentObj.userId);\r\n                if (userData.length != 0) {\r\n                    commentObj.username = userData[0].username;\r\n                    commentObj.profileImage = userData[0].profileImage;\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    const handleLikes = (video, status) => {\r\n        let videoObj = { ...video }\r\n        if (status == 'liked') {\r\n            if (videoObj.likes) {\r\n                videoObj.likes.push({ value: 1, userId: loggedInUser.key })\r\n            } else {\r\n                videoObj.likes = [{ value: 1, userId: loggedInUser.key }]\r\n            }\r\n        } else {\r\n            let likes = videoObj.likes.filter(data => data.userId != loggedInUser.key)\r\n            videoObj.likes = likes\r\n        }\r\n        videoObj.likes.map((likeObj) => { delete likeObj.profileImage; delete likeObj.username; })\r\n        updateVideoLikes(videoObj.key, videoObj).subscribe(() => {\r\n            let feedListCopy = [...UserUploadedVideoList]\r\n            feedListCopy.map((feed) => {\r\n                if (feed.key == videoObj.key) {\r\n                    feed.likes = videoObj.likes\r\n                }\r\n\r\n                if (feed.likes && feed.likes.length) {\r\n                    let isAvail = feed.likes.filter(data => data.userId == loggedInUser.key)\r\n                    isAvail.length > 0 ? feed.isLiked = true : feed.isLiked = false\r\n                } else {\r\n                    feed.isLiked = false\r\n                }\r\n                addUserDetailsToFeed(feed, userList);\r\n            })\r\n            setUserUploadedVideoList(feedListCopy)\r\n        })\r\n    }\r\n\r\n    const handleComments = (commentString) => {\r\n        let videoObj = { ...activeVideoObj }\r\n        if (videoObj.comments) {\r\n            videoObj.comments.push({ value: commentString, userId: loggedInUser.key })\r\n        } else {\r\n            videoObj.comments = [{ value: commentString, userId: loggedInUser.key }]\r\n        }\r\n\r\n        videoObj.comments.map((commentObj) => { delete commentObj.profileImage; delete commentObj.username; })\r\n        updateVideoComments(videoObj.key, videoObj).subscribe(() => {\r\n            let feedListCopy = [...UserUploadedVideoList]\r\n            feedListCopy.map((feed) => {\r\n                if (feed.key == videoObj.key) {\r\n                    feed.comments = videoObj.comments\r\n                }\r\n                addUserDetailsToFeed(feed, userList);\r\n            })\r\n            setUserUploadedVideoList(feedListCopy)\r\n        })\r\n    }\r\n\r\n    const handleCommentClick = (video) => {\r\n        setCommentModal(true);\r\n        setActiveVideoObj(video)\r\n    }\r\n\r\n    const redirectToCompetition = () => {\r\n        dispatch(setActiveVideoForCompetition(openUploadCompModalFor));\r\n        dispatch(enableLoginFlow('profile-competition'));\r\n        history.push('/competitions');\r\n        setShowProfileTab(false);\r\n    }\r\n\r\n    // Hook\r\n    function useOnClickOutside(ref, handler) {\r\n        useEffect(\r\n            () => {\r\n                const listener = event => {\r\n                    if (!ref.current || ref.current.contains(event.target)) {\r\n                        return;\r\n                    }\r\n\r\n                    handler(event);\r\n                };\r\n                document.addEventListener('mousedown', listener);\r\n                document.addEventListener('touchstart', listener);\r\n                return () => {\r\n                    document.removeEventListener('mousedown', listener);\r\n                    document.removeEventListener('touchstart', listener);\r\n                };\r\n            },\r\n            [ref, handler]\r\n        );\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"profile-outer\" ref={profileOuterRef}>\r\n            <div className=\"profile-details-wrap clearfix\">\r\n                <div className=\"profile-img\">\r\n                    {\r\n                        loggedInUser.profileImage ?\r\n                            <img src={loggedInUser.profileImage} />\r\n                            :\r\n                            <AccountCircleOutlinedIcon />\r\n                    }\r\n                </div>\r\n                <div className=\"profile-details clearfix\">\r\n                    <div className=\"username-wrap clearfix\">\r\n                        <div className=\"username\">\r\n                            {loggedInUser.username}\r\n                        </div>\r\n                        <div className=\"edit-profile\" onClick={() => history.push('/profile/edit')}>\r\n                            Edit Profile\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"followers-wrap clearfix\">\r\n                        <div className=\"posts\">\r\n                            <span>{UserUploadedVideoList.length}</span> Posts\r\n                        </div>\r\n                        {/* <div className=\"followers\">\r\n                            <span>999</span> Followers\r\n                        </div>\r\n                        <div className=\"following\">\r\n                            <span>999</span> Followings\r\n                        </div> */}\r\n                    </div>\r\n                    <div className=\"bio-wrap\">\r\n                        <div className=\"fullname\">\r\n                            {loggedInUser.name}\r\n                        </div>\r\n                        {loggedInUser.bio ? <div className=\"bio\">\r\n                            {loggedInUser.bio}\r\n                        </div> : <div className=\"bio\">\r\n                                Older dancers (especially from the SoCal dance community) – even if you can appreciate and welcome the ways dance has evolved, you’ll still feel pangs of nostalgia when going through this list.\r\n                        </div>}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"profile-content-wrap\">\r\n                <div className=\"headers-wrap\">\r\n                    <div className=\"user-tabs-wrap\" ref={userTabsRef}>\r\n                        <Tabs\r\n                            value={value}\r\n                            onChange={handleChange}\r\n                            indicatorColor=\"primary\"\r\n                            textColor=\"primary\"\r\n                            variant=\"fullWidth\"\r\n                            aria-label=\"full width tabs example\"\r\n                        >\r\n                            <Tab label=\"Posts\" icon={<CollectionsOutlinedIcon />} {...a11yProps(0)} />\r\n                            <Tab label=\"Competitions\" icon={<LoyaltyOutlinedIcon />} {...a11yProps(1)} />\r\n                            {/* <Tab label=\"Liked\" icon={<FavoriteBorderOutlinedIcon />}{...a11yProps(1)} /> */}\r\n                        </Tabs>\r\n                    </div>\r\n                    <SwipeableViews\r\n                        axis={theme.direction === 'rtl' ? 'x-reverse' : 'x'}\r\n                        index={value}\r\n                        onChangeIndex={handleChangeIndex}>\r\n                        <TabPanel value={value} index={0} dir={theme.direction}>\r\n                            <div className=\"flex-container\" >\r\n                                {UserUploadedVideoList.length !== 0 ?\r\n                                    <div className=\"feed-wrap\">\r\n                                        {UserUploadedVideoList && UserUploadedVideoList.map((vdo) => {\r\n                                            return <div key={vdo.key} className=\"profile-vdo-wrap\">\r\n                                                {/* TODO: This badges code block will be dynamic once we have\r\n                                                    winners data and on the basis of their rank the respective \r\n                                                    badge will apper on that video\r\n                                                */}\r\n                                                {/* {\r\n                                                    index === 0 ? \r\n                                                    <div className=\"winners-badges\">\r\n                                                        <img src={firstPrizeBadge} alt=\"first prize\" />\r\n                                                    </div>: ''\r\n                                                }\r\n\r\n                                                {\r\n                                                    index === 2 ?\r\n                                                    <div className=\"winners-badges\">\r\n                                                        <img src={secondPrizeBadge} alt=\"Second prize\" />\r\n                                                    </div>: ''\r\n                                                }\r\n\r\n{\r\n                                                    index === 3 ?\r\n                                                    <div className=\"winners-badges\">\r\n                                                        <img src={thirdPrizeBadge} alt=\"Third prize\" />\r\n                                                    </div>: ''\r\n                                                } */}\r\n                                                <div className=\"menu\" onClick={() => { setOpenUploadCompModalFor(vdo.key); setShowProfileTab(true) }}>\r\n                                                    <i><FaBars /></i>\r\n                                                </div>\r\n                                                {showProfileTab && openUploadCompModalFor == vdo.key && <div className=\"profile-tab-wrap\" ref={ref}>\r\n                                                    <div className=\"profile\" onClick={() => redirectToCompetition()}>Upload for competition</div>\r\n                                                </div>}\r\n                                                <div className=\"vdo-card\">\r\n                                                    <div>\r\n                                                        <Vedio vdoObj={vdo} />\r\n                                                    </div>\r\n                                                    <div className=\"video-title-like-wrap\">\r\n                                                        <div className=\"title\">{vdo.title}</div>\r\n                                                        <div className=\"like-comment\">\r\n                                                            {vdo.likes && vdo.likes.length > 0 && <div className=\"likes-count\">{vdo.likes.length} Likes</div>}\r\n                                                            {!vdo.isLiked && <FavoriteBorder title=\"Unlike\" onClick={() => handleLikes(vdo, 'liked')} />}\r\n                                                            {vdo.isLiked && <Favorite title=\"Like\" onClick={() => handleLikes(vdo, 'unliked')} />}\r\n                                                            <CommentOutlined title=\"comment\" onClick={() => handleCommentClick(vdo)} />\r\n                                                        </div>\r\n\r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                        })}\r\n                                    </div>\r\n                                    :\r\n                                    <div>No video posted yet !</div>}\r\n                            </div>\r\n                        </TabPanel>\r\n                        {/* <TabPanel value={value} index={1} dir={theme.direction}>\r\n                            <div className=\"flex-container\" >\r\n                                {UserLikedVideoList.length !== 0 ? UserLikedVideoList.map((vdoObj) => {\r\n                                    return <div className=\"flex-basis-3 like-tab\" key={vdoObj.key}>\r\n                                        <div>\r\n                                            <Vedio vdoObj={vdoObj} />\r\n                                        </div>\r\n                                        <div className=\"video-title-like-wrap\">\r\n                                            <div className=\"title\">{vdoObj.title}</div>\r\n                                            <div className=\"like-comment\">\r\n                                                {vdoObj.likes && vdoObj.likes.length > 0 && <div className=\"likes-count\">{vdoObj.likes.length} Likes</div>}\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                }) :\r\n                                    <div>No video liked yet !</div>}\r\n                            </div>\r\n                        </TabPanel> */}\r\n                        <TabPanel value={value} index={1} dir={theme.direction}>\r\n                            <div className=\"flex-container\" >\r\n                                {UserCompetitionsList.length !== 0 ? UserCompetitionsList.map((competition) => {\r\n                                    return <div className=\"flex-basis-3 competition-tab\" key={competition.key} onClick={() => openCompetitionDetailsModal(competition)}>\r\n                                        <div>{competition.compName}</div>\r\n                                        <img src={competition.compImg} />\r\n                                    </div>\r\n                                }) :\r\n                                    <div>No competition enrolled yet !</div>}\r\n                            </div>\r\n                        </TabPanel>\r\n                    </SwipeableViews>\r\n                </div>\r\n            </div>\r\n            {commentModal && <VideoDetails handleClose={() => setCommentModal(false)} handleLikes={handleLikes} handleComments={handleComments} videoObj={activeVideoObj} />}\r\n            {openUserEnrolledCompDetailsModal && <CompetitionsDetails open={openUserEnrolledCompDetailsModal} handleClose={() => setOpenUserEnrolledCompDetailsModal(false)} initialStep={initialStep} />}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile\r\n","F:\\Toms\\Business-work\\Boogalu\\src\\Components\\Navigation\\index.js",["302","303","304","305","306","307","308","309","310","311","312","313","314","315","316"],"F:\\Toms\\Business-work\\Boogalu\\src\\Components\\Admin\\Subscription.js",["317","318"],"import React, { useState } from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport ImageUploader from 'react-images-upload';\r\nimport Button from '@material-ui/core/Button';\r\nimport { uploadImage } from \"../../Services/Upload.service\";\r\nimport { saveSubscription } from \"../../Services/Subscription.service\";\r\n\r\nexport default function Subscription() {\r\n    const initialSubscriptionData = {\r\n        name: \"\",\r\n        desc: \"\",\r\n        active: true,\r\n        type: \"\",\r\n        amount: \"\",\r\n        img: \"\",\r\n        startAt: \"\",\r\n        endAt: \"\",\r\n        plans: \"\",\r\n    }\r\n    const [Subscription, setSubscription] = useState(initialSubscriptionData);\r\n    const [isAdminLoggedIn, toggleAdminLogin] = useState(false);\r\n    const [adminEmail, setAdminEmail] = useState('');\r\n    const [adminPwd, setAdminPwd] = useState('');\r\n    const [loggedInMessages, setLoginMessage] = useState('');\r\n\r\n    function handleAdminLogin(value, type) {\r\n        if (type === 'email') {\r\n            setAdminEmail(value?.target?.value);\r\n        } else {\r\n            setAdminPwd(value?.target?.value);\r\n        }\r\n    }\r\n\r\n    function triggerLogin(event) {\r\n        if (adminEmail && adminEmail === 'b2b@boxpuppet.com' && adminPwd && adminPwd === 'Box-puppet@1001') {\r\n            toggleAdminLogin(true);\r\n        } else {\r\n            toggleAdminLogin(false);\r\n            setLoginMessage('Invalid credentials, please enter valid email-Id and Password!');\r\n        }\r\n    }\r\n\r\n    const handleChange = (prop, index) => (event) => {\r\n        let value = event.target.value;\r\n        if (prop === 'active') value = event.target.checked;\r\n        if (prop === 'prices') {\r\n            Subscription.prices[index] = event.target.value;\r\n            value = Subscription.prices;\r\n        }\r\n        setSubscription({ ...Subscription, [prop]: value });\r\n    };\r\n\r\n    const onimageUpload = (picture) => {\r\n        setSubscription({ ...Subscription, img: picture });\r\n    }\r\n\r\n    async function saveDetails(e) {\r\n        console.log(Subscription)\r\n        // upload Subscription image to bucket\r\n        if (Subscription.img[0]) {\r\n            const reader = new FileReader();\r\n            reader.readAsDataURL(Subscription.img[0]);\r\n            reader.onload = () => {\r\n                uploadImage(reader.result, 'subscription', 'small').subscribe((downloadableUrl) => {\r\n                    Subscription.img = downloadableUrl;\r\n                    // save Subscription data to db with imag url\r\n                    saveSubscription(Subscription).subscribe((response) => {\r\n                        console.log('Subscription success', response);\r\n                        setSubscription(initialSubscriptionData);\r\n                    })\r\n                })\r\n            }\r\n        } else {\r\n            saveSubscription(Subscription).subscribe((response) => {\r\n                console.log('Subscription success', response);\r\n                setSubscription(initialSubscriptionData);\r\n            })\r\n        }\r\n    }\r\n    return (\r\n        <div className=\"subscription-bo-wrap clearfix\">\r\n            {\r\n                isAdminLoggedIn ?\r\n                    <h1>Create a new Subscription</h1>\r\n                :\r\n                    <h1>Login to create new Subscription</h1>\r\n            }\r\n            {\r\n                isAdminLoggedIn ?\r\n                <div className=\"inner-form-wrap\">\r\n                    <div className=\"input-wrap\">\r\n                        <TextField className=\"input-field\"\r\n                            required\r\n                            id=\"outlined-required-name\"\r\n                            label=\"Name\"\r\n                            onChange={handleChange('name')}\r\n                            value={Subscription.name}\r\n                            variant=\"outlined\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"input-wrap\">\r\n                        <TextField className=\"input-field\"\r\n                            id=\"outlined-required-desc\"\r\n                            label=\"Description\"\r\n                            onChange={handleChange('desc')}\r\n                            value={Subscription.desc}\r\n                            variant=\"outlined\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"input-wrap\">\r\n                        <TextField className=\"input-field\"\r\n                            id=\"outlined-required-amount\"\r\n                            label=\"Amount\"\r\n                            type=\"number\"\r\n                            onChange={handleChange('amount')}\r\n                            value={Subscription.amount}\r\n                            variant=\"outlined\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"input-wrap\">\r\n                        <FormControl variant=\"outlined\" className=\"input-field\">\r\n                            <InputLabel id=\"select-outlined-label\">Plans</InputLabel>\r\n                            <Select\r\n                                labelId=\"select-outlined-label\"\r\n                                id=\"select-outlined\"\r\n                                value={Subscription.plans}\r\n                                onChange={handleChange('plans')}\r\n                            >\r\n                                <MenuItem value=\"monthly\">Monthly</MenuItem>\r\n                                <MenuItem value=\"annual\">Annual</MenuItem>\r\n                            </Select>\r\n                        </FormControl>\r\n                    </div>\r\n                    <div className=\"input-wrap data-time-wrap\">\r\n                        <TextField\r\n                            id=\"datetime-local-start\"\r\n                            label=\"Start Date & Time\"\r\n                            type=\"datetime-local\"\r\n                            value={Subscription.startAt}\r\n                            onChange={handleChange('startAt')}\r\n                            InputLabelProps={{\r\n                                shrink: true,\r\n                            }}\r\n                        />\r\n                        <TextField\r\n                            id=\"datetime-local-end\"\r\n                            label=\"End Date & Time\"\r\n                            type=\"datetime-local\"\r\n                            value={Subscription.endAt}\r\n                            onChange={handleChange('endAt')}\r\n                            InputLabelProps={{\r\n                                shrink: true,\r\n                            }}\r\n                        />\r\n                    </div>\r\n                    {/* <div className=\"input-wrap\">\r\n                        <ImageUploader\r\n                            withIcon={true}\r\n                            buttonText='Upload image'\r\n                            onChange={onimageUpload}\r\n                            imgExtension={['.jpg', '.gif', '.png', '.gif', '.svg']}\r\n                            maxFileSize={5242880}\r\n                            accept=\"image/*\"\r\n                            withPreview={true}\r\n                            singleImage={true}\r\n                            label=\"Select subscription image\"\r\n                        />\r\n                    </div> */}\r\n                    <div className=\"input-wrap action-wrap\">\r\n                        <Button variant=\"contained\" color=\"primary\">Cancel</Button>\r\n                        <Button variant=\"contained\" color=\"secondary\" onClick={(e) => saveDetails(e)}>Save</Button>\r\n                        <FormControlLabel\r\n                            control={\r\n                                <Checkbox\r\n                                    required\r\n                                    color=\"primary\"\r\n                                    className=\"selected-item-checkbox\"\r\n                                    checked={Subscription.active}\r\n                                    onChange={handleChange('active')}\r\n                                    inputProps={{ 'aria-label': 'secondary checkbox' }}\r\n                                />\r\n                            }\r\n                            label=\"Active Subscription\"\r\n                        />\r\n                    </div>\r\n                </div> : \r\n\r\n                <div className=\"login-admin-form\">\r\n                    <p className=\"errorMessage\">{loggedInMessages}</p>\r\n                    <div className=\"input-wrap\">\r\n                        <TextField className=\"input-field\"\r\n                            required\r\n                            id=\"admin-id\"\r\n                            label=\"Email Id\"\r\n                            onChange={value => handleAdminLogin(value, 'email')}\r\n                            variant=\"outlined\"\r\n                        />\r\n                    </div>    \r\n                    <div className=\"input-wrap\">\r\n                        <TextField className=\"input-field\"\r\n                            required\r\n                            id=\"admin-pwd\"\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            onChange={value => handleAdminLogin(value, 'pwd')}\r\n                            variant=\"outlined\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"input-wrap action-wrap\">\r\n                        <Button variant=\"contained\" color=\"secondary\" onClick={(e) => triggerLogin(e)}>Login</Button>\r\n                    </div>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n","F:\\Toms\\Business-work\\Boogalu\\src\\Components\\Footer\\index.js",["319","320","321","322","323","324","325"],"import React, { useState, useEffect } from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport boogaluLogo from '../../Images/Boogalu-logo.svg';\r\nimport { FaInstagramSquare, FaYoutube, FaFacebookSquare } from 'react-icons/fa';\r\nimport * as $ from 'jquery';\r\n\r\nfunction Footer() {\r\n    const history = useHistory();\r\n    \r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            const pathName = history?.location?.pathname.split('/')[1];\r\n            const footerLinks = document.querySelectorAll('.js-page-links li');\r\n\r\n            if (footerLinks && footerLinks.length) {\r\n                footerLinks.forEach((ele) => {\r\n                    const getData = ele.getAttribute('data-name').toLocaleLowerCase();\r\n                    if (pathName?.length && getData.includes(pathName)) {\r\n                        ele.classList.add('active');\r\n                    }\r\n                });\r\n            }\r\n\r\n        }, 1000);\r\n\r\n    }, []);\r\n\r\n    function navigatePageLinks(event, path) {\r\n        const footerLinks = document.querySelectorAll('.js-page-links li');\r\n        if (footerLinks && footerLinks.length) {\r\n            footerLinks.forEach((ele) => {\r\n                const getData = ele.getAttribute('data-name').toLocaleLowerCase();\r\n                if (path?.length && getData.includes(path)) {\r\n                    ele.classList.add('active');\r\n                } else {\r\n                    if (ele.classList.contains('active')) {\r\n                        ele.classList.remove('active');    \r\n                    }\r\n                }\r\n            });\r\n        }\r\n        history.push(`/${path}`);\r\n        if (path) {\r\n            setTimeout(() => {\r\n                $('html,body').animate({\r\n                    scrollTop: 0\r\n                }, 700);\r\n            }, 100);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <footer className=\"flex-container-VC\">\r\n                <div className=\"flex-1 copyright-wrap\">\r\n                    <div className=\"footer-logo-wrap\">\r\n                        <img src={boogaluLogo} alt=\"Logo\" className=\"image-7\" />\r\n                    </div>\r\n                    <div className=\"copyright-inner\">\r\n                        &#169; 2021 &nbsp;  \r\n                        <a href=\"https://www.choreoculture.com/\" target=\"_blank\">\r\n                            CHOREOCULTURE STUDIO.\r\n                        </a>\r\n                        <div>ALL RIGHTS RESERVED.</div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"flex-1\">\r\n                    <div className=\"footer-tagline\" >Get the latest dance content &amp; ChoreoCulture news</div>\r\n                    <div className=\"email-input-inner\">\r\n                        <input type=\"email\" placeholder=\"Email\" />\r\n                    </div>\r\n                    <button className=\"subscribe\" >Subscribe</button>\r\n                </div>\r\n                <div className=\"footer-menus flex-1\">\r\n                    <ul className=\"menu-lists js-page-links flex-1\">\r\n                        <li data-name=\"career\">Careers</li>\r\n                        <li data-name=\"contactus\">\r\n                            <a onClick={(e) => navigatePageLinks(e, 'contactus')}>Contact us</a>\r\n                        </li>\r\n                        <li data-name=\"terms\">Terms</li>\r\n                    </ul>\r\n                    <ul className=\"menu-lists menu-lists-2 flex-1\">\r\n                        <li>\r\n                            <a href=\"https://www.instagram.com/choreo_culture/?hl=en\" title=\"Follow us on Insta\" target=\"_blank\">\r\n                                <i><FaInstagramSquare /></i>\r\n                                <span>Instagram</span>\r\n                            </a>\r\n                        </li>\r\n                        <li>\r\n                            <a href=\"https://www.youtube.com/user/anjanevents\" title=\"Subscribe our channel\" target=\"_blank\">\r\n                                <i><FaYoutube /></i>\r\n                                <span>Youtube</span>\r\n                            </a>\r\n                        </li>\r\n                        <li>\r\n                            <a href=\"https://www.facebook.com/choreocultureindia/\" title=\"Like our FB page\" target=\"_blank\">\r\n                                <i><FaFacebookSquare /></i>\r\n                                <span>Facebook</span>\r\n                            </a>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </footer>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Footer\r\n","F:\\Toms\\Business-work\\Boogalu\\src\\Components\\Admin\\Competition.js",["326"],"import React, { useState } from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport ImageUploader from 'react-images-upload';\r\nimport Button from '@material-ui/core/Button';\r\nimport { saveCompetition } from \"../../Services/Competition.service\";\r\nimport { uploadImage } from \"../../Services/Upload.service\";\r\nimport { toBase64 } from \"../../Services/Utils\";\r\n\r\nexport default function Competition() {\r\n    const initialCompetitionData = {\r\n        name: \"\",\r\n        type: \"\",\r\n        desc: \"\",\r\n        active: true,\r\n        fee: \"\",\r\n        img: \"\",\r\n        startAt: \"\",\r\n        endAt: \"\",\r\n        prices: [],\r\n    }\r\n\r\n    const [isAdminLoggedIn, toggleAdminLogin] = useState(false);\r\n    const [CompetitionData, setCompetitionData] = useState(initialCompetitionData);\r\n    const [adminEmail, setAdminEmail] = useState('');\r\n    const [adminPwd, setAdminPwd] = useState('');\r\n    const [loggedInMessages, setLoginMessage] = useState('');\r\n\r\n    function handleAdminLogin(value, type) {\r\n        if (type === 'email') {\r\n            setAdminEmail(value?.target?.value);\r\n        } else {\r\n            setAdminPwd(value?.target?.value);\r\n        }\r\n    }\r\n\r\n    function triggerLogin(event) {\r\n        if (adminEmail && adminEmail === 'b2b@boxpuppet.com' && adminPwd && adminPwd === 'Box-puppet@1001') {\r\n            toggleAdminLogin(true);\r\n        } else {\r\n            toggleAdminLogin(false);\r\n            setLoginMessage('Invalid credentials, please enter valid email-Id and Password!');\r\n        }\r\n    }\r\n\r\n    const handleChange = (prop, index) => (event) => {\r\n        let value = event.target.value;\r\n        if (prop === 'active') value = event.target.checked;\r\n        if (prop === 'prices') {\r\n            CompetitionData.prices[index] = event.target.value;\r\n            value = CompetitionData.prices;\r\n        }\r\n        setCompetitionData({ ...CompetitionData, [prop]: value });\r\n    };\r\n\r\n    const onimageUpload = (picture) => {\r\n        setCompetitionData({ ...CompetitionData, img: picture });\r\n    }\r\n\r\n    async function saveDetails(e) {\r\n        console.log(CompetitionData)\r\n        // upload competition image to bucket\r\n        if (CompetitionData.img[0]) {\r\n            const reader = new FileReader();\r\n            reader.readAsDataURL(CompetitionData.img[0]);\r\n            reader.onload = () => {\r\n                uploadImage(reader.result, 'competition', 'small').subscribe((downloadableUrl) => {\r\n                    CompetitionData.img = downloadableUrl;\r\n                    // save competition data to db with imag url\r\n                    saveCompetition(CompetitionData).subscribe((response) => {\r\n                        console.log('competition success', response);\r\n                        setCompetitionData(initialCompetitionData);\r\n                    })\r\n                })\r\n            }\r\n        }\r\n    }\r\n    return (\r\n        <div className=\"competition-bo-wrap clearfix\">\r\n            {\r\n                isAdminLoggedIn ?\r\n                    <h1>Launch a new competition</h1>\r\n                : \r\n                    <h1>Login to create new Competition</h1>\r\n            }\r\n            {\r\n                isAdminLoggedIn ? \r\n                <div className=\"inner-form-wrap\">\r\n                    <div className=\"input-wrap\">\r\n                        <TextField className=\"input-field\"\r\n                            required\r\n                            id=\"outlined-required-name\"\r\n                            label=\"Name\"\r\n                            onChange={handleChange('name')}\r\n                            value={CompetitionData.name}\r\n                            variant=\"outlined\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"input-wrap\">\r\n                        <TextField className=\"input-field\"\r\n                            id=\"outlined-required-desc\"\r\n                            label=\"Description\"\r\n                            onChange={handleChange('desc')}\r\n                            value={CompetitionData.desc}\r\n                            variant=\"outlined\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"input-wrap\">\r\n                        <TextField className=\"input-field\"\r\n                            id=\"outlined-required-fee\"\r\n                            label=\"Fee\"\r\n                            type=\"number\"\r\n                            onChange={handleChange('fee')}\r\n                            value={CompetitionData.fee}\r\n                            variant=\"outlined\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"input-wrap\">\r\n                        <FormControl variant=\"outlined\" className=\"input-field\">\r\n                            <InputLabel id=\"select-outlined-label\">Type</InputLabel>\r\n                            <Select\r\n                                labelId=\"select-outlined-label\"\r\n                                id=\"select-outlined\"\r\n                                value={CompetitionData.type}\r\n                                onChange={handleChange('type')}\r\n                                label=\"Type\"\r\n                            >\r\n                                <MenuItem value=\"running\">Currently Running</MenuItem>\r\n                                <MenuItem value=\"upcomming\">Up-Comming</MenuItem>\r\n                            </Select>\r\n                        </FormControl>\r\n                    </div>\r\n                    <div className=\"input-wrap data-time-wrap\">\r\n                        <TextField\r\n                            id=\"datetime-local-start\"\r\n                            label=\"Start Date & Time\"\r\n                            type=\"datetime-local\"\r\n                            value={CompetitionData.startAt}\r\n                            onChange={handleChange('startAt')}\r\n                            InputLabelProps={{\r\n                                shrink: true,\r\n                            }}\r\n                        />\r\n                        <TextField\r\n                            id=\"datetime-local-end\"\r\n                            label=\"End Date & Time\"\r\n                            type=\"datetime-local\"\r\n                            value={CompetitionData.endAt}\r\n                            onChange={handleChange('endAt')}\r\n                            InputLabelProps={{\r\n                                shrink: true,\r\n                            }}\r\n                        />\r\n                    </div>\r\n                    <div className=\"input-wrap\">\r\n                        <TextField className=\"input-field\"\r\n                            required\r\n                            id=\"outlined-required-name\"\r\n                            label=\"First Price\"\r\n                            onChange={handleChange('prices', 0)}\r\n                            value={CompetitionData.prices[0]}\r\n                            variant=\"outlined\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"input-wrap\">\r\n                        <TextField className=\"input-field\"\r\n                            required\r\n                            id=\"outlined-required-name\"\r\n                            label=\"Second Price\"\r\n                            onChange={handleChange('prices', 1)}\r\n                            value={CompetitionData.prices[1]}\r\n                            variant=\"outlined\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"input-wrap\">\r\n                        <TextField className=\"input-field\"\r\n                            required\r\n                            id=\"outlined-required-name\"\r\n                            label=\"Third Price\"\r\n                            onChange={handleChange('prices', 2)}\r\n                            value={CompetitionData.prices[2]}\r\n                            variant=\"outlined\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"input-wrap\">\r\n                        <ImageUploader\r\n                            withIcon={true}\r\n                            buttonText='Upload image'\r\n                            onChange={onimageUpload}\r\n                            imgExtension={['.jpg', '.gif', '.png', '.gif', '.svg']}\r\n                            maxFileSize={5242880}\r\n                            accept=\"image/*\"\r\n                            withPreview={true}\r\n                            singleImage={true}\r\n                            label=\"Select competition image\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"input-wrap action-wrap\">\r\n                        <Button variant=\"contained\" color=\"primary\">Cancel</Button>\r\n                        <Button variant=\"contained\" color=\"secondary\" onClick={(e) => saveDetails(e)}>Save</Button>\r\n                        <FormControlLabel\r\n                            control={\r\n                                <Checkbox\r\n                                    required\r\n                                    color=\"primary\"\r\n                                    className=\"selected-item-checkbox\"\r\n                                    checked={CompetitionData.active}\r\n                                    onChange={handleChange('active')}\r\n                                    inputProps={{ 'aria-label': 'secondary checkbox' }}\r\n                                />\r\n                            }\r\n                            label=\"Active Competition\"\r\n                        />\r\n                    </div>\r\n                </div> \r\n                :\r\n                <div className=\"login-admin-form\">\r\n                    <p className=\"errorMessage\">{loggedInMessages}</p>\r\n                    <div className=\"input-wrap\">\r\n                        <TextField className=\"input-field\"\r\n                            required\r\n                            id=\"admin-id\"\r\n                            label=\"Email Id\"\r\n                            onChange={value => handleAdminLogin(value, 'email')}\r\n                            variant=\"outlined\"\r\n                        />\r\n                    </div>    \r\n                    <div className=\"input-wrap\">\r\n                        <TextField className=\"input-field\"\r\n                            required\r\n                            id=\"admin-pwd\"\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            onChange={value => handleAdminLogin(value, 'pwd')}\r\n                            variant=\"outlined\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"input-wrap action-wrap\">\r\n                        <Button variant=\"contained\" color=\"secondary\" onClick={(e) => triggerLogin(e)}>Login</Button>\r\n                    </div>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n","F:\\Toms\\Business-work\\Boogalu\\src\\Components\\EditProfile\\EditProfile.js",["327","328","329","330","331","332","333","334"],"import React, { useState, useEffect, useRef } from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useStoreConsumer } from '../../Providers/StateProvider';\r\nimport { signupUser } from '../../Actions/User';\r\nimport bgImg from '../../Images/bg1.svg';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Visibility from '@material-ui/icons/Visibility';\r\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\nimport ArrowRightSharpIcon from '@material-ui/icons/ArrowRightSharp';\r\nimport { updateUser } from \"../../Services/User.service\";\r\nimport { uploadImage } from \"../../Services/Upload.service\";\r\nimport { FaPlus, FaEdit } from 'react-icons/fa';\r\nimport { NOTIFICATION_SUCCCESS, NOTIFICATION_ERROR, MALE_PROFILE_DEFAULT_IMAGE, FEMALE_PROFILE_DEFAULT_IMAGE } from \"../../Constants\";\r\nimport { enableLoading, disableLoading } from \"../../Actions/Loader\";\r\nimport * as $ from 'jquery';\r\n\r\nexport default function EditProfile() {\r\n    const { state, dispatch } = useStoreConsumer();\r\n    const history = useHistory();\r\n    let loggedInUser = state.loggedInUser;\r\n    // get data from history props if redirected through google or facebook login\r\n    if (history.location.state && (history.location.state.source == 'Facebook' || history.location.state.source == 'Google')) {\r\n        loggedInUser.email = history.location.state.email;\r\n        loggedInUser.name = history.location.state.name;\r\n        // setNeedToRegisterError('You are not registered yet, Please register with Choreoculture.')\r\n    }\r\n    const uploaderRef = useRef(null);\r\n    const [userDetails, setUserDetails] = useState(loggedInUser);\r\n    const [SignUpError, setSignUpError] = useState(null);\r\n    const [showHidePassword, setShowHidePassword] = useState({ showPassword: false, showConfirmPassword: false });\r\n    const [IsProfileImageChanged, setIsProfileImageChanged] = useState(false);\r\n    const [isUserPhotoUploaded, userPhotoUploadToggle] = useState(false);\r\n    const handleChange = (prop) => (event) => {\r\n        setUserDetails({ ...userDetails, [prop]: event.target.value });\r\n        console.log(userDetails)\r\n    };\r\n\r\n    const handleClickShowPassword = (prop) => {\r\n        setShowHidePassword({ ...showHidePassword, [prop]: !showHidePassword[prop] });\r\n    };\r\n\r\n    const handleMouseDownPassword = (event) => {\r\n        event.preventDefault();\r\n    };\r\n\r\n    useEffect(() => {\r\n        $('html,body').animate({\r\n            scrollTop: 0\r\n        }, 500);\r\n        if (userDetails && !userDetails.profileImage) {\r\n            setUserDetails({ ...userDetails, profileImage: MALE_PROFILE_DEFAULT_IMAGE })\r\n        }\r\n    }, [])\r\n\r\n    const setSignupUserCred = (e) => {\r\n        if (userDetails.password != userDetails.confirmPassword) {\r\n            setSignUpError('Password dose not match.');\r\n            return;\r\n        }\r\n        dispatch(enableLoading());\r\n        if (IsProfileImageChanged) {\r\n            uploadImage(userDetails.profileImage, 'user', 'small').subscribe((downloadableUrl) => {\r\n                userDetails.profileImage = downloadableUrl;\r\n                updateUser(userDetails.key, userDetails).subscribe(() => {\r\n                    dispatch(disableLoading());\r\n                    dispatch(signupUser(userDetails));\r\n                    history.push(({\r\n                        pathname: '/profile',\r\n                        state: null\r\n                    }));\r\n                })\r\n            })\r\n        } else {\r\n            updateUser(userDetails.key, userDetails).subscribe(() => {\r\n                dispatch(disableLoading());\r\n                dispatch(signupUser(userDetails));\r\n                history.push(({\r\n                    pathname: '/profile',\r\n                    state: null\r\n                }));\r\n            })\r\n        }\r\n        e.preventDefault();\r\n    }\r\n\r\n    async function onChangeFile(event) {\r\n        event.stopPropagation();\r\n        event.preventDefault();\r\n        var file = event.target.files[0];\r\n        console.log(file);\r\n        if (file) {\r\n            setUserDetails({ ...userDetails, profileImage: null });\r\n            const reader = new FileReader();\r\n            reader.readAsDataURL(file);\r\n            reader.onload = () => {\r\n                userPhotoUploadToggle(true);\r\n                setIsProfileImageChanged(true);\r\n                setUserDetails({ ...userDetails, profileImage: reader.result });\r\n            }\r\n            reader.onerror = error => console.error(error);\r\n        } else setIsProfileImageChanged(false);\r\n    }\r\n\r\n    return (\r\n        <div className=\"logout-wrap edit-page-wrap clearfix\">\r\n            <form className=\"form-wrap clearfix\" onSubmit={setSignupUserCred}>\r\n                <div className=\"heading-outer\">\r\n                    <div className=\"heading1\">Update Profile</div>\r\n                </div>\r\n                <div className=\"profile-img-wrap\">\r\n                    <div className=\"uploaded-img\" >\r\n                        <img src={userDetails.profileImage} onClick={() => { uploaderRef.current.click() }} />\r\n                    </div>\r\n                    {\r\n                        isUserPhotoUploaded ?\r\n                            <i className=\"plus-icon\"><FaEdit /></i>\r\n                            :\r\n                            <i className=\"plus-icon\"><FaPlus /></i>\r\n                    }\r\n                    <input id=\"myInput\"\r\n                        type=\"file\"\r\n                        accept=\"image/*\"\r\n                        ref={uploaderRef}\r\n                        onChange={(e) => onChangeFile(e)}\r\n                    />\r\n                </div>\r\n                <div className=\"form-outer final-registration-block clearfix\">\r\n                    <div className=\"input-wrap\">\r\n                        <TextField className=\"input-field\"\r\n                            required\r\n                            id=\"outlined-required-Name\"\r\n                            label=\"Name\"\r\n                            onChange={handleChange('name')}\r\n                            value={userDetails.name}\r\n                            variant=\"outlined\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"input-wrap\">\r\n                        <TextField className=\"input-field\"\r\n                            required\r\n                            id=\"outlined-required-Username\"\r\n                            label=\"Username\"\r\n                            onChange={handleChange('username')}\r\n                            value={userDetails.username}\r\n                            variant=\"outlined\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"input-wrap\">\r\n                        <TextField className=\"input-field\"\r\n                            required\r\n                            type=\"tel\"\r\n                            id=\"outlined-required-phone\"\r\n                            label=\"Phone\"\r\n                            onChange={handleChange('phone')}\r\n                            value={userDetails.phone}\r\n                            variant=\"outlined\"\r\n                            InputProps={{ readOnly: true }}\r\n                        />\r\n                    </div>\r\n                    <div className=\"input-wrap\">\r\n                        <TextField className=\"input-field\"\r\n                            required\r\n                            id=\"outlined-required-email\"\r\n                            label=\"Email\"\r\n                            type=\"email\"\r\n                            onChange={handleChange('email')}\r\n                            value={userDetails.email}\r\n                            variant=\"outlined\"\r\n                            InputProps={{ readOnly: true }}\r\n                        />\r\n                    </div>\r\n                    <div className=\"input-wrap\">\r\n                        <TextField className=\"input-field\"\r\n                            required\r\n                            id=\"outlined-required-country\"\r\n                            label=\"Country\"\r\n                            onChange={handleChange('country')}\r\n                            value={userDetails.country}\r\n                            variant=\"outlined\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"input-wrap\">\r\n                        <TextField className=\"input-field\"\r\n                            required\r\n                            id=\"outlined-required-state\"\r\n                            label=\"State\"\r\n                            onChange={handleChange('state')}\r\n                            value={userDetails.state}\r\n                            variant=\"outlined\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"input-wrap\">\r\n                        <FormControl className=\"\" variant=\"outlined\" style={{ width: '100%' }}>\r\n                            <InputLabel htmlFor=\"outlined-adornment-password\">Password</InputLabel>\r\n                            <OutlinedInput\r\n                                required\r\n                                id=\"outlined-adornment-password\"\r\n                                type={showHidePassword.showPassword ? 'text' : 'password'}\r\n                                value={userDetails.password}\r\n                                onChange={handleChange('password')}\r\n                                endAdornment={\r\n                                    <InputAdornment position=\"end\">\r\n                                        <IconButton\r\n                                            aria-label=\"toggle password visibility\"\r\n                                            onClick={() => handleClickShowPassword('showPassword')}\r\n                                            onMouseDown={handleMouseDownPassword}\r\n                                            edge=\"end\"\r\n                                        >\r\n                                            {showHidePassword.showPassword ? <Visibility /> : <VisibilityOff />}\r\n                                        </IconButton>\r\n                                    </InputAdornment>\r\n                                }\r\n                                labelWidth={70}\r\n                            />\r\n                        </FormControl>\r\n                    </div>\r\n                    <div className=\"input-wrap\">\r\n                        <FormControl className=\"\" variant=\"outlined\" style={{ width: '100%' }}>\r\n                            <InputLabel htmlFor=\"outlined-adornment-confirm-password\">Confirm Password</InputLabel>\r\n                            <OutlinedInput\r\n                                required\r\n                                id=\"outlined-adornment-confirm-password\"\r\n                                type={showHidePassword.showConfirmPassword ? 'text' : 'password'}\r\n                                value={userDetails.confirmPassword}\r\n                                onChange={handleChange('confirmPassword')}\r\n                                endAdornment={\r\n                                    <InputAdornment position=\"end\">\r\n                                        <IconButton\r\n                                            aria-label=\"toggle confirm password visibility\"\r\n                                            onClick={() => handleClickShowPassword('showConfirmPassword')}\r\n                                            onMouseDown={handleMouseDownPassword}\r\n                                            edge=\"end\"\r\n                                        >\r\n                                            {showHidePassword.showConfirmPassword ? <Visibility /> : <VisibilityOff />}\r\n                                        </IconButton>\r\n                                    </InputAdornment>\r\n                                }\r\n                                labelWidth={70}\r\n                            />\r\n                        </FormControl>\r\n                    </div>\r\n                    <div className=\"input-wrap\">\r\n                        <div className=\"dob-wrap\">\r\n                            <TextField className=\"input-field\"\r\n                                id=\"date\"\r\n                                label=\"Birthday\"\r\n                                type=\"date\"\r\n                                style={{ width: '100%' }}\r\n                                onChange={handleChange('dob')}\r\n                                value={userDetails.dob}\r\n                                InputLabelProps={{\r\n                                    shrink: true,\r\n                                }}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"input-wrap\">\r\n                        <FormControl variant=\"outlined\" className=\"input-field\">\r\n                            <InputLabel id=\"select-outlined-label\">Gender</InputLabel>\r\n                            <Select\r\n                                labelId=\"select-outlined-label\"\r\n                                id=\"select-outlined\"\r\n                                value={userDetails.gender}\r\n                                onChange={handleChange('gender')}\r\n                                label=\"Gender\"\r\n                            >\r\n                                <MenuItem value=\"Male\">Male</MenuItem>\r\n                                <MenuItem value=\"Female\">Female</MenuItem>\r\n                                <MenuItem value=\"Other\">Other</MenuItem>\r\n                            </Select>\r\n                        </FormControl>\r\n                    </div>\r\n                    <div className=\"input-wrap bio-wrap\">\r\n                        <TextField className=\"input-field bio-input\"\r\n                            id=\"outlined-required-bio\"\r\n                            label=\"Bio\"\r\n                            value={userDetails.bio}\r\n                            onChange={handleChange('bio')}\r\n                            variant=\"outlined\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"input-wrap bio-wrap edit-profile-page-input\">\r\n                        <div className=\"tnc-wrap\">\r\n                            <div className=\"tnc-content clearfix\">\r\n                                <div className=\"checkbox-wrap\">\r\n                                    <Checkbox\r\n                                        required\r\n                                        color=\"primary\"\r\n                                        checked={userDetails.tnc}\r\n                                        onChange={(e) => setUserDetails({ ...userDetails, tnc: e.target.checked })}\r\n                                        inputProps={{ 'aria-label': 'secondary checkbox' }}\r\n                                    />\r\n                                </div>\r\n                                <div className=\"note-wrap\">Yes, I agree to the terms and conditions </div>\r\n                            </div>\r\n                        </div>\r\n                        {SignUpError && <div className=\"login-error\">\r\n                            {SignUpError}\r\n                        </div>}\r\n                        <div className=\"submit-btn clearfix\">\r\n                            <Button variant=\"contained\" type=\"submit\" color=\"primary\" >Update\r\n                            <ArrowRightSharpIcon />\r\n                            </Button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n            <div className=\"img-wrap\">\r\n                <img src={bgImg} alt=\"bg1\" />\r\n            </div>\r\n        </div>\r\n    );\r\n}","F:\\Toms\\Business-work\\Boogalu\\src\\Services\\LocalstorageCache.js",[],"F:\\Toms\\Business-work\\Boogalu\\src\\Components\\Homepage\\index.js",["335","336","337"],"F:\\Toms\\Business-work\\Boogalu\\src\\Components\\Competitions\\index.js",["338","339","340","341"],"import React, { useState, useEffect } from 'react'\r\nimport CompetitionsDetails from \"../CompetitionsDetails\";\r\nimport { getCompetitionsList } from \"../../Services/Competition.service\";\r\nimport { useStoreConsumer } from '../../Providers/StateProvider';\r\nimport { setActiveCompetition } from \"../../Actions/Competition\";\r\nimport { disableLoginFlow } from \"../../Actions/LoginFlow\";\r\nimport { getCompetitionByUserId } from \"../../Services/EnrollCompetition.service\";\r\nimport { enableLoading, disableLoading } from \"../../Actions/Loader\";\r\n\r\nfunction Competitions() {\r\n    const { state, dispatch } = useStoreConsumer();\r\n    const [isOpenDetailsModal, setIsOpenDetailsModal] = useState(false);\r\n    const [CompletitionList, setCompletitionList] = useState(null);\r\n    const [initialStep, setInitialStep] = useState(1);\r\n    const loggedInUser = state.loggedInUser;\r\n\r\n    const prepareUserCompData = (allCompList) => {\r\n        return new Promise((res, rej) => {\r\n            getCompetitionByUserId(loggedInUser.key).subscribe((userCompList) => {\r\n                dispatch(disableLoading());\r\n                if (userCompList.length) {\r\n                    allCompList.map((compDetails) => {\r\n                        let isUserEnrolled = userCompList.filter((userCompData) => userCompData.compId == compDetails.key);\r\n                        if (isUserEnrolled.length) {\r\n                            compDetails.isUserEnrolled = true;\r\n                            compDetails.userSubmitedDetails = isUserEnrolled[0];\r\n                        }\r\n                    })\r\n                    res(allCompList);\r\n                } else res(allCompList);\r\n            });\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        dispatch(enableLoading());\r\n        getCompetitionsList().subscribe(allCompList => {\r\n            if (allCompList.length && loggedInUser.email && loggedInUser.phone) {\r\n                // get user submitted competition details\r\n                prepareUserCompData(allCompList).then((compListWithUserData) => {\r\n                    setCompletitionList(compListWithUserData);\r\n                    if (state.currentLoginFlow === 'profile-competition') {\r\n                        // if user come from profile page by clicking upload for competition\r\n                        dispatch(setActiveCompetition(compListWithUserData[0]));\r\n                        setIsOpenDetailsModal(true);\r\n                        setInitialStep(1);\r\n                    }\r\n                })\r\n            } else {\r\n                dispatch(disableLoading());\r\n                setCompletitionList(allCompList);\r\n                if (state.currentLoginFlow === 'profile-competition') {\r\n                    // if user come from profile page by clicking upload for competition\r\n                    dispatch(setActiveCompetition(allCompList[0]));\r\n                    setIsOpenDetailsModal(true);\r\n                    setInitialStep(1);\r\n                }\r\n            }\r\n        });\r\n        // if user come from login page\r\n        if (state.currentLoginFlow == 'competition') {\r\n            dispatch(disableLoginFlow());\r\n            setIsOpenDetailsModal(true);\r\n            if (loggedInUser.subscriptions) {\r\n                let isSubscribed = loggedInUser.subscriptions.filter((data) => data.type === 'competition-enrollment');\r\n                if (isSubscribed.length) setInitialStep(3);\r\n                else setInitialStep(1);\r\n            } else setInitialStep(1);\r\n        } else if (state.currentLoginFlow === 'competition-subscription') {\r\n            // if user come from subscription page\r\n            dispatch(disableLoginFlow());\r\n            setIsOpenDetailsModal(true);\r\n            setInitialStep(1);\r\n        } else if (state.currentLoginFlow === 'competition-uploadvdo') {\r\n            // if user come from vdoUpload page\r\n            dispatch(disableLoginFlow());\r\n            setIsOpenDetailsModal(true);\r\n            setInitialStep(3);\r\n        }\r\n    }, [])\r\n\r\n    const openDetailsModal = (competition) => {\r\n        if (competition.isUserEnrolled) setInitialStep(1);\r\n        dispatch(setActiveCompetition(competition));\r\n        setIsOpenDetailsModal(true);\r\n    }\r\n\r\n    return (\r\n        <div className=\"competition-wrap\">\r\n            <div className=\"competition-inner\">\r\n                <div className=\"title-wrap\">\r\n                    <h1>Our Active Competition !</h1>\r\n                    <div className=\"competition-desc\">Participate in different competitions &amp; win exciting prizes.</div>\r\n                </div>\r\n                <ul className=\"competition-list\" >\r\n                    {CompletitionList && CompletitionList.map((competition) => {\r\n                        return <li key={competition.name + '-id'} onClick={() => openDetailsModal(competition)}>\r\n                            <img src={competition.img} alt={competition.name} />\r\n                            <h2>{competition.name}  {competition.isUserEnrolled && <span>- Video submitted</span>}</h2>\r\n                        </li>\r\n                    })}\r\n                </ul>\r\n\r\n                {isOpenDetailsModal && <CompetitionsDetails open={isOpenDetailsModal} handleClose={() => setIsOpenDetailsModal(false)} initialStep={initialStep} />}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Competitions\r\n","F:\\Toms\\Business-work\\Boogalu\\src\\Components\\Subscriptions\\index.js",["342","343","344","345","346"],"import React, { useState, useEffect } from 'react'\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useStoreConsumer } from '../../Providers/StateProvider';\r\nimport { getActiveSubscriptionsList } from \"../../Services/Subscription.service\";\r\nimport { setActiveSubscription } from \"../../Actions/Subscription\";\r\nimport BuySubscription from \"../BuySubscription\";\r\nimport { enableLoginFlow, disableLoginFlow } from \"../../Actions/LoginFlow\";\r\nimport { saveUserSubscription } from \"../../Services/User.service\";\r\nimport { loginUser } from \"../../Actions/User\";\r\nimport { SUBSCRIPTION_ACTIVE_STATUS, ADMIN_EMAIL_STAGING } from \"../../Constants\";\r\nimport { enableLoading, disableLoading } from \"../../Actions/Loader\";\r\nimport { sendEmail } from \"../../Services/Email.service\";\r\n\r\nfunction Subscriptions() {\r\n    const { state, dispatch } = useStoreConsumer();\r\n    const history = useHistory();\r\n    const loggedInUser = state.loggedInUser;\r\n    const [AvailableSubscriptions, setAvailableSubscriptions] = useState([]);\r\n    const [showSubscriptionDetails, setShowSubscriptionDetails] = useState(false);\r\n    const [activeStep, setActiveStep] = useState(1);\r\n    const [alreadySubscribed, setAlreadySubscribed] = useState(false)\r\n\r\n    const sendEmailToAdmin = () => {\r\n        let emailBody = `<div>\r\n            <h6 style=\"font-size: 17px;margin-bottom: 26px;\">User subscribed for ${state.activeSubscription.name}</h6>\r\n            <h4>User details -</h4>\r\n            <h6>${loggedInUser.name}</h6>\r\n            <h6>${loggedInUser.email}</h6>\r\n            <h6>${loggedInUser.phone}</h6>\r\n            </div>`;\r\n        let payload = {\r\n            mailTo: ADMIN_EMAIL_STAGING,\r\n            title: 'User subscribed',\r\n            content: emailBody\r\n        }\r\n        sendEmail(payload).subscribe((res) => {\r\n            if (!('error' in res)) {\r\n                console.log('Admin Email Send Successfully.');\r\n            } else console.log('Admin Email Send Failed.');\r\n        })\r\n    }\r\n\r\n    const sendEmailToUser = () => {\r\n        let emailBody = `<div>\r\n            <p><span >Congratulations</span>  <strong>${loggedInUser.name}</strong>, \r\n            you have subscribed to our 1-month subscription. Now, you can enroll in any active competitions for a month.</p>\r\n            <h4>Time To Express Your Talent on Our Platform during this Lockdown</h4>`;\r\n        let payload = {\r\n            mailTo: loggedInUser.email,\r\n            title: 'Boogalu subscription successfull',\r\n            content: emailBody\r\n        }\r\n        sendEmail(payload).subscribe((res) => {\r\n            if (!('error' in res)) {\r\n                console.log('Email to user Send Successfully.');\r\n            } else console.log('Email to user Send Failed.');\r\n        })\r\n    }\r\n    // check for payment status if user is in payment flow\r\n    useEffect(() => {\r\n        dispatch(enableLoading());\r\n        if (history.location.search && history.location.search.includes('status')) {\r\n            getActiveSubscriptionsList().subscribe((subscriptionsList) => {\r\n                setAvailableSubscriptions(subscriptionsList);\r\n                dispatch(disableLoading());\r\n                console.log(subscriptionsList);\r\n            })\r\n            let paymentStatus = history.location.search.split('status=')[1];\r\n            if (paymentStatus == 'success') {\r\n                const subscriptionSuccessObj = {\r\n                    subId: state.activeSubscription.key,\r\n                    type: state.activeSubscription.type,\r\n                    status: SUBSCRIPTION_ACTIVE_STATUS, // current subscription status Active or Ended\r\n                    subscribedAt: new Date()\r\n                }\r\n                let loggedInUserData = { ...loggedInUser };\r\n                if (loggedInUserData.subscriptions) loggedInUserData.subscriptions.push(subscriptionSuccessObj)\r\n                else (loggedInUserData.subscriptions = [subscriptionSuccessObj]);\r\n\r\n                dispatch(enableLoading());\r\n                saveUserSubscription(state.activeSubscription.key, loggedInUserData).subscribe((response) => {\r\n                    sendEmailToAdmin();\r\n                    sendEmailToUser();\r\n                    dispatch(loginUser(loggedInUserData));\r\n                    setShowSubscriptionDetails(true);\r\n                    dispatch(disableLoading());\r\n                    setActiveStep(2);\r\n                });\r\n            } else {\r\n                // payment failure\r\n                setShowSubscriptionDetails(true);\r\n                setActiveStep(3)\r\n            }\r\n            history.push('/subscription');\r\n        } else {\r\n            getActiveSubscriptionsList().subscribe((subscriptionsList) => {\r\n                setAvailableSubscriptions(subscriptionsList);\r\n                dispatch(disableLoading());\r\n                console.log(subscriptionsList);\r\n                //if user come from competition details \r\n                if (state.currentLoginFlow == 'competition-subscription') {\r\n                    let subscriptionForCompetition = subscriptionsList.filter((data) => data.type === 'competition-enrollment');\r\n                    dispatch(setActiveSubscription(subscriptionForCompetition[0]));\r\n                    setActiveStep(1);\r\n                    setShowSubscriptionDetails(true);\r\n                }\r\n            })\r\n            //is user go to login flow from itself(current page)\r\n            if (state.currentLoginFlow == 'subscription') {\r\n                dispatch(disableLoginFlow());\r\n                setShowSubscriptionDetails(true);\r\n            }\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        let isSubscribed = loggedInUser?.subscriptions?.filter((data) => data.type === 'competition-enrollment');\r\n        if (isSubscribed && isSubscribed.length) setAlreadySubscribed(true);\r\n    }, [state.loggedInUser])\r\n\r\n    const setSubscription = (subscription) => {\r\n        dispatch(setActiveSubscription(subscription));\r\n        setActiveStep(1);\r\n        if (loggedInUser.name && loggedInUser.phone && loggedInUser.username) {\r\n            setShowSubscriptionDetails(true);\r\n        } else {\r\n            dispatch(enableLoginFlow('subscription'));\r\n            history.push({\r\n                pathname: '/login',\r\n                state: null\r\n            })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"subscription subscription-outer charcoal-bg\">\r\n            <div id=\"Subscription\" className=\"charcoal-bg\">\r\n                <div className=\"flex-container-VC subscription-wrap charcoal-bg\">\r\n                    <div className=\"flex-3 heading-content\">\r\n                        <h1>Unlimited Classes For The Price Of One</h1>\r\n                        <div className=\"line1\">Dance to the music that makes YOU want to move at any skill level.</div>\r\n                    </div>\r\n                    <div className=\"inner-plans-wrap\">\r\n                        {AvailableSubscriptions && AvailableSubscriptions.map((subscription) => {\r\n                            return <div className=\"flex-2 plan\" onClick={() => setSubscription(subscription)} key={subscription.key}>\r\n                                <div className=\"plan_tag\">{subscription.name}</div>\r\n                                <div className=\"plan_price\">@{subscription.amount}<span>{subscription.plans}</span></div>\r\n                                <div className=\"plan_tag\">{subscription.desc}</div>\r\n                                {alreadySubscribed && <div>Alredy subscribed</div>}\r\n                            </div>\r\n                        })}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            {showSubscriptionDetails && <BuySubscription handleClose={() => setShowSubscriptionDetails(false)} activeStep={activeStep} alreadySubscribed={alreadySubscribed} />}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Subscriptions\r\n","F:\\Toms\\Business-work\\Boogalu\\src\\Components\\Signup\\index.js",["347","348","349","350","351","352","353","354","355","356","357","358","359","360","361","362","363","364","365","366","367","368","369","370","371","372","373","374","375","376","377","378","379","380"],"import React, { useRef, useState, useEffect } from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useStoreConsumer } from '../../Providers/StateProvider';\r\nimport { signupUser } from '../../Actions/User';\r\nimport bgImg from '../../Images/bg1.svg';\r\nimport Button from '@material-ui/core/Button';\r\nimport boogaluLogo from '../../Images/Boogalu-logo.svg';\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Visibility from '@material-ui/icons/Visibility';\r\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\nimport { FaPlus, FaEdit } from 'react-icons/fa';\r\nimport stepListData from '../../Data/RegistrationStepData'\r\nimport ArrowRightSharpIcon from '@material-ui/icons/ArrowRightSharp';\r\nimport { registerUser, getUserByEmail, getUserByPhone } from \"../../Services/User.service\";\r\nimport { enableLoading, disableLoading } from \"../../Actions/Loader\";\r\nimport { displayNotification } from \"../../Actions/Notification\";\r\nimport { NOTIFICATION_SUCCCESS, NOTIFICATION_ERROR, MALE_PROFILE_DEFAULT_IMAGE, FEMALE_PROFILE_DEFAULT_IMAGE } from \"../../Constants\";\r\nimport { uploadImage } from \"../../Services/Upload.service\";\r\nimport * as $ from 'jquery';\r\n\r\nexport default function Signup() {\r\n    const { state, dispatch } = useStoreConsumer();\r\n    const history = useHistory();\r\n    let loggedInUser = state.loggedInUser;\r\n    // if user already login then redirect to home\r\n    if (loggedInUser.name && loggedInUser.phone && loggedInUser.email && loggedInUser.username) history.push({\r\n        pathname: '/',\r\n        state: null\r\n    })\r\n    // get data from history props if redirected through google or facebook login\r\n    if (history.location.state && (history.location.state.source === 'Facebook' || history.location.state.source === 'Google')) {\r\n        loggedInUser.email = history.location.state.email;\r\n        loggedInUser.name = history.location.state.name;\r\n        // setNeedToRegisterError('You are not registered yet, Please register with Choreoculture.')\r\n    }\r\n    const [userDetails, setUserDetails] = useState(loggedInUser);\r\n    const [SignUpError, setSignUpError] = useState(null);\r\n    const [showHidePassword, setShowHidePassword] = useState({ showPassword: false, showConfirmPassword: false });\r\n\r\n    const [activeStep, setActiveStep] = useState(6);\r\n    const [showNextButton, setShowNextButton] = useState(false);\r\n    const [stepData, setStepListData] = useState(stepListData);\r\n    const [selectedOptionsList, setSelectedOptionsList] = useState([]);\r\n    const [isUserPhotoUploaded, userPhotoUploadToggle] = useState(false);\r\n    const uploaderRef = useRef(null);\r\n\r\n    const handleChange = (prop) => (event) => {\r\n        setUserDetails({ ...userDetails, [prop]: event.target.value });\r\n    };\r\n\r\n    const handleClickShowPassword = (prop) => {\r\n        setShowHidePassword({ ...showHidePassword, [prop]: !showHidePassword[prop] });\r\n    };\r\n\r\n    const handleMouseDownPassword = (event) => {\r\n        event.preventDefault();\r\n    };\r\n\r\n    useEffect(() => {\r\n        $('html,body').animate({\r\n            scrollTop: 0\r\n        }, 500);\r\n        if (userDetails && !userDetails.profileImage) {\r\n            setUserDetails({ ...userDetails, profileImage: MALE_PROFILE_DEFAULT_IMAGE })\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (stepData[activeStep]) {\r\n            let isAnySelected = stepData[activeStep].filter((data) => data.isSelected);\r\n            if (isAnySelected.length != 0) setShowNextButton(true);\r\n            else setShowNextButton(false);\r\n            // set selected options\r\n            let selectedOptions = [];\r\n            Object.entries(stepData).map(([parentKey, parentValue]) => {\r\n                parentValue.map((parentValueItem) => {\r\n                    if (parentValueItem.isSelected) {\r\n                        let selectionObj = { value: [parentValueItem.title], key: parentKey, heading: parentValueItem.heading };\r\n                        if (selectedOptions.length != 0) {\r\n                            let isAvl = selectedOptions.filter((data) => data.key === parentKey);\r\n                            if (isAvl.length != 0) {\r\n                                selectedOptions.map((item) => {\r\n                                    if (item.key === parentKey) item.value.push(parentValueItem.title);\r\n                                })\r\n                            } else selectedOptions.push(selectionObj);\r\n                        } else selectedOptions.push(selectionObj);\r\n                    }\r\n                })\r\n            })\r\n            setSelectedOptionsList(selectedOptions);\r\n        }\r\n    }, [activeStep])\r\n\r\n    const saveUserRegistrationDetails = () => {\r\n        return new Promise((res, rej) => {\r\n            dispatch(enableLoading());\r\n            if (userDetails.profileImage != MALE_PROFILE_DEFAULT_IMAGE) {\r\n                uploadImage(userDetails.profileImage, 'user', 'small').subscribe((downloadableUrl) => {\r\n                    userDetails.profileImage = downloadableUrl;\r\n                    registerUser(userDetails).subscribe((data) => {\r\n                        console.log('user registered success', data);\r\n                        res(data.key);\r\n                    })\r\n                })\r\n            } else {\r\n                registerUser(userDetails).subscribe((data) => {\r\n                    console.log('user registered success', data);\r\n                    res(data.key);\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    const checkForUsedPhone = () => {\r\n        return new Promise((res, rej) => {\r\n            getUserByPhone(userDetails.phone).subscribe((data) => {\r\n                dispatch(disableLoading());\r\n                if (data && data.length) {\r\n                    setSignUpError('Phone already registered.');\r\n                    rej(false);\r\n                } else {\r\n                    res(true);\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    const checkForUsedEmail = () => {\r\n        return new Promise((res, rej) => {\r\n            getUserByEmail(userDetails.email).subscribe((data) => {\r\n                dispatch(disableLoading());\r\n                if (data && data.length) {\r\n                    setSignUpError('Email already registered.');\r\n                    rej(false);\r\n                } else {\r\n                    res(true);\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    const redirection = () => {\r\n        dispatch(signupUser(userDetails));\r\n        dispatch(displayNotification({\r\n            msg: \"Registration successfully\",\r\n            type: NOTIFICATION_SUCCCESS,\r\n            time: 3000\r\n        }));\r\n        if (state.currentLoginFlow == 'competition') history.push('/competitions');\r\n        else if (state.currentLoginFlow == 'subscription') history.push('/subscription');\r\n        if (state.currentLoginFlow == 'upload-video') history.push('/upload-video');\r\n        else history.push(({\r\n            pathname: '/',\r\n            state: null\r\n        }));\r\n    }\r\n\r\n    const setSignupUserCred = (e) => {\r\n        dispatch(enableLoading());\r\n        if (userDetails.password != userDetails.confirmPassword) {\r\n            setSignUpError('Password dose not match.');\r\n            return;\r\n        }\r\n\r\n        Promise.all([checkForUsedEmail(), checkForUsedPhone()]).then(() => {\r\n            saveUserRegistrationDetails()\r\n                .then((userKey) => {\r\n                    userDetails.key = userKey;\r\n                    dispatch(disableLoading());\r\n                    // dispatch(signupUser(userDetails));\r\n                    // dispatch(displayNotification({\r\n                    //     msg: \"Registration successfully\",\r\n                    //     type: NOTIFICATION_SUCCCESS,\r\n                    //     time: 3000\r\n                    // }));\r\n                    setActiveStep('stepOne');\r\n                })\r\n                .catch((error) => {\r\n                    // error in user registration\r\n                    if (error) {\r\n\r\n                    }\r\n                })\r\n        }).catch(error => {\r\n            console.error(error)\r\n        });\r\n        e.preventDefault();\r\n    }\r\n\r\n    const setNextStep = () => {\r\n        switch (activeStep) {\r\n            case 'stepOne': setActiveStep('stepTwo'); break;\r\n            case 'stepTwo': setActiveStep('stepThree'); break;\r\n            case 'stepThree': setActiveStep('stepFour'); break;\r\n            case 'stepFour': redirection(); break;\r\n            // case 'stepFive': setActiveStep(6); break;\r\n        }\r\n    }\r\n\r\n    const setPrevStep = () => {\r\n        switch (activeStep) {\r\n            case 'stepTwo': setActiveStep('stepOne'); break;\r\n            case 'stepThree': setActiveStep('stepTwo'); break;\r\n            case 'stepFour': setActiveStep('stepThree'); break;\r\n            // case 'stepFive': setActiveStep('stepFour'); break;\r\n            // case 6: setActiveStep('stepFour'); break;\r\n        }\r\n    }\r\n\r\n    const setStepListItemData = (e, activeItem, status) => {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        const stepDataList = Object.assign({}, stepData);\r\n        stepDataList[activeStep].map((item) => {\r\n            if (item.title === activeItem.title) {\r\n                item.isSelected = item.isSelected ? false : true;\r\n            } else {\r\n                if (status != 'multi-select') {\r\n                    item.isSelected = false;\r\n                }\r\n            }\r\n        })\r\n        // set selected options\r\n        let selectedOptions = [];\r\n        Object.entries(stepDataList).map(([parentKey, parentValue]) => {\r\n            parentValue.map((parentValueItem) => {\r\n                if (parentValueItem.isSelected) {\r\n                    let selectionObj = { value: [parentValueItem.title], key: parentKey, heading: parentValueItem.heading };\r\n                    if (selectedOptions.length != 0) {\r\n                        let isAvl = selectedOptions.filter((data) => data.key === parentKey);\r\n                        if (isAvl.length != 0) {\r\n                            selectedOptions.map((item) => {\r\n                                if (item.key === parentKey) item.value.push(parentValueItem.title);\r\n                            })\r\n                        } else selectedOptions.push(selectionObj);\r\n                    } else selectedOptions.push(selectionObj);\r\n                }\r\n            })\r\n        })\r\n        setSelectedOptionsList(selectedOptions);\r\n        let isAnySelected = stepDataList[activeStep].filter((data) => data.isSelected);\r\n        if (isAnySelected.length != 0) setShowNextButton(true);\r\n        else setShowNextButton(false);\r\n        setStepListData(stepDataList);\r\n    }\r\n\r\n    async function onChangeFile(event) {\r\n        event.stopPropagation();\r\n        event.preventDefault();\r\n        var file = event.target.files[0];\r\n        console.log(file);\r\n        if (file) {\r\n            setUserDetails({ ...userDetails, profileImage: null });\r\n            const reader = new FileReader();\r\n            reader.readAsDataURL(file);\r\n            reader.onload = () => {\r\n                userPhotoUploadToggle(true);\r\n                setUserDetails({ ...userDetails, profileImage: reader.result });\r\n            }\r\n            reader.onerror = error => console.error(error);\r\n        }\r\n    }\r\n\r\n    function goToPrevious(event) {\r\n        history.goBack();\r\n    }\r\n\r\n    return (\r\n        <div className=\"logout-wrap new-login-signup-ui signup-wrap gradient-bg-animation clearfix\">\r\n            <div className=\"inner-signup-wrap\">\r\n                <div className=\"header-outer\">\r\n                    <a onClick={(e) => goToPrevious(e)} className=\"arrow-back-home\" title=\"Back\">\r\n                        <ArrowBackIcon />\r\n                    </a>\r\n                    <a href=\"/\" className=\"logo\" title=\"Back to Home\">\r\n                        <img src={boogaluLogo} alt=\"Boogalu\" />\r\n                    </a>\r\n                </div>\r\n                {activeStep != 6 && <div className=\"step-wrap\">\r\n                    <div className=\"heading1\">Let's Get Started!</div>\r\n                    {activeStep === 'stepOne' && <>\r\n                        <div className=\"list-content\">\r\n                            <div className=\"list-heading-wrap\">\r\n                                <div className=\"heading2\">What’s your experience with dancing?</div>\r\n                                <div className=\"heading3\">Select One Option</div>\r\n                            </div>\r\n                            <div className=\"list\">\r\n                                {stepData.stepOne.map((item, i) => {\r\n                                    return (\r\n                                        <div key={i} className={item.isSelected ? 'list-item selected-item' : 'list-item'} onClick={(e) => setStepListItemData(e, item)}>\r\n                                            <div className=\"title\">{item.title}</div>\r\n                                            <div className=\"desc\">{item.desc}</div>\r\n                                            <Checkbox\r\n                                                required\r\n                                                color=\"primary\"\r\n                                                className=\"selected-item-checkbox\"\r\n                                                checked={item.isSelected}\r\n                                                onChange={(e) => setStepListItemData(e, item)}\r\n                                                inputProps={{ 'aria-label': 'secondary checkbox' }}\r\n                                            />\r\n                                        </div>\r\n                                    )\r\n                                })}\r\n                            </div>\r\n                        </div>\r\n                    </>}\r\n                    {activeStep === 'stepTwo' && <>\r\n                        <div className=\"list-content\">\r\n                            <div className=\"list-heading-wrap\">\r\n                                <div className=\"heading2\">What is your first goal that you want to work on?</div>\r\n                                <div className=\"heading3\">Select One Option</div>\r\n                            </div>\r\n                            <div className=\"list\">\r\n                                {stepData.stepTwo.map((item, i) => {\r\n                                    return (\r\n                                        <div key={i} className={item.isSelected ? 'list-item selected-item' : 'list-item'} onClick={(e) => setStepListItemData(e, item)}>\r\n                                            <div className=\"title\">{item.title}</div>\r\n                                            <div className=\"desc\">{item.desc}</div>\r\n                                            <Checkbox\r\n                                                required\r\n                                                color=\"primary\"\r\n                                                className=\"selected-item-checkbox\"\r\n                                                checked={item.isSelected}\r\n                                                onChange={(e) => setStepListItemData(e, item)}\r\n                                                inputProps={{ 'aria-label': 'secondary checkbox' }}\r\n                                            />\r\n                                        </div>\r\n                                    )\r\n                                })}\r\n                            </div>\r\n                        </div>\r\n                    </>}\r\n                    {activeStep === 'stepThree' && <>\r\n                        <div className=\"list-content\">\r\n                            <div className=\"list-heading-wrap\">\r\n                                <div className=\"heading2\">What are you interested in?</div>\r\n                                <div className=\"heading3\">Select all that apply</div>\r\n                            </div>\r\n                            <div className=\"list\">\r\n                                {stepData.stepThree.map((item, i) => {\r\n                                    return (\r\n                                        <div key={i} className={item.isSelected ? 'list-item selected-item' : 'list-item'} onClick={(e) => setStepListItemData(e, item, 'multi-select')}>\r\n                                            <div className=\"title\">{item.title}</div>\r\n                                            <div className=\"desc\" style={{ paddingRight: '25px' }}>{item.desc}</div>\r\n                                            <Checkbox\r\n                                                required\r\n                                                color=\"primary\"\r\n                                                className=\"selected-item-checkbox\"\r\n                                                checked={item.isSelected}\r\n                                                onChange={(e) => setStepListItemData(e, item, 'multi-select')}\r\n                                                inputProps={{ 'aria-label': 'secondary checkbox' }}\r\n                                            />\r\n                                        </div>\r\n                                    )\r\n                                })}\r\n                            </div>\r\n                        </div>\r\n                    </>}\r\n                    {activeStep === 'stepFour' && <>\r\n                        <div className=\"list-content\">\r\n                            <div className=\"list-heading-wrap\">\r\n                                <div className=\"heading2\">How long would you like your dance sessions to be?</div>\r\n                                <div className=\"heading3\">Select One Option</div>\r\n                            </div>\r\n                            <div className=\"list\">\r\n                                {stepData.stepFour.map((item, i) => {\r\n                                    return (\r\n                                        <div key={i} className={item.isSelected ? 'list-item selected-item' : 'list-item'} onClick={(e) => setStepListItemData(e, item)}>\r\n                                            <div className=\"title\">{item.title}</div>\r\n                                            <div className=\"desc\">{item.desc}</div>\r\n                                            <Checkbox\r\n                                                required\r\n                                                color=\"primary\"\r\n                                                className=\"selected-item-checkbox\"\r\n                                                checked={item.isSelected}\r\n                                                onChange={(e) => setStepListItemData(e, item)}\r\n                                                inputProps={{ 'aria-label': 'secondary checkbox' }}\r\n                                            />\r\n                                        </div>\r\n                                    )\r\n                                })}\r\n                            </div>\r\n                        </div>\r\n                    </>}\r\n                    {activeStep === 'stepFive' && <>\r\n                        <div className=\"list-content\">\r\n                            <div className=\"list-heading-wrap\">\r\n                                <div style={{ paddingBottom: 0 }} className=\"heading2\">Your Personal Schedule & Recommendations</div>\r\n                            </div>\r\n                            <div className=\"list\">\r\n                                {selectedOptionsList.map((item, i) => {\r\n                                    return (\r\n                                        <div key={i} className=\"list-item selected-item\" onClick={() => setActiveStep(item.key)}>\r\n                                            <div className=\"title\">{item.heading}</div>\r\n                                            <div className=\"desc\">\r\n                                                {item.value.length === 1 &&\r\n                                                    item.value.map((listValue, j) => {\r\n                                                        return <span key={j}>{listValue} </span>\r\n                                                    })\r\n                                                }\r\n                                                {item.value.length != 1 &&\r\n                                                    item.value.map((listValue, j) => {\r\n                                                        return <span key={j}>{listValue}, </span>\r\n                                                    })\r\n                                                }\r\n\r\n                                            </div>\r\n                                            {/* <Checkbox\r\n                                                required\r\n                                                color=\"primary\"\r\n                                                className=\"selected-item-checkbox\"\r\n                                                checked={true}\r\n                                                disabled={true}\r\n                                                inputProps={{ 'aria-label': 'secondary checkbox' }}\r\n                                            /> */}\r\n                                        </div>\r\n                                    )\r\n                                })}\r\n                            </div>\r\n                        </div>\r\n                    </>}\r\n                    {activeStep != 6 && <div className=\"step-already-login-wrap clearfix\">\r\n                        <div className=\"text-wrap\">Already have an account?</div>\r\n                        <Button color=\"primary\" onClick={() => history.push({\r\n                            pathname: '/login',\r\n                            state: null\r\n                        })}>SIGN IN</Button>\r\n                        {/* {\r\n                            showNextButton ?\r\n                                <div className={`next-prev-actions ${activeStep != 'stepOne' ? 'next-step-active' : ''} `}>\r\n                                    {activeStep != 'stepOne' && <Button color=\"primary\" variant=\"contained\" className=\"next-btn previous\" onClick={() => setPrevStep()}>Prev</Button>}\r\n                                    {showNextButton && <Button color=\"primary\" variant=\"contained\" className=\"next-btn\" onClick={() => setNextStep()}>Next</Button>}\r\n                                </div> : ''\r\n                        } */}\r\n                        <div className={`next-prev-actions ${activeStep != 'stepOne' ? 'next-step-active' : ''} `}>\r\n                            {activeStep != 'stepOne' && <Button color=\"primary\" variant=\"contained\" className=\"next-btn previous\" onClick={() => setPrevStep()}>Prev</Button>}\r\n                            {/* <Button color=\"primary\" variant=\"contained\" className=\"next-btn\" onClick={() => setNextStep()}>Next</Button> */}\r\n                            {showNextButton && <Button color=\"primary\" variant=\"contained\" className=\"next-btn\" onClick={() => setNextStep()}>Next</Button>}\r\n                            {!showNextButton && <Button color=\"primary\" variant=\"contained\" className=\"next-btn skip-btn\" onClick={() => setNextStep()}>Skip</Button>}\r\n                            {activeStep != 'stepFour' && <Button color=\"primary\" variant=\"contained\" className=\"next-btn skip-all-btn\" onClick={() => redirection()}>Skip All</Button>}\r\n                        </div>\r\n                    </div>}\r\n                </div>}\r\n                {activeStep == 6 && <form className=\"form-wrap final-registration-block clearfix\" onSubmit={setSignupUserCred}>\r\n                    <div className=\"heading-outer\">\r\n                        <div className=\"heading1\">Let's Get Started!</div>\r\n                        <div className=\"heading2\">Create an account to Choreoculture to get all features.</div>\r\n                    </div>\r\n                    {/* {NeedToRegisterError && <div className=\"login-error\">\r\n                        {NeedToRegisterError}\r\n                    </div>} */}\r\n                    <div className=\"profile-img-wrap\">\r\n                        <div className=\"uploaded-img\" >\r\n                            <img src={userDetails.profileImage} onClick={() => { uploaderRef.current.click() }} />\r\n                        </div>\r\n                        {\r\n                            isUserPhotoUploaded ?\r\n                                <i className=\"plus-icon\"><FaEdit /></i>\r\n                                :\r\n                                <i className=\"plus-icon\"><FaPlus /></i>\r\n                        }\r\n                        <input id=\"myInput\"\r\n                            type=\"file\"\r\n                            accept=\"image/*\"\r\n                            ref={uploaderRef}\r\n                            onChange={(e) => onChangeFile(e)}\r\n                        />\r\n                        {/* <div className=\"upload-btn-file\">\r\n                            <Button\r\n                                variant=\"contained\" color=\"primary\"\r\n                                onClick={() => { uploaderRef.current.click() }}>Upload Video</Button>\r\n                        </div>  */}\r\n                    </div>\r\n                    <div className=\"form-outer clearfix\">\r\n                        <div className=\"input-wrap\">\r\n                            <TextField className=\"input-field\"\r\n                                required\r\n                                id=\"outlined-required-Name\"\r\n                                label=\"Name\"\r\n                                onChange={handleChange('name')}\r\n                                value={userDetails.name}\r\n                                variant=\"outlined\"\r\n                            />\r\n                        </div>\r\n                        <div className=\"input-wrap\">\r\n                            <TextField className=\"input-field\"\r\n                                required\r\n                                id=\"outlined-required-Username\"\r\n                                label=\"Username\"\r\n                                onChange={handleChange('username')}\r\n                                value={userDetails.username}\r\n                                variant=\"outlined\"\r\n                            />\r\n                        </div>\r\n                        <div className=\"input-wrap\">\r\n                            <TextField className=\"input-field\"\r\n                                required\r\n                                type=\"tel\"\r\n                                id=\"outlined-required-phone\"\r\n                                label=\"Phone\"\r\n                                onChange={handleChange('phone')}\r\n                                value={userDetails.phone}\r\n                                variant=\"outlined\"\r\n                            />\r\n                        </div>\r\n                        <div className=\"input-wrap\">\r\n                            <TextField className=\"input-field\"\r\n                                required\r\n                                id=\"outlined-required-email\"\r\n                                label=\"Email\"\r\n                                type=\"email\"\r\n                                onChange={handleChange('email')}\r\n                                value={userDetails.email}\r\n                                variant=\"outlined\"\r\n                            />\r\n                        </div>\r\n                        <div className=\"input-wrap\">\r\n                            <TextField className=\"input-field\"\r\n                                required\r\n                                id=\"outlined-required-country\"\r\n                                label=\"Country\"\r\n                                onChange={handleChange('country')}\r\n                                value={userDetails.country}\r\n                                variant=\"outlined\"\r\n                            />\r\n                        </div>\r\n                        <div className=\"input-wrap\">\r\n                            <TextField className=\"input-field\"\r\n                                required\r\n                                id=\"outlined-required-state\"\r\n                                label=\"State\"\r\n                                onChange={handleChange('state')}\r\n                                value={userDetails.state}\r\n                                variant=\"outlined\"\r\n                            />\r\n                        </div>\r\n                        <div className=\"input-wrap\">\r\n                            <FormControl className=\"\" variant=\"outlined\">\r\n                                <InputLabel htmlFor=\"outlined-adornment-password\">Password</InputLabel>\r\n                                <OutlinedInput\r\n                                    required\r\n                                    id=\"outlined-adornment-password\"\r\n                                    type={showHidePassword.showPassword ? 'text' : 'password'}\r\n                                    value={userDetails.password}\r\n                                    onChange={handleChange('password')}\r\n                                    endAdornment={\r\n                                        <InputAdornment position=\"end\">\r\n                                            <IconButton\r\n                                                aria-label=\"toggle password visibility\"\r\n                                                onClick={() => handleClickShowPassword('showPassword')}\r\n                                                onMouseDown={handleMouseDownPassword}\r\n                                                edge=\"end\"\r\n                                            >\r\n                                                {showHidePassword.showPassword ? <Visibility /> : <VisibilityOff />}\r\n                                            </IconButton>\r\n                                        </InputAdornment>\r\n                                    }\r\n                                    labelWidth={70}\r\n                                />\r\n                            </FormControl>\r\n                        </div>\r\n                        <div className=\"input-wrap\">\r\n                            <FormControl className=\"\" variant=\"outlined\">\r\n                                <InputLabel htmlFor=\"outlined-adornment-confirm-password\">Confirm Password</InputLabel>\r\n                                <OutlinedInput\r\n                                    required\r\n                                    id=\"outlined-adornment-confirm-password\"\r\n                                    type={showHidePassword.showConfirmPassword ? 'text' : 'password'}\r\n                                    value={userDetails.confirmPassword}\r\n                                    onChange={handleChange('confirmPassword')}\r\n                                    endAdornment={\r\n                                        <InputAdornment position=\"end\">\r\n                                            <IconButton\r\n                                                aria-label=\"toggle confirm password visibility\"\r\n                                                onClick={() => handleClickShowPassword('showConfirmPassword')}\r\n                                                onMouseDown={handleMouseDownPassword}\r\n                                                edge=\"end\"\r\n                                            >\r\n                                                {showHidePassword.showConfirmPassword ? <Visibility /> : <VisibilityOff />}\r\n                                            </IconButton>\r\n                                        </InputAdornment>\r\n                                    }\r\n                                    labelWidth={70}\r\n                                />\r\n                            </FormControl>\r\n                        </div>\r\n                        <div className=\"input-wrap\">\r\n                            <div className=\"dob-wrap\">\r\n                                <TextField className=\"input-field\"\r\n                                    id=\"date\"\r\n                                    label=\"Birthday\"\r\n                                    type=\"date\"\r\n                                    onChange={handleChange('dob')}\r\n                                    value={userDetails.dob}\r\n                                    InputLabelProps={{\r\n                                        shrink: true,\r\n                                    }}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"input-wrap\">\r\n                            <FormControl variant=\"outlined\" className=\"input-field\">\r\n                                <InputLabel id=\"select-outlined-label\">Gender</InputLabel>\r\n                                <Select\r\n                                    labelId=\"select-outlined-label\"\r\n                                    id=\"select-outlined\"\r\n                                    value={userDetails.gender}\r\n                                    onChange={handleChange('gender')}\r\n                                    label=\"Gender\"\r\n                                >\r\n                                    <MenuItem value=\"Male\">Male</MenuItem>\r\n                                    <MenuItem value=\"Female\">Female</MenuItem>\r\n                                    <MenuItem value=\"Other\">Other</MenuItem>\r\n                                </Select>\r\n                            </FormControl>\r\n                        </div>\r\n                        <div className=\"input-wrap bio-wrap\">\r\n                            <TextField className=\"input-field bio-input\"\r\n                                id=\"outlined-required-bio\"\r\n                                label=\"Bio\"\r\n                                value={userDetails.bio}\r\n                                onChange={handleChange('bio')}\r\n                                variant=\"outlined\"\r\n                            />\r\n                        </div>\r\n                        <div className=\"tnc-wrap\">\r\n                            <div className=\"tnc-content clearfix\">\r\n                                <div className=\"checkbox-wrap\">\r\n                                    <Checkbox\r\n                                        required\r\n                                        color=\"primary\"\r\n                                        checked={userDetails.tnc}\r\n                                        onChange={(e) => setUserDetails({ ...userDetails, tnc: e.target.checked })}\r\n                                        inputProps={{ 'aria-label': 'secondary checkbox' }}\r\n                                    />\r\n                                </div>\r\n                                <div className=\"note-wrap\">Yes, I agree to the terms and conditions </div>\r\n                            </div>\r\n                        </div>\r\n                        {SignUpError && <div className=\"login-error\">\r\n                            {SignUpError}\r\n                        </div>}\r\n                        <div className=\"submit-btn clearfix\">\r\n                            <Button variant=\"contained\" type=\"submit\" color=\"primary\" >Sign Up\r\n                             <ArrowRightSharpIcon />\r\n                            </Button>\r\n                            {/* {activeStep != 'stepOne' && <Button color=\"primary\" variant=\"contained\" className=\"next-btn previous\" onClick={() => setPrevStep()}>Prev</Button>} */}\r\n                        </div>\r\n                        <div className=\"already-login-wrap\">\r\n                            <div className=\"text-wrap\">Already have an account?</div>\r\n                            <Button color=\"primary\" onClick={() => history.push({\r\n                                pathname: '/login',\r\n                                state: null\r\n                            })}>SIGN IN</Button>\r\n                        </div>\r\n                    </div>\r\n                </form>}\r\n\r\n                <div className=\"img-wrap\">\r\n                    <img src={bgImg} alt=\"bg1\" />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}","F:\\Toms\\Business-work\\Boogalu\\src\\Components\\Page404\\index.js",[],"F:\\Toms\\Business-work\\Boogalu\\src\\Components\\VideoUploader\\index.js",["381","382","383"],"import React, { useRef, useState, useEffect } from 'react'\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { useStoreConsumer } from '../../Providers/StateProvider';\r\nimport { uploadVideo, uploadImage } from \"../../Services/Upload.service\";\r\nimport { saveUploadedVideo } from \"../../Services/UploadedVideo.service\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { THUMBNAIL_URL } from \"../../Constants\";\r\nimport ImageUploader from 'react-images-upload';\r\nimport { disableLoginFlow } from \"../../Actions/LoginFlow\";\r\nimport { FaCloudUploadAlt } from 'react-icons/fa';\r\nimport { setDataRefetchModuleName } from \"../../Actions/Utility\";\r\nimport { NOTIFICATION_ERROR, ADMIN_EMAIL_STAGING } from \"../../Constants\";\r\nimport { displayNotification } from \"../../Actions/Notification\";\r\nimport { sendEmail } from \"../../Services/Email.service\";\r\n// modal imports\r\nimport Modal from '@material-ui/core/Modal';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport Fade from '@material-ui/core/Fade';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport { enableLoading, disableLoading } from \"../../Actions/Loader\";\r\n//circular progress\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\n\r\nexport default function VideoUploader({ selectedVdo, handleVdoUploadResponse }) {\r\n    const history = useHistory();\r\n    const { state, dispatch } = useStoreConsumer();\r\n    const loggedInUser = state.loggedInUser;\r\n    const uploaderRef = useRef(null);\r\n    const [SelectedVideo, setSelectedVideo] = useState(selectedVdo ? selectedVdo : { title: \"\", desc: \"\", file: null });\r\n    const [UploadedVdoUrl, setUploadedVdoUrl] = useState(null);\r\n    const [ThumbnailImage, setThumbnailImage] = useState(null);\r\n    const [openVdoUploaderModal, setOpenVdoUploaderModal] = useState(true);\r\n    const [progress, setProgress] = useState(0);\r\n    const [ShowVdoUploadProgress, setShowVdoUploadProgress] = useState(false);\r\n\r\n    // useEffect(() => {\r\n    //     const timer = setInterval(() => {\r\n    //         setProgress((prevProgress) => (prevProgress >= 100 ? 0 : prevProgress + 10));\r\n    //     }, 800);\r\n    //     return () => {\r\n    //         clearInterval(timer);\r\n    //     };\r\n    // }, []);\r\n\r\n    useEffect(() => {\r\n        dispatch(disableLoginFlow());\r\n    }, [])\r\n\r\n    const useStyles = makeStyles((theme) => ({\r\n        modal: {\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n        },\r\n        paper: {\r\n            backgroundColor: theme.palette.background.paper,\r\n            border: '2px solid #000',\r\n            boxShadow: theme.shadows[5],\r\n            padding: theme.spacing(2, 4, 3),\r\n        },\r\n    }));\r\n    const classes = useStyles();\r\n\r\n    async function onChangeFile(event) {\r\n        event.stopPropagation();\r\n        event.preventDefault();\r\n        var file = event.target.files[0];\r\n        console.log(file);\r\n        // 1MB in Bytes is 1,048,576 so you can multiply it by the limit you need.\r\n        if (file) {\r\n            if (file.size > 52428800) {\r\n                alert(\"File is too big!\");\r\n                dispatch(displayNotification({\r\n                    msg: \"File is too big!\",\r\n                    type: NOTIFICATION_ERROR,\r\n                    time: 3000\r\n                }))\r\n                setSelectedVideo({ ...SelectedVideo, file: null });\r\n                uploaderRef.current.click();\r\n            } else {\r\n                setSelectedVideo({ ...SelectedVideo, file: null });\r\n                const reader = new FileReader();\r\n                reader.readAsDataURL(file);\r\n                reader.onload = () => {\r\n                    setSelectedVideo({ ...SelectedVideo, file: reader.result });\r\n                }\r\n                reader.onerror = error => console.error(error);\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleChange = (prop) => (event) => {\r\n        setSelectedVideo({ ...SelectedVideo, [prop]: event.target.value });\r\n    };\r\n\r\n    async function uploadSelectedVideo() {\r\n        if (!(SelectedVideo.title && SelectedVideo.desc)) {\r\n            dispatch(displayNotification({\r\n                msg: \"Title and description are mandatory!\",\r\n                type: NOTIFICATION_ERROR,\r\n                time: 3000\r\n            }))\r\n            return\r\n        }\r\n        var thumbnailImage = THUMBNAIL_URL;\r\n        if (ThumbnailImage && ThumbnailImage[0]) {\r\n            const reader = new FileReader();\r\n            reader.readAsDataURL(ThumbnailImage[0]);\r\n            reader.onload = () => {\r\n                uploadImage(reader.result, 'thumbnail', 'small').subscribe((downloadableUrl) => {\r\n                    thumbnailImage = downloadableUrl;\r\n                })\r\n            }\r\n            reader.onerror = error => console.error(error);\r\n        }\r\n\r\n        const sendEmailToAdmin = (vdoUrl) => {\r\n            let emailBody = `<div>\r\n            <h6 style=\"font-size: 17px;margin-bottom: 26px;\">New Video Uploaded</h6>\r\n            <h4>User details -</h4>\r\n            <h6>${loggedInUser.name}</h6>\r\n            <h6>${loggedInUser.email}</h6>\r\n            <h6>${loggedInUser.phone}</h6>\r\n            <a href=${vdoUrl} >Clik here to check uploaded video</a>\r\n            </div>`;\r\n            let payload = {\r\n                mailTo: ADMIN_EMAIL_STAGING,\r\n                title: 'New Video Uploaded',\r\n                content: emailBody\r\n            }\r\n            sendEmail(payload).subscribe((res) => {\r\n                if (!('error' in res)) {\r\n                    console.log('Admin Email Send Successfully.');\r\n                } else console.log('Admin Email Send Failed.');\r\n            })\r\n        }\r\n\r\n        const sendEmailToUser = (vdoUrl) => {\r\n            let emailBody = `<div>\r\n            <p>Hi ${loggedInUser.name}, you have recently uploaded a video, ${SelectedVideo.title}</p>. \r\n            <a href=${vdoUrl} >Clik here to check uploaded video</a>\r\n            </div>`;\r\n            let payload = {\r\n                mailTo: loggedInUser.email,\r\n                title: 'Video Uploaded',\r\n                content: emailBody\r\n            }\r\n            sendEmail(payload).subscribe((res) => {\r\n                if (!('error' in res)) {\r\n                    console.log('User Email Send Successfully.');\r\n                } else console.log('User Email Send Failed.');\r\n            })\r\n        }\r\n\r\n        uploadVideo(SelectedVideo.file).subscribe((response) => {\r\n            dispatch(enableLoading());\r\n            setShowVdoUploadProgress(true);\r\n            if (response.donePercentage) {\r\n                setProgress(response.donePercentage);\r\n                console.log('Upload is ' + response.donePercentage + '% done');\r\n            }\r\n            if (response.downloadURL && !UploadedVdoUrl) {\r\n                sendEmailToAdmin(response.downloadURL);\r\n                sendEmailToUser(response.downloadURL);\r\n                // dispatch(enableLoading());\r\n                setShowVdoUploadProgress(false);\r\n                setUploadedVdoUrl(response.downloadURL);\r\n                const uploadObj = {\r\n                    title: SelectedVideo.title,\r\n                    desc: SelectedVideo.desc,\r\n                    url: response.downloadURL,\r\n                    userId: loggedInUser.key,\r\n                    thumbnail: thumbnailImage\r\n                }\r\n                saveUploadedVideo(uploadObj).subscribe((response) => {\r\n                    console.log(\"vedio data saved to db\", response);\r\n                    dispatch(disableLoading());\r\n                    const pathName = history?.location?.pathname.split('/')[1];\r\n                    pathName.includes('profile') && dispatch(setDataRefetchModuleName('user-uploaded-video'));\r\n                    closeUploaderModal();\r\n                    if (state.currentLoginFlow == 'competition-uploadvdo') handleVdoUploadResponse(3);\r\n                    else history.push('/profile');\r\n                })\r\n            }\r\n        })\r\n        console.log(SelectedVideo);\r\n        console.log(loggedInUser);\r\n    }\r\n\r\n    const onThumbnailImgSelect = (picture) => {\r\n        setThumbnailImage(picture);\r\n    }\r\n\r\n    const closeUploaderModal = () => {\r\n        const pathName = history?.location?.pathname.split('/')[1];\r\n        if (pathName.includes('register') || pathName.includes('login')) {\r\n            history.push('/profile');\r\n        }\r\n        // else if (state.currentLoginFlow == 'competition-uploadvdo') history.push('/competition');\r\n        // handleClose();\r\n        if (typeof (handleVdoUploadResponse) !== 'undefined') {\r\n            handleVdoUploadResponse();\r\n        }\r\n        setOpenVdoUploaderModal(false);\r\n\r\n    }\r\n\r\n    function CircularProgressWithLabel(props) {\r\n        return (\r\n            <Box position=\"relative\" display=\"inline-flex\">\r\n                <CircularProgress variant=\"determinate\" {...props} />\r\n                <Box\r\n                    top={0}\r\n                    left={0}\r\n                    bottom={0}\r\n                    right={0}\r\n                    position=\"absolute\"\r\n                    display=\"flex\"\r\n                    alignItems=\"center\"\r\n                    justifyContent=\"center\"\r\n                >\r\n                    <Typography variant=\"caption\" component=\"div\" color=\"textSecondary\">{`${Math.round(\r\n                        props.value,\r\n                    )}%`}</Typography>\r\n                </Box>\r\n            </Box>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Modal\r\n                aria-labelledby=\"transition-modal-title\"\r\n                aria-describedby=\"transition-modal-description\"\r\n                className='competition-modal-box'\r\n                open={openVdoUploaderModal}\r\n                onClose={() => closeUploaderModal(false)}\r\n                closeAfterTransition\r\n                BackdropComponent={Backdrop}\r\n                BackdropProps={{\r\n                    timeout: 500,\r\n                }}\r\n            >\r\n                <Fade in={openVdoUploaderModal}>\r\n                    <div className=\"video-uploader-inner-modal\">\r\n                        <IconButton className=\"close-modal-btn\" onClick={() => { closeUploaderModal(false); dispatch(disableLoginFlow()); }}>\r\n                            <CloseIcon />\r\n                        </IconButton>\r\n                        <h3>Upload your dance performance video!</h3>\r\n                        <div className={`uploader-wrap ${SelectedVideo.file ? 'selected-file' : ''}`}>\r\n                            {\r\n                                !SelectedVideo.file ?\r\n                                    <div className=\"upload-input-wrap\">\r\n                                        <i className=\"upload-icon\"><FaCloudUploadAlt /></i>\r\n                                        <input id=\"myInput\"\r\n                                            type=\"file\"\r\n                                            accept=\"video/mp4,video/x-m4v,video/*\"\r\n                                            ref={uploaderRef}\r\n                                            onChange={(e) => onChangeFile(e)}\r\n                                        />\r\n                                    </div> : ''\r\n                            }\r\n\r\n                            {!SelectedVideo.file ?\r\n                                <div className=\"upload-btn-file\">\r\n                                    <Button\r\n                                        variant=\"contained\" color=\"primary\"\r\n                                        onClick={() => { uploaderRef.current.click() }}>Upload Video</Button>\r\n                                </div> :\r\n                                <div className=\"video-information-wrap\">\r\n                                    <video width=\"400\" controls>\r\n                                        <source src={SelectedVideo.file} />\r\n                                    </video>\r\n                                    <div className=\"change-video-btn\">\r\n                                        <Button\r\n                                            variant=\"contained\" color=\"primary\"\r\n                                            onClick={() => { uploaderRef.current.click() }}\r\n                                        >Change vdo</Button>\r\n                                    </div>\r\n                                    <div className=\"input-form-wrap\">\r\n                                        <div className=\"input-wrap image-uploader-wrap\">\r\n                                            <ImageUploader\r\n                                                withIcon={true}\r\n                                                buttonText='Select image'\r\n                                                onChange={onThumbnailImgSelect}\r\n                                                imgExtension={['.jpg', '.gif', '.png', '.gif', '.svg']}\r\n                                                maxFileSize={5242880}\r\n                                                accept=\"image/*\"\r\n                                                withPreview={true}\r\n                                                singleImage={true}\r\n                                                label=\"Select thumbnail image\"\r\n                                            />\r\n                                        </div>\r\n                                        <div className=\"text-form-wrapper\">\r\n                                            <div className=\"input-field-wrap\">\r\n                                                <TextField className=\"input-field\"\r\n                                                    required\r\n                                                    id=\"outlined-required-title\"\r\n                                                    label=\"Video title\"\r\n                                                    onChange={handleChange('title')}\r\n                                                    value={SelectedVideo.title}\r\n                                                    variant=\"outlined\"\r\n                                                    autoComplete=\"off\"\r\n                                                />\r\n                                            </div>\r\n                                            <div className=\"input-field-wrap\">\r\n                                                <TextField className=\"input-field\"\r\n                                                    required\r\n                                                    id=\"outlined-required-desc\"\r\n                                                    label=\"Video description\"\r\n                                                    onChange={handleChange('desc')}\r\n                                                    value={SelectedVideo.desc}\r\n                                                    variant=\"outlined\"\r\n                                                    autoComplete=\"off\"\r\n                                                />\r\n                                            </div>\r\n                                            <Button variant=\"contained\" color=\"secondary\" onClick={(e) => uploadSelectedVideo(e)}>Upload</Button>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>}\r\n                        </div>\r\n                    </div>\r\n                </Fade>\r\n            </Modal>\r\n            {ShowVdoUploadProgress && <div className=\"progress-wrap\">\r\n                <div className=\"progress-body\">\r\n                    <CircularProgressWithLabel value={progress} />\r\n                </div>\r\n            </div>}\r\n        </div>\r\n    )\r\n}","F:\\Toms\\Business-work\\Boogalu\\src\\Components\\Contactus\\index.js",["384","385"],"import React, { useState, useEffect } from 'react';\r\nimport { useStoreConsumer } from '../../Providers/StateProvider';\r\nimport { submitEnquiry } from \"../../Services/Other.service\";\r\nimport Button from '@material-ui/core/Button';\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\n// modal imports\r\nimport Modal from '@material-ui/core/Modal';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport Fade from '@material-ui/core/Fade';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport IconButton from '@material-ui/core/IconButton';\r\n\r\nfunction ContactUs() {\r\n\r\n    let initialFields = {\r\n        name: '',\r\n        email: '',\r\n        phone: '',\r\n        address: '',\r\n        subject: '',\r\n        message: ''\r\n    }\r\n    const { state, dispatch } = useStoreConsumer();\r\n    let loggedInUser = state.loggedInUser;\r\n    const history = useHistory();\r\n    const [formFields, setFormFields] = useState(initialFields);\r\n    const [enquirySubmitted, setEnquirySubmitted] = useState(false)\r\n    useEffect(() => {\r\n        if (state.loggedInUser?.username) {\r\n            initialFields = {\r\n                name: loggedInUser.name,\r\n                email: loggedInUser.email,\r\n                phone: loggedInUser.phone,\r\n                address: '',\r\n                subject: '',\r\n                message: ''\r\n            }\r\n            setFormFields(initialFields);\r\n        }\r\n    }, [state])\r\n\r\n    const handleChange = (prop) => (event) => {\r\n        setFormFields({ ...formFields, [prop]: event.target.value });\r\n    };\r\n\r\n    const clearForm = (e) => {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        setFormFields(initialFields);\r\n    }\r\n\r\n    const submitForm = (e) => {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        submitEnquiry(formFields).subscribe(() => {\r\n            setEnquirySubmitted(true);\r\n        })\r\n    }\r\n\r\n    const redirectTo = () => {\r\n        history.push('/')\r\n    }\r\n\r\n    return (\r\n        !enquirySubmitted ? <div className=\"contact-us-wrap charcoal-bg\" id=\"contactUsPage\">\r\n            <div className=\"inner-page\">\r\n                <h1>Reach us with your queries or concerns, &amp; we'll help you with that.</h1>\r\n                <form className=\"contact-form\" onSubmit={submitForm}>\r\n                    <div className='control-group'>\r\n                        <input value={formFields.name} onChange={handleChange('name')} type=\"text\" required id=\"name\" name=\"fullname\" placeholder=\"Full name*\" />\r\n                    </div>\r\n                    <div className='control-group'>\r\n                        <input value={formFields.email} onChange={handleChange('email')} type=\"email\" required id=\"email\" name=\"emailid\" placeholder=\"Valid email id*\" />\r\n                    </div>\r\n                    <div className='control-group'>\r\n                        <input value={formFields.phone} onChange={handleChange('phone')} type=\"text\" required id=\"phone\" name=\"phone\" placeholder=\"Valid phone number*\" />\r\n                    </div>\r\n                    <div className='control-group'>\r\n                        <input value={formFields.address} onChange={handleChange('address')} type=\"text\" id=\"address\" name=\"address\" placeholder=\"Your address\" />\r\n                    </div>\r\n                    <div className='control-group'>\r\n                        <input value={formFields.subject} onChange={handleChange('subject')} type=\"text\" required id=\"subject\" name=\"subject\" placeholder=\"Subject*\" />\r\n                    </div>\r\n                    <div className='control-group'>\r\n                        <textarea value={formFields.message} onChange={handleChange('message')} id=\"message\" name=\"message\" required placeholder=\"Query/Message/Concerns*\"></textarea>\r\n                    </div>\r\n                    <div className=\"control-group action-group\">\r\n                        <button className=\"btn reset-btn\" onClick={(e) => clearForm(e)}>Clear</button>\r\n                        <button className=\"btn primary-light\" type=\"submit\">Send</button>\r\n                    </div>\r\n                </form>\r\n                <div className=\"address-block\">\r\n                    +91-9920518931 /  9619828307 / 9884588775<br />\r\n                    Mahaprgya Hights No. 49 Sector - 20, kharghar, Navi Mumbai Opposite Metro Bridge, Reliance fresh road\r\n                </div>\r\n            </div>\r\n        </div> :\r\n            <div className=\"subscription-modal-wrap\">\r\n                <Modal\r\n                    aria-labelledby=\"transition-modal-title\"\r\n                    aria-describedby=\"transition-modal-description\"\r\n                    className='subscription-modal-box'\r\n                    open={enquirySubmitted}\r\n                    onClose={() => redirectTo()}\r\n                    closeAfterTransition\r\n                    BackdropComponent={Backdrop}\r\n                    BackdropProps={{\r\n                        timeout: 500,\r\n                    }}\r\n                >\r\n                    <Fade in={enquirySubmitted}>\r\n                        <div className=\"subscription-inner-modal\">\r\n                            <IconButton className=\"close-modal-btn\" onClick={() => redirectTo()}>\r\n                                <CloseIcon />\r\n                            </IconButton>\r\n                            <h3 className=\"confirmation-heading\">Thank you for your enquiry</h3>\r\n                            <div className=\"confirmation-content\">Your message has been sent successfully.</div>\r\n                            <div className=\"confirmation-content\">Thank you for your enquiry. Will be get back to you as soon as possible.</div>\r\n                            <Button variant=\"contained\" color=\"secondary\" onClick={(e) => redirectTo()}>Ok</Button>\r\n                        </div>\r\n                    </Fade>\r\n                </Modal>\r\n            </div >\r\n\r\n    )\r\n}\r\n\r\nexport default ContactUs;\r\n","F:\\Toms\\Business-work\\Boogalu\\src\\Components\\Splash\\index.js",[],"F:\\Toms\\Business-work\\Boogalu\\src\\Components\\Loader\\index.js",[],"F:\\Toms\\Business-work\\Boogalu\\src\\Components\\Upcoming\\index.js",["386","387","388","389"],"import React, { useState, useRef, useEffect } from 'react'\r\nimport Video from \"../Vedio/Video\";\r\nimport LessonsVideoContainer from '../LessonVideoComponent';\r\nimport Lessons from \"../../Data/Dummy\";\r\nfunction Upcoming() {\r\n\r\n    const [activeCategory, setActiveCategory] = useState(Lessons[0]);\r\n\r\n    return (\r\n        <div className=\"lessons lessons-wrap\" id=\"upcomingLessons\">\r\n            <div className=\"inner-page\">\r\n                <h1>Learn from the Experts</h1>\r\n                <p>\r\n                    Lessons for all users from our expert faculty members.\r\n                    From Hip-Hop to Bharatnatyam. You'll get all learning videos\r\n                    at one place.\r\n                </p>\r\n                <p className=\"launching-soon\">More lessons launching soon! Stay connected!</p>\r\n                {/* <p className=\"from-our-expert-title\">Few sample lessons</p> */}\r\n                <div className=\"lesson-wrap\">\r\n                    <div className=\"lessons-vdo-wrap\">\r\n                        {activeCategory?.videos.map((activeVideo, index) => {\r\n                            return <LessonsVideoContainer\r\n                                title={activeCategory?.title}\r\n                                desc={activeCategory?.desc} \r\n                                activeVideosList={activeVideo} \r\n                                key={index} />\r\n                        })}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Upcoming;\r\n","F:\\Toms\\Business-work\\Boogalu\\src\\Components\\Feeds\\index.js",["390","391","392","393","394","395","396","397","398","399","400","401","402","403","404","405","406","407","408","409","410"],"import React, { useEffect, useState } from 'react'\r\nimport { getUploadedVideosList } from \"../../Services/UploadedVideo.service\";\r\nimport { updateVideoLikes, updateVideoComments } from \"../../Services/UploadedVideo.service\";\r\nimport { getAllUser } from \"../../Services/User.service\";\r\nimport FavoriteBorder from '@material-ui/icons/FavoriteBorder';\r\nimport Favorite from '@material-ui/icons/Favorite';\r\nimport CommentOutlined from '@material-ui/icons/CommentOutlined';\r\nimport { useStoreConsumer } from '../../Providers/StateProvider';\r\nimport VideoDetails from '../VideoDetails'\r\nimport ProfileImage from \"../ProfileImage\";\r\nimport Vedio from \"../Vedio/Video\";\r\nimport { enableLoading, disableLoading } from \"../../Actions/Loader\";\r\n\r\nfunction Feeds() {\r\n\r\n    const [feedList, setFeedList] = useState([])\r\n    const [userList, setUserList] = useState([])\r\n    const [activeVideoObj, setActiveVideoObj] = useState({})\r\n    const [commentModal, setCommentModal] = useState(false)\r\n    const { state, dispatch } = useStoreConsumer();\r\n    const loggedInUser = state.loggedInUser;\r\n\r\n    const getAllUserList = () => {\r\n        return new Promise((res, rej) => {\r\n            getAllUser().subscribe((users) => {\r\n                setUserList(users);\r\n                res(users);\r\n            });\r\n        })\r\n    }\r\n\r\n    const getAllUploadedVideos = () => {\r\n        return new Promise((res, rej) => {\r\n            getUploadedVideosList().subscribe((videos) => {\r\n                res(videos);\r\n            });\r\n        })\r\n    }\r\n\r\n    const handleLikes = (video, status) => {\r\n        let videoObj = { ...video }\r\n        if (status == 'liked') {\r\n            if (videoObj.likes) {\r\n                videoObj.likes.push({ value: 1, userId: loggedInUser.key })\r\n            } else {\r\n                videoObj.likes = [{ value: 1, userId: loggedInUser.key }]\r\n            }\r\n        } else {\r\n            let likes = videoObj.likes.filter(data => data.userId != loggedInUser.key)\r\n            videoObj.likes = likes\r\n        }\r\n        videoObj.likes.map((likeObj) => { delete likeObj.profileImage; delete likeObj.username; })\r\n        updateVideoLikes(videoObj.key, videoObj).subscribe(() => {\r\n            let feedListCopy = [...feedList]\r\n            feedListCopy.map((feed) => {\r\n                if (feed.key == videoObj.key) {\r\n                    feed.likes = videoObj.likes\r\n                }\r\n\r\n                if (feed.likes && feed.likes.length) {\r\n                    let isAvail = feed.likes.filter(data => data.userId == loggedInUser.key)\r\n                    isAvail.length > 0 ? feed.isLiked = true : feed.isLiked = false\r\n                } else {\r\n                    feed.isLiked = false\r\n                }\r\n                addUserDetailsToFeed(feed, userList);\r\n            })\r\n            setFeedList(feedListCopy)\r\n        })\r\n    }\r\n\r\n    const handleComments = (commentString) => {\r\n        let videoObj = { ...activeVideoObj }\r\n        if (videoObj.comments) {\r\n            videoObj.comments.push({ value: commentString, userId: loggedInUser.key })\r\n        } else {\r\n            videoObj.comments = [{ value: commentString, userId: loggedInUser.key }]\r\n        }\r\n\r\n        videoObj.comments.map((commentObj) => { delete commentObj.profileImage; delete commentObj.username; })\r\n        updateVideoComments(videoObj.key, videoObj).subscribe(() => {\r\n            let feedListCopy = [...feedList]\r\n            feedListCopy.map((feed) => {\r\n                if (feed.key == videoObj.key) {\r\n                    feed.comments = videoObj.comments\r\n                }\r\n                addUserDetailsToFeed(feed, userList);\r\n            })\r\n            setFeedList(feedListCopy)\r\n        })\r\n    }\r\n\r\n    const handleCommentClick = (video) => {\r\n        setCommentModal(true);\r\n        setActiveVideoObj(video)\r\n    }\r\n\r\n    const addUserDetailsToFeed = (feed, allUser) => {\r\n        if (feed.likes && feed.likes.length) {\r\n            feed.likes.map((likeObj) => {\r\n                let userData = allUser.filter(userObj => userObj.key == likeObj.userId);\r\n                if (userData.length != 0) {\r\n                    likeObj.username = userData[0].username;\r\n                    likeObj.profileImage = userData[0].profileImage;\r\n                }\r\n            })\r\n        }\r\n        if (feed.comments && feed.comments.length) {\r\n            feed.comments.map((commentObj) => {\r\n                let userData = allUser.filter(userObj => userObj.key == commentObj.userId);\r\n                if (userData.length != 0) {\r\n                    commentObj.username = userData[0].username;\r\n                    commentObj.profileImage = userData[0].profileImage;\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        dispatch(enableLoading());\r\n        Promise.all([getAllUserList(), getAllUploadedVideos()]).then((data) => {\r\n            dispatch(disableLoading());\r\n            let tempUserList = data[0]\r\n            let tempFeedList = data[1]\r\n\r\n            tempUserList.map((user) => {\r\n                tempFeedList.map((feed) => {\r\n                    if (user.key == feed.userId) {\r\n                        feed.username = user.name;\r\n                        feed.profileImage = user.profileImage;\r\n                        user.isAnyVideoSubmitted = true;\r\n                    }\r\n                    if (feed.likes && feed.likes.length) {\r\n                        let isAvail = feed.likes.filter(data => data.userId == loggedInUser.key)\r\n                        isAvail.length > 0 ? feed.isLiked = true : feed.isLiked = false\r\n                    } else {\r\n                        feed.isLiked = false\r\n                    }\r\n                    addUserDetailsToFeed(feed, tempUserList);\r\n                })\r\n            })\r\n            setFeedList(tempFeedList)\r\n            setUserList(tempUserList);\r\n        })\r\n    }, [])\r\n\r\n    const openUserStory = (user) => {\r\n        let userVdos = feedList.filter((feed) => user.key == feed.userId);\r\n        if (userVdos.length) {\r\n            setActiveVideoObj(userVdos[0]);\r\n            setCommentModal(true);\r\n        };\r\n    }\r\n\r\n    return (\r\n        <div className=\"user-dashboard-wrap\">\r\n            <div className=\"user-list-wrap\">\r\n                {userList && userList.map((user) => {\r\n                    return (user.isAnyVideoSubmitted ? <div key={user.key} className=\"user-icon-wrap\" onClick={() => openUserStory(user)}>\r\n                        <ProfileImage src={user.profileImage} type=\"large\" />\r\n                        <div>{user.username}</div>\r\n                    </div> : null)\r\n                })}\r\n            </div>\r\n            <div className=\"feed-dashboard-wrap\">\r\n                {/* <div className=\"loggedin-user\">\r\n                    <div>\r\n                        <ProfileImage src={loggedInUser.profileImage} />\r\n                        <div>\r\n                            <div>{loggedInUser.username}</div>\r\n                            <div className=\"username\">{loggedInUser.name}</div>\r\n                        </div>\r\n                    </div>\r\n                </div> */}\r\n                <div className=\"feed-wrap\">\r\n                    {feedList && feedList.map((feed) => {\r\n                        return <div key={feed.key} className=\"feed-card\">\r\n                            <div>\r\n                                <Vedio vdoObj={feed} />\r\n                            </div>\r\n                            <div className=\"username\">\r\n                                <ProfileImage src={feed.profileImage} />\r\n                                <span className=\"name\">{feed.username}</span>\r\n                            </div>\r\n                            <div className=\"video-title-like-wrap\">\r\n                                <div className=\"title\">{feed.title}</div>\r\n                                <div className=\"like-comment\">\r\n                                    {feed.likes && feed.likes.length > 0 && <div className=\"likes-count\">{feed.likes.length} Likes</div>}\r\n                                    {!feed.isLiked && <FavoriteBorder title=\"Unlike\" onClick={() => handleLikes(feed, 'liked')} />}\r\n                                    {feed.isLiked && <Favorite title=\"Like\" onClick={() => handleLikes(feed, 'unliked')} />}\r\n                                    <CommentOutlined title=\"comment\" onClick={() => handleCommentClick(feed)} />\r\n                                </div>\r\n\r\n                            </div>\r\n                        </div>\r\n                    })}\r\n                </div>\r\n            </div>\r\n\r\n            {commentModal && <VideoDetails handleClose={() => setCommentModal(false)} handleLikes={handleLikes} handleComments={handleComments} videoObj={activeVideoObj} />}\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Feeds\r\n","F:\\Toms\\Business-work\\Boogalu\\src\\Components\\Notification\\index.js",["411"],"F:\\Toms\\Business-work\\Boogalu\\src\\Reducers\\index.js",[],"F:\\Toms\\Business-work\\Boogalu\\src\\Services\\User.service.js",[],"F:\\Toms\\Business-work\\Boogalu\\src\\Services\\UploadedVideo.service.js",[],"F:\\Toms\\Business-work\\Boogalu\\src\\Services\\Competition.service.js",[],"F:\\Toms\\Business-work\\Boogalu\\src\\Services\\EnrollCompetition.service.js",[],"F:\\Toms\\Business-work\\Boogalu\\src\\Services\\Utils.js",["412","413","414"],"export function formatTime(time) {\r\n    time = new Date(time);\r\n    const hour24 = time.getHours();\r\n    let minutes = (time.getMinutes() === 0) ? '00' : time.getMinutes();\r\n    minutes = (minutes > 0 && minutes < 10) ? `0${minutes}` : minutes;\r\n    const ampm = (hour24 >= 12) ? 'PM' : 'AM';\r\n    let hour = hour24 % 12 || 12;\r\n    //append zero is hour is single digit\r\n    if (hour < 10) {\r\n        hour = `0${hour}`;\r\n    }\r\n    return `${hour}:${minutes} ${ampm}`;\r\n};\r\n\r\nexport function formatDate(date, status) {\r\n    date = new Date(date);\r\n    var monthNames = [\r\n        \"January\", \"February\", \"March\",\r\n        \"April\", \"May\", \"June\", \"July\",\r\n        \"August\", \"September\", \"October\",\r\n        \"November\", \"December\"\r\n    ];\r\n    let day = date.getDate();\r\n    let monthIndex = date.getMonth();\r\n    let year = date.getFullYear();\r\n    if (status == 3) return day + 'th ' + monthNames[monthIndex] + \" \" + year;\r\n    if (status == 2) return day + 'th ' + monthNames[monthIndex];\r\n    if (status == 1) return day;\r\n};\r\n\r\nexport function timeStampToNewDate(timeStamp) {\r\n    return new Date(timeStamp.seconds * 1000 + Math.round(timeStamp.nanoseconds / 1000000));\r\n}\r\n\r\nexport function toBase64(file) {\r\n    new Promise((resolve, reject) => {\r\n        const reader = new FileReader();\r\n        reader.readAsDataURL(file);\r\n        reader.onload = () => resolve(reader.result);\r\n        reader.onerror = error => reject(error);\r\n    });\r\n}","F:\\Toms\\Business-work\\Boogalu\\src\\Services\\Upload.service.js",["415","416"],"import { Observable } from 'rxjs';\r\nimport firebase from './firebase';\r\nconst storageRef = firebase.storage().ref();\r\n\r\nconst BASE_PATH = '/uploads';\r\nvar FILE_NAME = '';\r\nvar FILE_PATH = '';\r\n// from ==> competition or user upload\r\n// type => small or large\r\nexport function uploadImage(image, from, type) {\r\n\r\n    let date = new Date();\r\n    let id = date.getTime().toString();\r\n    FILE_NAME = (type ? type : '') + 'pic' + id + '.jpg';\r\n    FILE_PATH = BASE_PATH + '/' + from + '/' + FILE_NAME;\r\n\r\n    let uploadTask = storageRef.child(FILE_PATH).putString(image, 'data_url');\r\n\r\n    return new Observable((observer) => {\r\n        uploadTask.on('state_changed',\r\n            (snapshot) => {\r\n                let progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\r\n                console.log('Upload is ' + progress + '% done');\r\n                switch (snapshot.state) {\r\n                    case firebase.storage.TaskState.PAUSED: // or 'paused'\r\n                        console.log('Upload is paused');\r\n                        break;\r\n                    case firebase.storage.TaskState.RUNNING: // or 'running'\r\n                        console.log('Upload is running');\r\n                        break;\r\n                }\r\n            }, (error) => {\r\n                console.log(error);\r\n            }, () => {\r\n                uploadTask.snapshot.ref.getDownloadURL().then(function (downloadURL) {\r\n                    observer.next(downloadURL);\r\n                });\r\n            });\r\n    });\r\n}\r\n\r\nexport function deleteImage(imageUrl) {\r\n    storageRef.refFromURL(imageUrl).delete();\r\n}\r\n\r\nexport function uploadVideo(video) {\r\n\r\n    let date = new Date();\r\n    let id = date.getTime().toString();\r\n    FILE_NAME = 'user' + id + '.mp4';\r\n    FILE_PATH = BASE_PATH + '/video/' + FILE_NAME;\r\n\r\n    let uploadTask = storageRef.child(FILE_PATH).putString(video, 'data_url');\r\n\r\n    return new Observable((observer) => {\r\n        uploadTask.on('state_changed',\r\n            (snapshot) => {\r\n                let progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\r\n                // console.log('Upload is ' + progress + '% done');\r\n                observer.next({ donePercentage: progress });\r\n                switch (snapshot.state) {\r\n                    case firebase.storage.TaskState.PAUSED: // or 'paused'\r\n                        console.log('Upload is paused');\r\n                        break;\r\n                    case firebase.storage.TaskState.RUNNING: // or 'running'\r\n                        console.log('Upload is running');\r\n                        break;\r\n                }\r\n            }, (error) => {\r\n                console.log(error);\r\n            }, () => {\r\n                uploadTask.snapshot.ref.getDownloadURL().then(function (downloadURL) {\r\n                    observer.next({ downloadURL });\r\n                });\r\n            });\r\n    });\r\n}\r\n\r\nexport function deleteVideo(videoUrl) {\r\n    storageRef.refFromURL(videoUrl).delete();\r\n}\r\n","F:\\Toms\\Business-work\\Boogalu\\src\\Components\\Vedio\\Video.js",[],"F:\\Toms\\Business-work\\Boogalu\\src\\Actions\\User\\index.js",[],"F:\\Toms\\Business-work\\Boogalu\\src\\Services\\Other.service.js",[],"F:\\Toms\\Business-work\\Boogalu\\src\\Components\\CompetitionsDetails\\index.js",["417","418","419","420","421","422","423","424","425","426","427","428","429","430","431","432","433","434"],"import React, { useState, useEffect, useRef } from 'react'\r\nimport Modal from '@material-ui/core/Modal';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport Fade from '@material-ui/core/Fade';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport { FaCloudUploadAlt } from 'react-icons/fa';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useStoreConsumer } from '../../Providers/StateProvider';\r\nimport { THUMBNAIL_URL } from '../../Constants';\r\nimport \"./CompetitionsDetails.scss\";\r\nimport EnrollCompetition from \"../EnrollCompetition\";\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport { setActiveCompetition } from \"../../Actions/Competition\";\r\nimport { enableLoginFlow } from \"../../Actions/LoginFlow\";\r\nimport { getUploadedVideosByUserId } from \"../../Services/UploadedVideo.service\";\r\nimport { formatDate, formatTime } from \"../../Services/Utils\";\r\nimport VideoUploader from \"../VideoUploader\";\r\nimport { enableLoading, disableLoading } from \"../../Actions/Loader\";\r\nimport { NOTIFICATION_ERROR } from \"../../Constants\";\r\nimport { displayNotification } from \"../../Actions/Notification\";\r\n//activestep 1 === Competition details\r\n//activestep 2 === User submitted competition details if already enrolled\r\n//activestep 3 === Video selection\r\n//activestep 4 === final age group and video submission for competition\r\n\r\nexport default function CompetitionsDetails({ open, handleClose, initialStep }) {\r\n\r\n    const { state, dispatch } = useStoreConsumer();\r\n    const uploaderRef = useRef(null);\r\n    const history = useHistory();\r\n    const competitionDetails = state.activeCompetition;\r\n    console.log(competitionDetails);\r\n    const loggedInUser = state.loggedInUser;\r\n    const [userUploadedVdos, setUserUploadedVideoList] = useState([]);\r\n    const tncRef = useRef();\r\n    const [TnC, setTnC] = useState(false);\r\n    const [isTncAccepted, tncAcceptedValue] = useState(false);\r\n    const [ActiveStep, setActiveStep] = useState(initialStep || 1);\r\n    const [isVideoSelected, toggleVideoSelect] = useState(false);\r\n    const [selectedVideoData, setVideoData] = useState(null);\r\n    const [disableSubmitVdoButton, setDisableSubmitVdoButton] = useState(false);\r\n    const [VdoUploadDateLimit, setVdoUploadDateLimit] = useState(null)\r\n    const [SelectedVideo, setSelectedVideo] = useState({ title: \"\", desc: \"\", file: null });\r\n\r\n    useEffect(() => {\r\n        document.addEventListener('mousedown', handleClickOutside);\r\n        return () => {\r\n            document.removeEventListener('mousedown', handleClickOutside);\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (competitionDetails) {\r\n            let vdoUploadUpto = new Date(competitionDetails.startAt);\r\n            new Date(vdoUploadUpto.setDate(vdoUploadUpto.getDate() + 30));\r\n            let displayDate = formatDate(vdoUploadUpto, 3) + \" \" + formatTime(vdoUploadUpto)\r\n            setVdoUploadDateLimit(displayDate);\r\n        }\r\n    }, [competitionDetails]);\r\n\r\n    useEffect(() => {\r\n        (loggedInUser.email && loggedInUser.phone && ActiveStep === 3 && userUploadedVdos.length == 0) && getUploadedVideosByUserId(loggedInUser.key).subscribe((vdoList) => {\r\n            if (vdoList && vdoList.length) {\r\n                vdoList.map((uploadedVdo) => {\r\n                    if (competitionDetails.isUserEnrolled) {\r\n                        if (uploadedVdo.key == competitionDetails.userSubmitedDetails.vdo.key) {\r\n                            uploadedVdo.isSelected = true;\r\n                            let updatedCompetition = competitionDetails;\r\n                            updatedCompetition.selectedVideo = uploadedVdo;\r\n                            dispatch(setActiveCompetition(updatedCompetition));\r\n                            setDisableSubmitVdoButton(true);\r\n                        }\r\n                    } else if (state.currentLoginFlow === 'profile-competition' && state.activeVideoForCompetition == uploadedVdo.key) {\r\n                        // if user come from profile page by clicking upload for competition\r\n                        uploadedVdo.isSelected = true;\r\n                        let updatedCompetition = competitionDetails;\r\n                        updatedCompetition.selectedVideo = uploadedVdo;\r\n                        dispatch(setActiveCompetition(updatedCompetition));\r\n                        setVideoData(uploadedVdo);\r\n                        toggleVideoSelect(false);\r\n                    }\r\n                })\r\n                setUserUploadedVideoList(vdoList)\r\n            } else {\r\n                // if user not uploaded any video then set upload new tab active\r\n                setActiveTabInVdoSelection(2);\r\n            }\r\n        });\r\n    }, [ActiveStep]);\r\n\r\n    const setActiveTabInVdoSelection = (tab) => {\r\n        const getCurrentData = 'tab-2';\r\n        const tabsLinks = Array.from(document.querySelectorAll('.tab-links'));\r\n        const tabsBoxes = Array.from(document.querySelectorAll('.js-inner-tab-box'));\r\n        let currentTab = tab == 1 ? 'tab-1' : 'tab-2'\r\n        tabsBoxes.forEach(item => {\r\n            if (item.getAttribute('id') === currentTab) {\r\n                item.classList.add('active');\r\n            } else {\r\n                item.classList.remove('active');\r\n            }\r\n        });\r\n        tabsLinks.forEach(item => {\r\n            if (item?.dataset?.id === currentTab) {\r\n                item.classList.add('active');\r\n            } else {\r\n                item.classList.remove('active');\r\n            }\r\n        });\r\n    }\r\n\r\n    function handleClickOutside(event) {\r\n        if (tncRef && tncRef.current && !tncRef.current.contains(event.target)) {\r\n            setTnC(false);\r\n        }\r\n    }\r\n\r\n    const selectVdo = (e, vdo) => {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        if (vdo && vdo?.key && vdo?.key.length) {\r\n            toggleVideoSelect(false);\r\n            setVideoData(vdo);\r\n        }\r\n        if (competitionDetails.isUserEnrolled && competitionDetails.userSubmitedDetails.vdo.key == vdo.key) {\r\n            setDisableSubmitVdoButton(true);\r\n            let updatedCompetition = competitionDetails;\r\n            delete updatedCompetition.selectedVideo;\r\n            dispatch(setActiveCompetition(updatedCompetition));\r\n        }\r\n        else setDisableSubmitVdoButton(false);\r\n        let updatedVdos = userUploadedVdos;\r\n        updatedVdos.map((item) => {\r\n            if (item.key == vdo.key) {\r\n                item.isSelected = true;\r\n                let updatedCompetition = competitionDetails;\r\n                updatedCompetition.selectedVideo = item;\r\n                dispatch(setActiveCompetition(updatedCompetition));\r\n            }\r\n            else item.isSelected = false;\r\n        })\r\n        setUserUploadedVideoList([...updatedVdos]);\r\n    }\r\n\r\n    function toggleTabination(event) {\r\n        event.stopPropagation();\r\n\r\n        const getCurrentData = event.target.getAttribute('data-id');\r\n\r\n        const tabsLinks = Array.from(document.querySelectorAll('.tab-links'));\r\n        const tabsBoxes = Array.from(document.querySelectorAll('.js-inner-tab-box'));\r\n\r\n        tabsLinks.forEach(item => {\r\n            item.classList.remove('active');\r\n        });\r\n        event.target.classList.add('active');\r\n        tabsBoxes.forEach(item => {\r\n            if (item.getAttribute('id') === getCurrentData) {\r\n                item.classList.add('active');\r\n            } else {\r\n                item.classList.remove('active');\r\n            }\r\n        });\r\n    }\r\n\r\n    const proceedForLogin = () => {\r\n        handleClose();\r\n        dispatch(enableLoginFlow('competition'));\r\n        history.push({\r\n            pathname: '/login',\r\n            state: null\r\n        })\r\n    }\r\n\r\n    async function onChangeFile(event) {\r\n        event.preventDefault();\r\n        var file = event.target.files[0];\r\n        console.log(file);\r\n        if (file) {\r\n            if (file.size > 52428800) {\r\n                alert(\"File is too big!\");\r\n                dispatch(displayNotification({\r\n                    msg: \"File is too big!\",\r\n                    type: NOTIFICATION_ERROR,\r\n                    time: 3000\r\n                }))\r\n                setSelectedVideo({ ...SelectedVideo, file: null });\r\n                uploaderRef.current.click();\r\n            } else {\r\n                setSelectedVideo({ ...SelectedVideo, file: null });\r\n                const reader = new FileReader();\r\n                reader.readAsDataURL(file);\r\n                reader.onload = () => {\r\n                    setSelectedVideo({ ...SelectedVideo, file: reader.result });\r\n                    dispatch(enableLoginFlow('competition-uploadvdo'));\r\n                    // handleClose();\r\n                    // open = false;\r\n                }\r\n                reader.onerror = error => console.error(error);\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleVdoUploadResponse = (value) => {\r\n        if (value) {\r\n            dispatch(enableLoading());\r\n            getUploadedVideosByUserId(loggedInUser.key).subscribe((vdoList) => {\r\n                if (vdoList) {\r\n                    setActiveTabInVdoSelection(1);\r\n                    vdoList.map((uploadedVdo) => {\r\n                        if (competitionDetails.isUserEnrolled) {\r\n                            if (uploadedVdo.key == competitionDetails.userSubmitedDetails.vdo.key) {\r\n                                uploadedVdo.isSelected = true;\r\n                                let updatedCompetition = competitionDetails;\r\n                                updatedCompetition.selectedVideo = uploadedVdo;\r\n                                dispatch(setActiveCompetition(updatedCompetition));\r\n                                setDisableSubmitVdoButton(true);\r\n                            }\r\n                        }\r\n                    })\r\n                    dispatch(disableLoading());\r\n                    setUserUploadedVideoList(vdoList)\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    function acceptTnC(event) {\r\n        const isTncChecked = event.target.checked;\r\n        tncAcceptedValue(isTncChecked);\r\n    }\r\n\r\n    function setActiveVideoActiveStep(step) {\r\n        if (selectedVideoData?.key && selectedVideoData?.key.length) {\r\n            toggleVideoSelect(false);\r\n            setActiveStep(step);\r\n        } else {\r\n            toggleVideoSelect(true);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Modal\r\n                aria-labelledby=\"transition-modal-title\"\r\n                aria-describedby=\"transition-modal-description\"\r\n                className='competition-modal-box'\r\n                open={open}\r\n                onClose={handleClose}\r\n                closeAfterTransition\r\n                BackdropComponent={Backdrop}\r\n                BackdropProps={{\r\n                    timeout: 500,\r\n                }}\r\n            >\r\n                <Fade in={open}>\r\n                    <div className=\"outer-modal-wrap\">\r\n                        {<div className=\"inner-modal-wrap\">\r\n                            {(ActiveStep == 1 || ActiveStep === 2) && <IconButton className=\"close-modal-btn\" onClick={() => { handleClose(); (state.activeCompetition && !state.currentLoginFlow) && dispatch(setActiveCompetition(null)) }}>\r\n                                <CloseIcon />\r\n                            </IconButton>}\r\n                            {(ActiveStep == 3 || ActiveStep == 4) && <IconButton className=\"close-modal-btn back-step-btn\" onClick={() => setActiveStep(ActiveStep - 1)}>\r\n                                <ArrowBackIcon />\r\n                            </IconButton>}\r\n                            <h2 id=\"title\">{competitionDetails.name}</h2>\r\n                            {(ActiveStep == 1 || ActiveStep == 2) && <div>\r\n                                <div className=\"image-contentWrap\">\r\n                                    <div className=\"image-wrap\">\r\n                                        <img src={competitionDetails.img} alt={competitionDetails.name} />\r\n                                    </div>\r\n                                    <div className=\"about-competition-wrap\">\r\n                                        <div className=\"sub-titles\">About Competition</div>\r\n                                        <p id=\"description\">{competitionDetails.desc}</p>\r\n\r\n                                        <div className=\"sub-titles\">Age Category</div>\r\n                                        <ul>\r\n                                            <li>Age 4 to 13 years</li>\r\n                                            <li>Age 14 to 17 years</li>\r\n                                            <li>Age 18 and above</li>\r\n                                        </ul>\r\n\r\n                                        <div className=\"sub-titles\" id=\"fees\">\r\n                                            Fees: <span>{competitionDetails.fee}</span>\r\n                                        </div>\r\n\r\n                                        <div className=\"start-at sub-titles\">\r\n                                            Start At: <span>{competitionDetails.startingDate}</span>\r\n                                        </div>\r\n                                        <div className=\"end-at sub-titles\">\r\n                                            End At: <span>{competitionDetails.endingDate}</span>\r\n                                        </div>\r\n\r\n                                        {competitionDetails && competitionDetails.isUserEnrolled ?\r\n                                            <div className=\"sub-titles\">\r\n                                                You can change/modify video till\r\n                                            <span>{VdoUploadDateLimit}</span></div> :\r\n                                            <div className=\"sub-titles\">\r\n                                                Upload video till <span>{VdoUploadDateLimit}</span></div>}\r\n\r\n                                        <div className=\"sub-titles\">Winners and Prizes Rule</div>\r\n                                        <ul>\r\n                                            <li>Top 3 Winner From Each Category Get Award.</li>\r\n                                            <li>There will be a three category as mention above.</li>\r\n                                            <li>Winner will be based on best performance.</li>\r\n                                        </ul>\r\n\r\n                                        <ul className=\"prices\">\r\n                                            <li className=\"sub-titles price-details\">\r\n                                                First Price : <span>{competitionDetails.prices[0]}</span>\r\n                                            </li>\r\n                                            <li className=\"sub-titles price-details\">\r\n                                                Second Price : <span>{competitionDetails.prices[1]}</span>\r\n                                            </li>\r\n                                            <li className=\"sub-titles price-details\">\r\n                                                Third Price : <span>{competitionDetails.prices[2]}</span>\r\n                                            </li>\r\n                                        </ul>\r\n\r\n                                        <div className=\"sub-titles\">Submission And Result</div>\r\n                                        <ul>\r\n                                            <li>You Have to submit Your video till 15th June</li>\r\n                                            <li>Result will be declared on 16th June At 4 Pm On</li>\r\n                                            <li>Winner will be based on best performance.</li>\r\n                                        </ul>\r\n                                        <h4 className=\"before-submit-message\">Time To Express Your Talent on Our Platform during this Lockdown</h4>\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <div className=\"action-wrap\">\r\n                                    <div className=\"terms-button\" ref={tncRef} onClick={() => setTnC((TnC ? false : true))}>\r\n                                        <input type=\"checkbox\"\r\n                                            checked={isTncAccepted}\r\n                                            title=\"accept terms and condition\" onClick={(e) => acceptTnC(e)} />\r\n                                        Terms &amp; Conditions\r\n                                    {TnC && <div className=\"tool-tip-wrap\">\r\n                                            <div>You may not be able to attend the live session if you are late.</div>\r\n                                            <div>You may face interruptions during the course of the live stream due to internet connectivity issues.</div>\r\n                                            <div>Show details and the artist lineup are subject to change as per the artist’s discretion.</div>\r\n                                            <div> No refunds on purchased tickets are possible, even in case of any rescheduling.</div>\r\n                                        </div>}\r\n                                    </div>\r\n                                    {/* check for user logged in or not */}\r\n                                    {loggedInUser.email && loggedInUser.username ?\r\n                                        <div>\r\n                                            {!competitionDetails?.isUserEnrolled && <Button variant=\"contained\"\r\n                                                disabled={!isTncAccepted}\r\n                                                color=\"primary\"\r\n                                                onClick={() => setActiveStep(3)}\r\n                                            >Select Video</Button>}\r\n                                        </div> :\r\n                                        <div>\r\n                                            {/* <div>To upload video you need to login first</div> */}\r\n                                            <Button variant=\"contained\" color=\"primary\" onClick={() => proceedForLogin()}>Login</Button>\r\n                                        </div>\r\n                                    }\r\n                                    {loggedInUser && true && competitionDetails?.isUserEnrolled && <div className=\"change-video-wrap\">\r\n                                        <div >\r\n                                            Submitted details:\r\n                                        {/* <video width=\"400\" controls>\r\n                                            <source src={competitionDetails.userSubmitedDetails.vdo.url} />\r\n                                        </video> */}\r\n                                            <Button variant=\"contained\" color=\"primary\" onClick={() => setActiveStep(3)}>Change Video</Button>\r\n                                        </div>\r\n                                    </div>}\r\n                                </div>\r\n                            </div>}\r\n                            {ActiveStep === 3 && <div className=\"video-submit-section\">\r\n                                <div className=\"lessons-vdo-wrap\">\r\n                                    <div className=\"tabination-wrap\">\r\n                                        <div className=\"tab-btn-section\">\r\n                                            <button className=\"tab-links active\" data-id=\"tab-1\" onClick={e => toggleTabination(e)}>My video list</button>\r\n                                            <button className=\"tab-links\" data-id=\"tab-2\" onClick={e => toggleTabination(e)}>Upload new</button>\r\n                                        </div>\r\n                                        <div className=\"tab-content-wrap\">\r\n                                            <div id=\"tab-1\" className=\"inner-box js-inner-tab-box list-box active\">\r\n                                                {userUploadedVdos.length != 0 && userUploadedVdos.map((item, index) => {\r\n                                                    return <div className={item.isSelected ? 'vdo-outer selected-vdo' : 'vdo-outer'} key={index} onClick={(e) => selectVdo(e, item)}>\r\n                                                        <div className=\"vdo-wrap\" >\r\n                                                            <img src={item.thumbnail ? item.thumbnail : THUMBNAIL_URL} alt=\"video-url\" />\r\n                                                        </div>\r\n                                                        <div className=\"video-title\">{item.title}</div>\r\n                                                    </div>\r\n                                                })}\r\n                                            </div>\r\n                                            <div id=\"tab-2\" className=\"inner-box js-inner-tab-box new-upload-box\">\r\n                                                <div className=\"input-upload-wrap\">\r\n                                                    <input\r\n                                                        accept=\"video/mp4,video/x-m4v,video/*\"\r\n                                                        ref={uploaderRef}\r\n                                                        onChange={(e) => onChangeFile(e)}\r\n                                                        type=\"file\" id=\"video-upload\" title=\"upload video for competition\" />\r\n                                                    <i className=\"upload-icon\"><FaCloudUploadAlt /></i>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                                {!disableSubmitVdoButton && <Button variant=\"contained\" color=\"primary\" onClick={() => setActiveVideoActiveStep(4)}>Upload</Button>}\r\n                                {\r\n                                    isVideoSelected ?\r\n                                        <p className=\"error_message\">Please select a video from top list or upload a new</p> : ''\r\n                                }\r\n                            </div>}\r\n\r\n                            {ActiveStep === 4 && <div>\r\n                                <EnrollCompetition handleClose={(e) => handleClose(e)} changeSelectedVdo={() => setActiveStep(3)} />\r\n                            </div>}\r\n                            {SelectedVideo?.file && <VideoUploader selectedVdo={SelectedVideo} handleVdoUploadResponse={(e) => handleVdoUploadResponse(e)} />}\r\n                        </div>}\r\n                    </div>\r\n                </Fade>\r\n            </Modal>\r\n        </div>\r\n    )\r\n}","F:\\Toms\\Business-work\\Boogalu\\src\\Constants\\index.js",[],"F:\\Toms\\Business-work\\Boogalu\\src\\Actions\\Notification\\index.js",[],"F:\\Toms\\Business-work\\Boogalu\\src\\Actions\\Utility\\index.js",[],"F:\\Toms\\Business-work\\Boogalu\\src\\Actions\\LoginFlow\\index.js",[],"F:\\Toms\\Business-work\\Boogalu\\src\\Actions\\Loader\\index.js",[],"F:\\Toms\\Business-work\\Boogalu\\src\\Actions\\Competition\\index.js",[],"F:\\Toms\\Business-work\\Boogalu\\src\\Data\\LessonsCategory.js",[],["435","436"],"F:\\Toms\\Business-work\\Boogalu\\src\\Components\\VideoDetails\\index.js",["437","438","439","440"],"import React, { useState, useEffect } from 'react'\r\nimport Modal from '@material-ui/core/Modal';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport Fade from '@material-ui/core/Fade';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport FavoriteBorder from '@material-ui/icons/FavoriteBorder';\r\nimport SendOutlined from '@material-ui/icons/SendOutlined';\r\nimport Favorite from '@material-ui/icons/Favorite';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Vedio from \"../Vedio/Video\";\r\nimport ProfileImage from \"../ProfileImage\";\r\nimport * as $ from 'jquery';\r\n\r\n\r\nfunction Comments({ handleClose, videoObj, handleLikes, handleComments }) {\r\n\r\n    const [openDetailsModal, setOpenDetailsModal] = useState(true);\r\n    const [commentText, setCommentText] = useState('');\r\n\r\n\r\n    const handleCommentClick = () => {\r\n        if (commentText != '') {\r\n            handleComments(commentText)\r\n            setCommentText('')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"subscription-modal-wrap\">\r\n            <Modal\r\n                aria-labelledby=\"transition-modal-title\"\r\n                aria-describedby=\"transition-modal-description\"\r\n                className='subscription-modal-box feeds-comment-modal'\r\n                open={openDetailsModal}\r\n                onClose={() => handleClose(false)}\r\n                closeAfterTransition\r\n                BackdropComponent={Backdrop}\r\n                BackdropProps={{\r\n                    timeout: 500,\r\n                }}\r\n            >\r\n                <Fade in={openDetailsModal}>\r\n                    <div className=\"subscription-inner-modal comment-modal\">\r\n                        <IconButton className=\"close-modal-btn\" onClick={() => handleClose(false)}>\r\n                            <CloseIcon />\r\n                        </IconButton>\r\n\r\n                        <div key={videoObj.key} className=\"feed-card\">\r\n                            <div className=\"username\">\r\n                                <ProfileImage src={videoObj.profileImage} />\r\n                                <span>{videoObj.username}</span>\r\n                            </div>\r\n                            <div>\r\n                                <Vedio vdoObj={videoObj} />\r\n                            </div>\r\n                            <div className=\"video-title-like-wrap\">\r\n                                <div className=\"title\">{videoObj.title}</div>\r\n                                <div className=\"like-comment\">\r\n                                    {videoObj.likes && videoObj.likes.length > 0 && <div className=\"likes-count\">{videoObj.likes.length} Likes</div>}\r\n                                    {!videoObj.isLiked && <FavoriteBorder onClick={() => handleLikes(videoObj, 'liked')} />}\r\n                                    {videoObj.isLiked && <Favorite onClick={() => handleLikes(videoObj, 'unliked')} />}\r\n                                </div>\r\n\r\n                            </div>\r\n                        </div>\r\n\r\n                        {videoObj.comments && videoObj.comments.length > 0 && <div className=\"comments-count\">{videoObj.comments.length} Comments</div>}\r\n\r\n                        <div className=\"comment-outer-wrap\">\r\n                            {videoObj.comments && videoObj.comments.map((comment, index) => {\r\n                                return <div className=\"comment-wrap\" key={index}>\r\n                                    <ProfileImage src={comment.profileImage} />\r\n                                    <span className=\"username\">{comment.username}</span>\r\n                                    <span>{comment.value}</span>\r\n                                </div>\r\n                            })}\r\n                        </div>\r\n\r\n                        <div className=\"commnet-input-wrap\">\r\n                            <TextField id=\"standard-basic\" label=\"Add Comments\" value={commentText} onChange={(e) => setCommentText(e.target.value)} />\r\n                            <SendOutlined onClick={() => handleCommentClick(videoObj, 'liked')} />\r\n                        </div>\r\n                    </div>\r\n                </Fade>\r\n            </Modal>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Comments\r\n","F:\\Toms\\Business-work\\Boogalu\\src\\Services\\firebase.js",[],"F:\\Toms\\Business-work\\Boogalu\\src\\Data\\RegistrationStepData.js",[],"F:\\Toms\\Business-work\\Boogalu\\src\\Services\\Subscription.service.js",[],"F:\\Toms\\Business-work\\Boogalu\\src\\Services\\Email.service.js",[],"F:\\Toms\\Business-work\\Boogalu\\src\\Components\\ProfileImage\\index.js",["441"],"import React from 'react'\r\nimport AccountCircleOutlinedIcon from '@material-ui/icons/AccountCircleOutlined';\r\n\r\nexport default function ProfileImage({ src, type }) {\r\n    return (\r\n        <div className={type == 'large' ? 'profile-image-wrap large-image' : 'profile-image-wrap small-image'}>\r\n            {src ? <img src={src} alt=\"user profile\" /> : <AccountCircleOutlinedIcon />}\r\n        </div>\r\n    )\r\n}","F:\\Toms\\Business-work\\Boogalu\\src\\Database\\index.js",["442"],"import { data } from 'jquery';\r\nimport firebase from '../Services/firebase';\r\nconst database = firebase.firestore();\r\nexport default database;","F:\\Toms\\Business-work\\Boogalu\\src\\Components\\LessonVideoComponent\\index.js",["443","444","445","446","447","448","449","450","451","452","453","454","455","456","457","458","459","460","461","462","463","464"],"import React, { useState, useRef, useEffect } from 'react';\r\nimport VideoThumbnail from '../../videos/lessons/Lesson-Rupesh-thumbnail.jpg';\r\nimport VideoThumbnailBack from '../../videos/lessons/Lesson-Rupesh-thumbnail-back.jpg';\r\nimport FlipCameraAndroidOutlinedIcon from '@material-ui/icons/FlipCameraAndroidOutlined';\r\nimport FlipIcon from '@material-ui/icons/Flip';\r\nimport FullscreenIcon from '@material-ui/icons/Fullscreen';\r\nimport FullscreenExitIcon from '@material-ui/icons/FullscreenExit';\r\n\r\nfunction LessonsVideoContainer({ title, desc, activeVideosList }) {\r\n    const [activeVideoState, setActiveVideoState] = useState('front'); // front,back,front-mirror,back-mirror\r\n    const [fullScreenMode, setFullScreenMode] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const videoFront = document.getElementById(activeVideosList?.fUrl);\r\n        const videoBack = document.getElementById(activeVideosList?.bUrl);\r\n        const videoFrontMirror = document.getElementById(activeVideosList?.fMUrl);\r\n        const videoBackMirror = document.getElementById(activeVideosList?.bMUrl);\r\n        videoBack.muted = false;\r\n        videoFrontMirror.muted = true;\r\n        videoBackMirror.muted = true;\r\n        console.log(activeVideosList)\r\n        // Video Mirror will also come here\r\n    }, []);\r\n\r\n    function triggerFullScreen(e) {\r\n        const fullScreenWrapper = document.getElementById('innerVideoWrap');\r\n        if (!document.fullscreenElement) {\r\n            setFullScreenMode(true);\r\n            if (fullScreenWrapper.requestFullscreen) {\r\n                fullScreenWrapper.requestFullscreen();\r\n            } else if (fullScreenWrapper.webkitRequestFullscreen) { /* Safari */\r\n                fullScreenWrapper.webkitRequestFullscreen();\r\n            } else if (fullScreenWrapper.msRequestFullscreen) { /* IE11 */\r\n                fullScreenWrapper.msRequestFullscreen();\r\n            }\r\n        } else {\r\n            setFullScreenMode(false);\r\n            document.exitFullscreen();\r\n        }\r\n    }\r\n\r\n    function pauseVideo(params) {\r\n        const videoFront = document.getElementById(activeVideosList?.fUrl);\r\n        const videoBack = document.getElementById(activeVideosList?.bUrl);\r\n        const videoFrontMirror = document.getElementById(activeVideosList?.fMUrl);\r\n        const videoBackMirror = document.getElementById(activeVideosList?.bMUrl);\r\n        const currentVideoState = activeVideoState;\r\n        if (currentVideoState == 'front') {\r\n            videoFrontMirror.pause();\r\n            videoBack.pause();\r\n            videoBackMirror.pause();\r\n        } else if (currentVideoState == 'front-mirror') {\r\n            videoFront.pause();\r\n            videoBack.pause();\r\n            videoBackMirror.pause();\r\n        } else if (currentVideoState == 'back') {\r\n            videoFrontMirror.pause();\r\n            videoFront.pause();\r\n            videoBackMirror.pause();\r\n        } else {\r\n            videoFront.pause();\r\n            videoFrontMirror.pause();\r\n            videoBack.pause();\r\n        }\r\n    }\r\n\r\n    function playVideo(params) {\r\n        const videoFront = document.getElementById(activeVideosList?.fUrl);\r\n        const videoBack = document.getElementById(activeVideosList?.bUrl);\r\n        const videoFrontMirror = document.getElementById(activeVideosList?.fMUrl);\r\n        const videoBackMirror = document.getElementById(activeVideosList?.bMUrl);\r\n        if (activeVideoState == 'front') {\r\n            videoFrontMirror.play();\r\n            videoBack.play();\r\n            videoBackMirror.play();\r\n        } else if (activeVideoState == 'front-mirror') {\r\n            videoFront.play();\r\n            videoBack.play();\r\n            videoBackMirror.play();\r\n        } else if (activeVideoState == 'back') {\r\n            videoFrontMirror.play();\r\n            videoFront.play();\r\n            videoBackMirror.play();\r\n        } else {\r\n            videoFront.play();\r\n            videoFrontMirror.play();\r\n            videoBack.play();\r\n        }\r\n    }\r\n\r\n    function flipVideos(event) {\r\n        const videoFront = document.getElementById(activeVideosList?.fUrl);\r\n        const videoBack = document.getElementById(activeVideosList?.bUrl);\r\n        const videoFrontMirror = document.getElementById(activeVideosList?.fMUrl);\r\n        const videoBackMirror = document.getElementById(activeVideosList?.bMUrl);\r\n        if (activeVideoState == 'front' || activeVideoState == 'front-mirror') {\r\n            setActiveVideoState('back');\r\n            videoFront.muted = true;\r\n            videoBack.muted = false;\r\n            videoFrontMirror.muted = true;\r\n            videoBackMirror.muted = true;\r\n        } else {\r\n            setActiveVideoState('front');\r\n            videoFront.muted = false;\r\n            videoBack.muted = true;\r\n            videoFrontMirror.muted = true;\r\n            videoBackMirror.muted = true;\r\n        }\r\n    }\r\n\r\n    function mirrorVideos(event) {\r\n        const videoFront = document.getElementById(activeVideosList?.fUrl);\r\n        const videoBack = document.getElementById(activeVideosList?.bUrl);\r\n        const videoFrontMirror = document.getElementById(activeVideosList?.fMUrl);\r\n        const videoBackMirror = document.getElementById(activeVideosList?.bMUrl);\r\n        if (activeVideoState == 'front') {\r\n            setActiveVideoState('front-mirror');\r\n            videoFront.muted = true;\r\n            videoBack.muted = true;\r\n            videoFrontMirror.muted = false;\r\n            videoBackMirror.muted = true;\r\n        } else if (activeVideoState == 'front-mirror') {\r\n            setActiveVideoState('front');\r\n            videoFront.muted = false;\r\n            videoBack.muted = true;\r\n            videoFrontMirror.muted = true;\r\n            videoBackMirror.muted = true;\r\n        } else if (activeVideoState == 'back') {\r\n            setActiveVideoState('back-mirror');\r\n            videoFront.muted = true;\r\n            videoBack.muted = true;\r\n            videoFrontMirror.muted = true;\r\n            videoBackMirror.muted = false;\r\n        } else {\r\n            setActiveVideoState('back');\r\n            videoFront.muted = true;\r\n            videoBack.muted = false;\r\n            videoFrontMirror.muted = true;\r\n            videoBackMirror.muted = true;\r\n        }\r\n    }\r\n    // This seeking function is to sync all the videos on a specific time\r\n    // when user use video slider to go ahead or back\r\n    function onVideoSeek(event, status) {\r\n        if (activeVideoState == status) {\r\n            const videoFront = document.getElementById(activeVideosList?.fUrl);\r\n            const videoBack = document.getElementById(activeVideosList?.bUrl);\r\n            const videoFrontMirror = document.getElementById(activeVideosList?.fMUrl);\r\n            const videoBackMirror = document.getElementById(activeVideosList?.bMUrl);\r\n            if (activeVideoState == 'front') {\r\n                videoBack.currentTime = videoFront.currentTime;\r\n                videoFrontMirror.currentTime = videoFront.currentTime;\r\n                videoBackMirror.currentTime = videoFront.currentTime;\r\n            } else if (activeVideoState == 'front-mirror') {\r\n                videoFront.currentTime = videoFrontMirror.currentTime;\r\n                videoBack.currentTime = videoFrontMirror.currentTime;\r\n                videoBackMirror.currentTime = videoFrontMirror.currentTime;\r\n            } else if (activeVideoState == 'back') {\r\n                videoFront.currentTime = videoBack.currentTime;\r\n                videoFrontMirror.currentTime = videoBack.currentTime;\r\n                videoBackMirror.currentTime = videoBack.currentTime;\r\n            } else {\r\n                videoFront.currentTime = videoBackMirror.currentTime;\r\n                videoBack.currentTime = videoBackMirror.currentTime;\r\n                videoFrontMirror.currentTime = videoBackMirror.currentTime;\r\n            }\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"video-component-wrap\">\r\n            <h4>{title}</h4>\r\n            <p className=\"desc\">{desc}</p>\r\n            <div className=\"inner-video-wrap\" id=\"innerVideoWrap\">\r\n                <div className=\"actions\">\r\n                    <FlipCameraAndroidOutlinedIcon title=\"Flip video\" className=\"vdo-controlls\" variant=\"contained\" type=\"submit\" onClick={(e) => flipVideos(e)} />\r\n                    <FlipIcon title=\"Mirror video\" className=\"vdo-controlls\" variant=\"contained\" type=\"submit\" onClick={(e) => mirrorVideos(e)} />\r\n                    {fullScreenMode ?\r\n                        <FullscreenExitIcon title=\"Fullscreen mode\" className=\"vdo-controlls\" variant=\"contained\" type=\"submit\" onClick={(e) => triggerFullScreen(e)} />\r\n                        :\r\n                        <FullscreenIcon  title=\"Exit fullscreen\" className=\"vdo-controlls\" variant=\"contained\" type=\"submit\" onClick={(e) => triggerFullScreen(e)} />\r\n                    }\r\n                </div>\r\n                <video id={activeVideosList?.fUrl} className={(activeVideoState == 'front') ? 'active' : ''} onPause={(e) => pauseVideo(e)} onPlay={(e) => playVideo(e)} onSeeked={(e) => onVideoSeek(e, 'front')} poster={VideoThumbnail} controls>\r\n                    <source src={activeVideosList?.fMUrl} type=\"video/mp4\" />\r\n                </video>\r\n                <video id={activeVideosList?.fMUrl} className={(activeVideoState == 'front-mirror') ? 'active' : ''} onPause={(e) => pauseVideo(e)} onPlay={(e) => playVideo(e)} onSeeked={(e) => onVideoSeek(e, 'front-mirror')} poster={VideoThumbnail} controls>\r\n                    <source src={activeVideosList?.fMUrl} type=\"video/mp4\" />\r\n                </video>\r\n                <video id={activeVideosList?.bUrl} className={(activeVideoState == 'back') ? 'active' : ''} onPause={(e) => pauseVideo(e)} onPlay={(e) => playVideo(e)} onSeeked={(e) => onVideoSeek(e, 'back')} poster={VideoThumbnailBack} controls>\r\n                    <source src={activeVideosList?.bUrl} type=\"video/mp4\" />\r\n                </video>\r\n                <video id={activeVideosList?.bMUrl} className={(activeVideoState == 'back-mirror') ? 'active' : ''} onPause={(e) => pauseVideo(e)} onPlay={(e) => playVideo(e)} onSeeked={(e) => onVideoSeek(e, 'back-mirror')} poster={VideoThumbnailBack} controls>\r\n                    <source src={activeVideosList?.bMUrl} type=\"video/mp4\" />\r\n                </video>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default LessonsVideoContainer;","F:\\Toms\\Business-work\\Boogalu\\src\\Components\\BuySubscription\\index.js",["465","466","467","468","469","470"],"import React, { useRef, useState, useEffect } from 'react'\r\nimport Button from '@material-ui/core/Button';\r\nimport { useStoreConsumer } from '../../Providers/StateProvider';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { formatDate } from \"../../Services/Utils\";\r\nimport { disableLoginFlow, enableLoginFlow } from \"../../Actions/LoginFlow\";\r\nimport { saveCompetition } from \"../../Services/EnrollCompetition.service\";\r\nimport { enableLoading, disableLoading } from \"../../Actions/Loader\";\r\n// modal imports\r\nimport Modal from '@material-ui/core/Modal';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport Fade from '@material-ui/core/Fade';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport IconButton from '@material-ui/core/IconButton';\r\n\r\nexport default function BuySubsription({ handleClose, activeStep, alreadySubscribed }) {\r\n    const history = useHistory();\r\n    const { state, dispatch } = useStoreConsumer();\r\n    const loggedInUser = state.loggedInUser;\r\n    const [openDetailsModal, setOpenDetailsModal] = useState(true);\r\n    const subscriptionDetails = state.activeSubscription;\r\n    const [subsciptionValidity, setsubsciptionValidity] = useState(null);\r\n    const competitionDetails = state.activeCompetition;\r\n\r\n    useEffect(() => {\r\n        let validUpto = new Date();\r\n        new Date(validUpto.setDate(validUpto.getDate() + 30));\r\n        let displayDate = formatDate(validUpto, 3);\r\n        setsubsciptionValidity(displayDate);\r\n    }, [subscriptionDetails])\r\n\r\n    const handleModalClose = () => {\r\n        setOpenDetailsModal(false);\r\n        dispatch(disableLoginFlow());\r\n        handleClose();\r\n    }\r\n\r\n    const submitForCompetition = () => {\r\n        dispatch(enableLoading());\r\n        const competitionObj = {\r\n            compId: competitionDetails.key,\r\n            compName: competitionDetails.name,\r\n            compImg: competitionDetails.img,\r\n            userId: loggedInUser.key,\r\n            vdo: {\r\n                key: competitionDetails.selectedVideo.key,\r\n                title: competitionDetails.selectedVideo.title,\r\n                thumbnail: competitionDetails.selectedVideo.thumbnail,\r\n                url: competitionDetails.selectedVideo.url,\r\n                desc: competitionDetails.selectedVideo.desc,\r\n            },\r\n            ageGroup: competitionDetails.ageGroup,\r\n            status: 'Submited'\r\n        }\r\n        console.log(competitionObj)\r\n        saveCompetition(competitionObj).subscribe((response) => {\r\n            dispatch(disableLoading());\r\n            console.log('vdo uploaded for competition suceess');\r\n            dispatch(enableLoginFlow('profile-competition'));\r\n            history.push('/profile');\r\n        })\r\n    }\r\n\r\n    const proceedForCompetition = () => {\r\n        if (state.currentLoginFlow == 'competition-subscription') {\r\n            submitForCompetition();\r\n        } else history.push('/competition');\r\n    }\r\n    const proceedForPayment = () => {\r\n        var params = \"?phone=\" + loggedInUser.phone + \"&orderId=\" + subscriptionDetails.key + \"&amount=\" + subscriptionDetails.amount + \"&uId=\" + loggedInUser.uId + \"&email=\" + loggedInUser.email;\r\n        // window.open('http://localhost:5001/boogalusite/us-central1/payment' + params, '_self');\r\n        window.open('https://us-central1-boogalusite.cloudfunctions.net/payment' + params, '_self');\r\n    }\r\n\r\n    return (\r\n        <div className=\"subscription-modal-wrap\">\r\n            <Modal\r\n                aria-labelledby=\"transition-modal-title\"\r\n                aria-describedby=\"transition-modal-description\"\r\n                className='subscription-modal-box'\r\n                open={openDetailsModal}\r\n                onClose={() => handleModalClose(false)}\r\n                closeAfterTransition\r\n                BackdropComponent={Backdrop}\r\n                BackdropProps={{\r\n                    timeout: 500,\r\n                }}\r\n            >\r\n                <Fade in={openDetailsModal}>\r\n                    <div className=\"subscription-inner-modal\">\r\n                        <IconButton className=\"close-modal-btn\" onClick={() => handleModalClose(false)}>\r\n                            <CloseIcon />\r\n                        </IconButton>\r\n                        <h3>Boogalu Subscription</h3>\r\n                        {activeStep == 1 && <div>\r\n                            <div className=\"subs-details-wrap\">\r\n                                <p>\r\n                                    Welcome, we are glad to see you. Now, you can subscribe to our application, and\r\n                                    get a chance to participate in any competition for one month.\r\n                                </p>\r\n                                <p> Just {subscriptionDetails.amount}/{subscriptionDetails.plans}</p>\r\n                                {/* <div>{subscriptionDetails.name}</div> */}\r\n                                {/* <div>{subscriptionDetails.desc}</div> */}\r\n                                {/* <div>{subscriptionDetails.amount} / {subscriptionDetails.plans}</div> */}\r\n                                {/* <div>Valid Upto- {subsciptionValidity}</div> */}\r\n                            </div>\r\n                            {alreadySubscribed ? <Button variant=\"contained\" color=\"secondary\" onClick={(e) => proceedForCompetition()}>Continue</Button> : <Button variant=\"contained\" color=\"secondary\" onClick={(e) => proceedForPayment(e)}>Subscribe</Button>}\r\n                        </div>}\r\n                        {activeStep == 2 && <div>\r\n                            <h3>Subscription Payment Recieved Successfully</h3>\r\n                            <Button variant=\"contained\" color=\"secondary\" onClick={(e) => proceedForCompetition()}>Continue to competition</Button>\r\n                        </div>}\r\n                        {activeStep == 3 && <div>\r\n                            <h3>Subscription Payment Fail</h3>\r\n                            <Button variant=\"contained\" color=\"secondary\" onClick={(e) => proceedForPayment(e)}>Retry</Button>\r\n                        </div>}\r\n                    </div>\r\n                </Fade>\r\n            </Modal>\r\n        </div>\r\n    )\r\n}","F:\\Toms\\Business-work\\Boogalu\\src\\Actions\\Subscription\\index.js",[],"F:\\Toms\\Business-work\\Boogalu\\src\\Components\\EnrollCompetition\\index.js",["471","472"],"import React, { useState, useEffect } from 'react'\r\nimport ArrowRightSharpIcon from '@material-ui/icons/ArrowRightSharp';\r\nimport Button from '@material-ui/core/Button';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport { THUMBNAIL_URL } from '../../Constants';\r\nimport { useStoreConsumer } from '../../Providers/StateProvider';\r\nimport { saveCompetition, updateCompetition } from \"../../Services/EnrollCompetition.service\";\r\nimport { enableLoginFlow } from \"../../Actions/LoginFlow\";\r\nimport { setActiveCompetition } from \"../../Actions/Competition\";\r\nimport { enableLoading, disableLoading } from \"../../Actions/Loader\";\r\nimport { NOTIFICATION_ERROR, ADMIN_EMAIL_STAGING } from \"../../Constants\";\r\nimport { displayNotification } from \"../../Actions/Notification\";\r\nimport { sendEmail } from \"../../Services/Email.service\";\r\nimport { formatDate, formatTime } from \"../../Services/Utils\";\r\n\r\nfunction EnrollCompetition({ handleClose, changeSelectedVdo }) {\r\n\r\n    const history = useHistory();\r\n    const { state, dispatch } = useStoreConsumer();\r\n    const loggedInUser = state.loggedInUser;\r\n    const competitionDetails = state.activeCompetition;\r\n    const SelectedVdo = competitionDetails.selectedVideo;\r\n    const [IsUserSubscribed, setIsUserSubscribed] = useState(null);\r\n\r\n    useEffect(() => {\r\n        if (loggedInUser.subscriptions) {\r\n            let isSubscribed = loggedInUser.subscriptions.filter((data) => data.type === 'competition-enrollment');\r\n            if (isSubscribed.length) setIsUserSubscribed(true);\r\n            else setIsUserSubscribed(false);\r\n        } else setIsUserSubscribed(false);\r\n    }, [])\r\n\r\n    const onAgeGroupChange = (groupValue) => {\r\n        let compData = { ...competitionDetails };\r\n        compData.ageGroup = groupValue;\r\n        dispatch(setActiveCompetition(compData));\r\n    }\r\n\r\n    const sendEmailToAdmin = () => {\r\n        let emailBody = `<div>\r\n            <h6 style=\"font-size: 17px;margin-bottom: 26px;\">New Video Uploaded for competition ${competitionDetails.name}</h6>\r\n            <h4>User details -</h4>\r\n            <h6>${loggedInUser.name}</h6>\r\n            <h6>${loggedInUser.email}</h6>\r\n            <h6>${loggedInUser.phone}</h6>\r\n            <a href=${competitionDetails.selectedVideo.url} >Clik here to check uploaded video</a>\r\n            </div>`;\r\n        let payload = {\r\n            mailTo: ADMIN_EMAIL_STAGING,\r\n            title: 'New video submited for competition',\r\n            content: emailBody\r\n        }\r\n        sendEmail(payload).subscribe((res) => {\r\n            if (!('error' in res)) {\r\n                console.log('Admin Email Send Successfully.');\r\n            } else console.log('Admin Email Send Failed.');\r\n        })\r\n    }\r\n\r\n    const sendEmailToUser = () => {\r\n        let vdoUploadUpto = new Date(competitionDetails.startAt);\r\n        new Date(vdoUploadUpto.setDate(vdoUploadUpto.getDate() + 30));\r\n        let displayDate = formatDate(vdoUploadUpto, 3) + \" \" + formatTime(vdoUploadUpto);\r\n\r\n        let emailBody = `<div>\r\n        <p>Hi ${loggedInUser.name} you have enrolled in our  ${competitionDetails.name}, now you can upload/change videos till ${displayDate}. </p>\r\n        <h4> Upload your best performance video and be ready for exciting prizes</h4>\r\n        <a href=${competitionDetails.selectedVideo.url} >Clik here to check uploaded video</a>\r\n            </div>`;\r\n        let payload = {\r\n            mailTo: loggedInUser.email,\r\n            title: 'Your video submited for competition',\r\n            content: emailBody\r\n        }\r\n        sendEmail(payload).subscribe((res) => {\r\n            if (!('error' in res)) {\r\n                console.log('User Email Send Successfully.');\r\n            } else console.log('User Email Send Failed.');\r\n        })\r\n    }\r\n\r\n    const submitForCompetition = () => {\r\n        dispatch(enableLoading());\r\n        const competitionObj = {\r\n            compId: competitionDetails.key,\r\n            compName: competitionDetails.name,\r\n            compImg: competitionDetails.img,\r\n            userId: loggedInUser.key,\r\n            vdo: {\r\n                key: competitionDetails.selectedVideo.key,\r\n                title: competitionDetails.selectedVideo.title,\r\n                thumbnail: competitionDetails.selectedVideo.thumbnail,\r\n                url: competitionDetails.selectedVideo.url,\r\n                desc: competitionDetails.selectedVideo.desc,\r\n            },\r\n            ageGroup: competitionDetails.ageGroup,\r\n            status: 'Submited'\r\n        }\r\n        console.log(competitionObj)\r\n        if (competitionDetails.isUserEnrolled) {\r\n            updateCompetition(competitionDetails.userSubmitedDetails.key, competitionObj).subscribe((response) => {\r\n                dispatch(disableLoading());\r\n                console.log('vdo updated for competition suceess');\r\n                history.push('/profile');\r\n            })\r\n        } else {\r\n            saveCompetition(competitionObj).subscribe((response) => {\r\n                dispatch(disableLoading());\r\n                sendEmailToAdmin();\r\n                sendEmailToUser();\r\n                console.log('vdo uploaded for competition suceess');\r\n                history.push('/profile');\r\n            })\r\n        }\r\n\r\n        // handleClose();\r\n    }\r\n\r\n    const proceedForSubscription = () => {\r\n        if (competitionDetails.ageGroup) {\r\n            handleClose();\r\n            dispatch(enableLoginFlow('competition-subscription'));\r\n            history.push({\r\n                pathname: '/subscription',\r\n                state: null\r\n            })\r\n        } else {\r\n            dispatch(displayNotification({\r\n                msg: \"Please the age group!\",\r\n                type: NOTIFICATION_ERROR,\r\n                time: 3000\r\n            }))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"final-enrollment-wrap\">\r\n            <h2 id=\"title\">Basic Details for Enrollment</h2>\r\n            {/* <img src={competitionDetails.img} alt={competitionDetails.name} style={{ width: '20%' }} /> */}\r\n            {/* <p id=\"description\">{competitionDetails.desc}</p> */}\r\n            <div className=\"userdata\">\r\n                <div className=\"user-info\"><label>Name:</label><span>{loggedInUser.name}</span></div>\r\n                <div className=\"user-info\"><label>Phone:</label><span>{loggedInUser.phone}</span></div>\r\n                <div className=\"user-info\"><label>Email:</label><span>{loggedInUser.email}</span></div>\r\n                <div className=\"user-info\"><label>Gender:</label><span>{loggedInUser.gender}</span></div>\r\n            </div>\r\n            {!competitionDetails?.isUserEnrolled ? <div className=\"age-group-dropdown\">\r\n                <FormControl variant=\"outlined\" className=\"input-field\">\r\n                    <InputLabel id=\"select-outlined-label\">Select Age Group</InputLabel>\r\n                    <Select\r\n                        labelId=\"select-outlined-label\"\r\n                        id=\"select-outlined\"\r\n                        value={competitionDetails.ageGroup}\r\n                        onChange={(e) => onAgeGroupChange(e.target.value)}\r\n                        label=\"Select Age Group\"\r\n                    >\r\n                        <MenuItem value=\"Age 4 to 13 years\">Age 4 to 13 years</MenuItem>\r\n                        <MenuItem value=\"Age 14 to 17 years\">Age 14 to 17 years</MenuItem>\r\n                        <MenuItem value=\"Age 18 and above\">Age 18 and above</MenuItem>\r\n                    </Select>\r\n                </FormControl>\r\n            </div>\r\n                :\r\n                <div>Submited age group - {competitionDetails.userSubmitedDetails.ageGroup}</div>\r\n            }\r\n            {SelectedVdo && <div className=\"selected-vdo\">\r\n                <div className=\"sub-title\">Selected video for competition</div>\r\n                <div className=\"change-link\" onClick={() => changeSelectedVdo()}>Change</div>\r\n                <div className=\"vdo-wrap\" >\r\n                    <img src={SelectedVdo.thumbnail ? SelectedVdo.thumbnail : THUMBNAIL_URL} style={{ width: \"50%\" }} />\r\n                    <div>{SelectedVdo.title}</div>\r\n                </div>\r\n            </div>}\r\n            {/* check for user subscribed or not */}\r\n            {IsUserSubscribed ?\r\n                <div>\r\n                    {!competitionDetails?.isUserEnrolled ? <Button variant=\"contained\" color=\"primary\" onClick={() => submitForCompetition()}>Complete Enrollment <ArrowRightSharpIcon /></Button>\r\n                        : <Button variant=\"contained\" color=\"primary\" onClick={() => submitForCompetition()}>Update Competition<ArrowRightSharpIcon /></Button>\r\n                    }\r\n                </div> :\r\n                <div>\r\n                    {/* <div>To upload video you need to subscribe</div> */}\r\n                    <Button variant=\"contained\" color=\"primary\" onClick={() => proceedForSubscription()}>Continue</Button>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default EnrollCompetition\r\n","F:\\Toms\\Business-work\\Boogalu\\src\\Data\\Dummy.js",[],{"ruleId":"473","replacedBy":"474"},{"ruleId":"475","replacedBy":"476"},{"ruleId":"477","severity":1,"message":"478","line":5,"column":7,"nodeType":"479","messageId":"480","endLine":5,"endColumn":24},{"ruleId":"477","severity":1,"message":"481","line":20,"column":21,"nodeType":"479","messageId":"480","endLine":20,"endColumn":31},{"ruleId":"477","severity":1,"message":"482","line":25,"column":33,"nodeType":"479","messageId":"480","endLine":25,"endColumn":51},{"ruleId":"483","severity":1,"message":"484","line":40,"column":8,"nodeType":"485","endLine":40,"endColumn":28,"suggestions":"486"},{"ruleId":"483","severity":1,"message":"487","line":56,"column":8,"nodeType":"485","endLine":56,"endColumn":10,"suggestions":"488"},{"ruleId":"489","severity":1,"message":"490","line":78,"column":28,"nodeType":"491","messageId":"492","endLine":78,"endColumn":30},{"ruleId":"493","severity":1,"message":"494","line":172,"column":9,"nodeType":"495","messageId":"496","endLine":245,"endColumn":10},{"ruleId":"489","severity":1,"message":"497","line":195,"column":52,"nodeType":"491","messageId":"492","endLine":195,"endColumn":54},{"ruleId":"489","severity":1,"message":"497","line":196,"column":57,"nodeType":"491","messageId":"492","endLine":196,"endColumn":59},{"ruleId":"489","severity":1,"message":"497","line":197,"column":57,"nodeType":"491","messageId":"492","endLine":197,"endColumn":59},{"ruleId":"489","severity":1,"message":"497","line":228,"column":52,"nodeType":"491","messageId":"492","endLine":228,"endColumn":54},{"ruleId":"489","severity":1,"message":"497","line":229,"column":57,"nodeType":"491","messageId":"492","endLine":229,"endColumn":59},{"ruleId":"489","severity":1,"message":"497","line":230,"column":57,"nodeType":"491","messageId":"492","endLine":230,"endColumn":59},{"ruleId":"498","severity":1,"message":"499","line":257,"column":25,"nodeType":"500","endLine":257,"endColumn":102},{"ruleId":"501","severity":1,"message":"502","line":347,"column":21,"nodeType":"500","endLine":347,"endColumn":85},{"ruleId":"503","severity":1,"message":"504","line":360,"column":17,"nodeType":"500","endLine":360,"endColumn":36},{"ruleId":"477","severity":1,"message":"505","line":6,"column":8,"nodeType":"479","messageId":"480","endLine":6,"endColumn":34},{"ruleId":"477","severity":1,"message":"506","line":15,"column":8,"nodeType":"479","messageId":"480","endLine":15,"endColumn":23},{"ruleId":"477","severity":1,"message":"507","line":16,"column":8,"nodeType":"479","messageId":"480","endLine":16,"endColumn":24},{"ruleId":"477","severity":1,"message":"508","line":17,"column":8,"nodeType":"479","messageId":"480","endLine":17,"endColumn":23},{"ruleId":"489","severity":1,"message":"497","line":96,"column":36,"nodeType":"491","messageId":"492","endLine":96,"endColumn":38},{"ruleId":"483","severity":1,"message":"509","line":106,"column":8,"nodeType":"485","endLine":106,"endColumn":10,"suggestions":"510"},{"ruleId":"489","severity":1,"message":"490","line":126,"column":29,"nodeType":"491","messageId":"492","endLine":126,"endColumn":31},{"ruleId":"511","severity":1,"message":"512","line":131,"column":46,"nodeType":"513","messageId":"514","endLine":131,"endColumn":48},{"ruleId":"511","severity":1,"message":"512","line":133,"column":56,"nodeType":"513","messageId":"514","endLine":133,"endColumn":58},{"ruleId":"489","severity":1,"message":"497","line":134,"column":87,"nodeType":"491","messageId":"492","endLine":134,"endColumn":89},{"ruleId":"489","severity":1,"message":"490","line":135,"column":53,"nodeType":"491","messageId":"492","endLine":135,"endColumn":55},{"ruleId":"511","severity":1,"message":"512","line":142,"column":62,"nodeType":"513","messageId":"514","endLine":142,"endColumn":64},{"ruleId":"489","severity":1,"message":"497","line":143,"column":87,"nodeType":"491","messageId":"492","endLine":143,"endColumn":89},{"ruleId":"489","severity":1,"message":"490","line":144,"column":53,"nodeType":"491","messageId":"492","endLine":144,"endColumn":55},{"ruleId":"483","severity":1,"message":"515","line":157,"column":8,"nodeType":"485","endLine":157,"endColumn":10,"suggestions":"516"},{"ruleId":"489","severity":1,"message":"497","line":160,"column":37,"nodeType":"491","messageId":"492","endLine":160,"endColumn":39},{"ruleId":"483","severity":1,"message":"515","line":163,"column":8,"nodeType":"485","endLine":163,"endColumn":15,"suggestions":"517"},{"ruleId":"489","severity":1,"message":"497","line":201,"column":22,"nodeType":"491","messageId":"492","endLine":201,"endColumn":24},{"ruleId":"489","severity":1,"message":"497","line":201,"column":56,"nodeType":"491","messageId":"492","endLine":201,"endColumn":58},{"ruleId":"511","severity":1,"message":"512","line":206,"column":38,"nodeType":"513","messageId":"514","endLine":206,"endColumn":40},{"ruleId":"489","severity":1,"message":"497","line":208,"column":81,"nodeType":"491","messageId":"492","endLine":208,"endColumn":83},{"ruleId":"489","severity":1,"message":"490","line":209,"column":48,"nodeType":"491","messageId":"492","endLine":209,"endColumn":50},{"ruleId":"489","severity":1,"message":"497","line":225,"column":72,"nodeType":"491","messageId":"492","endLine":225,"endColumn":74},{"ruleId":"511","severity":1,"message":"512","line":239,"column":38,"nodeType":"513","messageId":"514","endLine":239,"endColumn":40},{"ruleId":"489","severity":1,"message":"497","line":240,"column":70,"nodeType":"491","messageId":"492","endLine":240,"endColumn":72},{"ruleId":"489","severity":1,"message":"490","line":241,"column":37,"nodeType":"491","messageId":"492","endLine":241,"endColumn":39},{"ruleId":"511","severity":1,"message":"512","line":248,"column":44,"nodeType":"513","messageId":"514","endLine":248,"endColumn":46},{"ruleId":"489","severity":1,"message":"497","line":249,"column":70,"nodeType":"491","messageId":"492","endLine":249,"endColumn":72},{"ruleId":"489","severity":1,"message":"490","line":250,"column":37,"nodeType":"491","messageId":"492","endLine":250,"endColumn":39},{"ruleId":"489","severity":1,"message":"497","line":260,"column":20,"nodeType":"491","messageId":"492","endLine":260,"endColumn":22},{"ruleId":"489","severity":1,"message":"490","line":267,"column":67,"nodeType":"491","messageId":"492","endLine":267,"endColumn":69},{"ruleId":"511","severity":1,"message":"512","line":270,"column":38,"nodeType":"513","messageId":"514","endLine":270,"endColumn":40},{"ruleId":"511","severity":1,"message":"512","line":273,"column":37,"nodeType":"513","messageId":"514","endLine":273,"endColumn":39},{"ruleId":"489","severity":1,"message":"497","line":274,"column":30,"nodeType":"491","messageId":"492","endLine":274,"endColumn":32},{"ruleId":"489","severity":1,"message":"497","line":279,"column":73,"nodeType":"491","messageId":"492","endLine":279,"endColumn":75},{"ruleId":"511","severity":1,"message":"512","line":298,"column":44,"nodeType":"513","messageId":"514","endLine":298,"endColumn":46},{"ruleId":"511","severity":1,"message":"512","line":301,"column":37,"nodeType":"513","messageId":"514","endLine":301,"endColumn":39},{"ruleId":"489","severity":1,"message":"497","line":302,"column":30,"nodeType":"491","messageId":"492","endLine":302,"endColumn":32},{"ruleId":"503","severity":1,"message":"504","line":352,"column":29,"nodeType":"500","endLine":352,"endColumn":68},{"ruleId":"489","severity":1,"message":"497","line":442,"column":91,"nodeType":"491","messageId":"492","endLine":442,"endColumn":93},{"ruleId":"503","severity":1,"message":"504","line":490,"column":41,"nodeType":"500","endLine":490,"endColumn":74},{"ruleId":"477","severity":1,"message":"518","line":2,"column":60,"nodeType":"479","messageId":"480","endLine":2,"endColumn":72},{"ruleId":"477","severity":1,"message":"482","line":11,"column":33,"nodeType":"479","messageId":"480","endLine":11,"endColumn":51},{"ruleId":"477","severity":1,"message":"519","line":30,"column":25,"nodeType":"479","messageId":"480","endLine":30,"endColumn":39},{"ruleId":"483","severity":1,"message":"520","line":104,"column":8,"nodeType":"485","endLine":104,"endColumn":18,"suggestions":"521"},{"ruleId":"477","severity":1,"message":"522","line":107,"column":15,"nodeType":"479","messageId":"480","endLine":107,"endColumn":32},{"ruleId":"489","severity":1,"message":"497","line":124,"column":40,"nodeType":"491","messageId":"492","endLine":124,"endColumn":42},{"ruleId":"523","severity":1,"message":"524","line":124,"column":58,"nodeType":"525","messageId":"526","endLine":124,"endColumn":60},{"ruleId":"523","severity":1,"message":"524","line":124,"column":95,"nodeType":"525","messageId":"526","endLine":124,"endColumn":97},{"ruleId":"498","severity":1,"message":"527","line":258,"column":45,"nodeType":"500","endLine":258,"endColumn":86},{"ruleId":"503","severity":1,"message":"504","line":271,"column":33,"nodeType":"500","endLine":271,"endColumn":141},{"ruleId":"498","severity":1,"message":"527","line":284,"column":25,"nodeType":"500","endLine":284,"endColumn":89},{"ruleId":"489","severity":1,"message":"497","line":293,"column":130,"nodeType":"491","messageId":"492","endLine":293,"endColumn":132},{"ruleId":"489","severity":1,"message":"497","line":301,"column":121,"nodeType":"491","messageId":"492","endLine":301,"endColumn":123},{"ruleId":"489","severity":1,"message":"497","line":307,"column":121,"nodeType":"491","messageId":"492","endLine":307,"endColumn":123},{"ruleId":"489","severity":1,"message":"497","line":313,"column":125,"nodeType":"491","messageId":"492","endLine":313,"endColumn":127},{"ruleId":"477","severity":1,"message":"528","line":9,"column":8,"nodeType":"479","messageId":"480","endLine":9,"endColumn":21},{"ruleId":"477","severity":1,"message":"529","line":59,"column":11,"nodeType":"479","messageId":"480","endLine":59,"endColumn":24},{"ruleId":"477","severity":1,"message":"530","line":1,"column":17,"nodeType":"479","messageId":"480","endLine":1,"endColumn":25},{"ruleId":"483","severity":1,"message":"531","line":26,"column":8,"nodeType":"485","endLine":26,"endColumn":10,"suggestions":"532"},{"ruleId":"533","severity":1,"message":"534","line":61,"column":66,"nodeType":"535","endLine":61,"endColumn":81},{"ruleId":"498","severity":1,"message":"499","line":78,"column":29,"nodeType":"500","endLine":78,"endColumn":83},{"ruleId":"533","severity":1,"message":"534","line":84,"column":114,"nodeType":"535","endLine":84,"endColumn":129},{"ruleId":"533","severity":1,"message":"534","line":90,"column":110,"nodeType":"535","endLine":90,"endColumn":125},{"ruleId":"533","severity":1,"message":"534","line":96,"column":109,"nodeType":"535","endLine":96,"endColumn":124},{"ruleId":"477","severity":1,"message":"536","line":13,"column":10,"nodeType":"479","messageId":"480","endLine":13,"endColumn":18},{"ruleId":"477","severity":1,"message":"537","line":22,"column":10,"nodeType":"479","messageId":"480","endLine":22,"endColumn":31},{"ruleId":"477","severity":1,"message":"482","line":22,"column":33,"nodeType":"479","messageId":"480","endLine":22,"endColumn":51},{"ruleId":"477","severity":1,"message":"538","line":22,"column":81,"nodeType":"479","messageId":"480","endLine":22,"endColumn":109},{"ruleId":"489","severity":1,"message":"497","line":31,"column":66,"nodeType":"491","messageId":"492","endLine":31,"endColumn":68},{"ruleId":"489","severity":1,"message":"497","line":31,"column":113,"nodeType":"491","messageId":"492","endLine":31,"endColumn":115},{"ruleId":"483","severity":1,"message":"539","line":62,"column":8,"nodeType":"485","endLine":62,"endColumn":10,"suggestions":"540"},{"ruleId":"489","severity":1,"message":"490","line":65,"column":34,"nodeType":"491","messageId":"492","endLine":65,"endColumn":36},{"ruleId":"503","severity":1,"message":"504","line":121,"column":25,"nodeType":"500","endLine":121,"endColumn":111},{"ruleId":"477","severity":1,"message":"541","line":7,"column":13,"nodeType":"479","messageId":"480","endLine":7,"endColumn":14},{"ruleId":"477","severity":1,"message":"542","line":11,"column":20,"nodeType":"479","messageId":"480","endLine":11,"endColumn":28},{"ruleId":"477","severity":1,"message":"543","line":15,"column":12,"nodeType":"479","messageId":"480","endLine":15,"endColumn":20},{"ruleId":"511","severity":1,"message":"512","line":22,"column":51,"nodeType":"513","messageId":"514","endLine":22,"endColumn":53},{"ruleId":"489","severity":1,"message":"497","line":23,"column":104,"nodeType":"491","messageId":"492","endLine":23,"endColumn":106},{"ruleId":"489","severity":1,"message":"497","line":61,"column":36,"nodeType":"491","messageId":"492","endLine":61,"endColumn":38},{"ruleId":"483","severity":1,"message":"544","line":80,"column":8,"nodeType":"485","endLine":80,"endColumn":10,"suggestions":"545"},{"ruleId":"489","severity":1,"message":"497","line":69,"column":31,"nodeType":"491","messageId":"492","endLine":69,"endColumn":33},{"ruleId":"489","severity":1,"message":"497","line":101,"column":44,"nodeType":"491","messageId":"492","endLine":101,"endColumn":46},{"ruleId":"489","severity":1,"message":"497","line":109,"column":40,"nodeType":"491","messageId":"492","endLine":109,"endColumn":42},{"ruleId":"483","severity":1,"message":"546","line":114,"column":8,"nodeType":"485","endLine":114,"endColumn":10,"suggestions":"547"},{"ruleId":"483","severity":1,"message":"548","line":119,"column":8,"nodeType":"485","endLine":119,"endColumn":28,"suggestions":"549"},{"ruleId":"477","severity":1,"message":"482","line":26,"column":33,"nodeType":"479","messageId":"480","endLine":26,"endColumn":51},{"ruleId":"477","severity":1,"message":"538","line":26,"column":81,"nodeType":"479","messageId":"480","endLine":26,"endColumn":109},{"ruleId":"483","severity":1,"message":"539","line":75,"column":8,"nodeType":"485","endLine":75,"endColumn":10,"suggestions":"550"},{"ruleId":"489","severity":1,"message":"490","line":80,"column":38,"nodeType":"491","messageId":"492","endLine":80,"endColumn":40},{"ruleId":"511","severity":1,"message":"512","line":84,"column":69,"nodeType":"513","messageId":"514","endLine":84,"endColumn":71},{"ruleId":"511","severity":1,"message":"512","line":85,"column":51,"nodeType":"513","messageId":"514","endLine":85,"endColumn":53},{"ruleId":"489","severity":1,"message":"490","line":88,"column":52,"nodeType":"491","messageId":"492","endLine":88,"endColumn":54},{"ruleId":"489","severity":1,"message":"490","line":90,"column":46,"nodeType":"491","messageId":"492","endLine":90,"endColumn":48},{"ruleId":"511","severity":1,"message":"512","line":91,"column":60,"nodeType":"513","messageId":"514","endLine":91,"endColumn":62},{"ruleId":"483","severity":1,"message":"551","line":101,"column":8,"nodeType":"485","endLine":101,"endColumn":20,"suggestions":"552"},{"ruleId":"489","severity":1,"message":"490","line":106,"column":42,"nodeType":"491","messageId":"492","endLine":106,"endColumn":44},{"ruleId":"489","severity":1,"message":"497","line":158,"column":36,"nodeType":"491","messageId":"492","endLine":158,"endColumn":38},{"ruleId":"489","severity":1,"message":"497","line":159,"column":41,"nodeType":"491","messageId":"492","endLine":159,"endColumn":43},{"ruleId":"489","severity":1,"message":"497","line":160,"column":36,"nodeType":"491","messageId":"492","endLine":160,"endColumn":38},{"ruleId":"489","severity":1,"message":"490","line":169,"column":34,"nodeType":"491","messageId":"492","endLine":169,"endColumn":36},{"ruleId":"493","severity":1,"message":"494","line":200,"column":9,"nodeType":"495","messageId":"496","endLine":206,"endColumn":10},{"ruleId":"493","severity":1,"message":"494","line":210,"column":9,"nodeType":"495","messageId":"496","endLine":216,"endColumn":10},{"ruleId":"511","severity":1,"message":"512","line":223,"column":45,"nodeType":"513","messageId":"514","endLine":223,"endColumn":47},{"ruleId":"489","severity":1,"message":"490","line":227,"column":28,"nodeType":"491","messageId":"492","endLine":227,"endColumn":30},{"ruleId":"511","severity":1,"message":"512","line":234,"column":69,"nodeType":"513","messageId":"514","endLine":234,"endColumn":71},{"ruleId":"511","severity":1,"message":"512","line":235,"column":47,"nodeType":"513","messageId":"514","endLine":235,"endColumn":49},{"ruleId":"489","severity":1,"message":"490","line":238,"column":48,"nodeType":"491","messageId":"492","endLine":238,"endColumn":50},{"ruleId":"489","severity":1,"message":"490","line":240,"column":42,"nodeType":"491","messageId":"492","endLine":240,"endColumn":44},{"ruleId":"511","severity":1,"message":"512","line":241,"column":56,"nodeType":"513","messageId":"514","endLine":241,"endColumn":58},{"ruleId":"489","severity":1,"message":"490","line":251,"column":34,"nodeType":"491","messageId":"492","endLine":251,"endColumn":36},{"ruleId":"498","severity":1,"message":"499","line":281,"column":21,"nodeType":"500","endLine":281,"endColumn":98},{"ruleId":"489","severity":1,"message":"490","line":288,"column":29,"nodeType":"491","messageId":"492","endLine":288,"endColumn":31},{"ruleId":"489","severity":1,"message":"490","line":410,"column":68,"nodeType":"491","messageId":"492","endLine":410,"endColumn":70},{"ruleId":"489","severity":1,"message":"490","line":431,"column":33,"nodeType":"491","messageId":"492","endLine":431,"endColumn":35},{"ruleId":"489","severity":1,"message":"490","line":444,"column":73,"nodeType":"491","messageId":"492","endLine":444,"endColumn":75},{"ruleId":"489","severity":1,"message":"490","line":445,"column":41,"nodeType":"491","messageId":"492","endLine":445,"endColumn":43},{"ruleId":"489","severity":1,"message":"490","line":449,"column":41,"nodeType":"491","messageId":"492","endLine":449,"endColumn":43},{"ruleId":"489","severity":1,"message":"497","line":453,"column":29,"nodeType":"491","messageId":"492","endLine":453,"endColumn":31},{"ruleId":"503","severity":1,"message":"504","line":463,"column":29,"nodeType":"500","endLine":463,"endColumn":115},{"ruleId":"483","severity":1,"message":"487","line":52,"column":8,"nodeType":"485","endLine":52,"endColumn":10,"suggestions":"553"},{"ruleId":"477","severity":1,"message":"554","line":67,"column":11,"nodeType":"479","messageId":"480","endLine":67,"endColumn":18},{"ruleId":"489","severity":1,"message":"497","line":186,"column":48,"nodeType":"491","messageId":"492","endLine":186,"endColumn":50},{"ruleId":"477","severity":1,"message":"542","line":24,"column":20,"nodeType":"479","messageId":"480","endLine":24,"endColumn":28},{"ruleId":"483","severity":1,"message":"555","line":31,"column":29,"nodeType":"556","endLine":38,"endColumn":14},{"ruleId":"477","severity":1,"message":"557","line":1,"column":27,"nodeType":"479","messageId":"480","endLine":1,"endColumn":33},{"ruleId":"477","severity":1,"message":"558","line":1,"column":35,"nodeType":"479","messageId":"480","endLine":1,"endColumn":44},{"ruleId":"477","severity":1,"message":"559","line":2,"column":8,"nodeType":"479","messageId":"480","endLine":2,"endColumn":13},{"ruleId":"477","severity":1,"message":"560","line":7,"column":28,"nodeType":"479","messageId":"480","endLine":7,"endColumn":45},{"ruleId":"489","severity":1,"message":"497","line":42,"column":20,"nodeType":"491","messageId":"492","endLine":42,"endColumn":22},{"ruleId":"489","severity":1,"message":"490","line":49,"column":67,"nodeType":"491","messageId":"492","endLine":49,"endColumn":69},{"ruleId":"511","severity":1,"message":"512","line":52,"column":38,"nodeType":"513","messageId":"514","endLine":52,"endColumn":40},{"ruleId":"511","severity":1,"message":"512","line":55,"column":37,"nodeType":"513","messageId":"514","endLine":55,"endColumn":39},{"ruleId":"489","severity":1,"message":"497","line":56,"column":30,"nodeType":"491","messageId":"492","endLine":56,"endColumn":32},{"ruleId":"489","severity":1,"message":"497","line":61,"column":73,"nodeType":"491","messageId":"492","endLine":61,"endColumn":75},{"ruleId":"511","severity":1,"message":"512","line":80,"column":44,"nodeType":"513","messageId":"514","endLine":80,"endColumn":46},{"ruleId":"511","severity":1,"message":"512","line":83,"column":37,"nodeType":"513","messageId":"514","endLine":83,"endColumn":39},{"ruleId":"489","severity":1,"message":"497","line":84,"column":30,"nodeType":"491","messageId":"492","endLine":84,"endColumn":32},{"ruleId":"511","severity":1,"message":"512","line":100,"column":38,"nodeType":"513","messageId":"514","endLine":100,"endColumn":40},{"ruleId":"489","severity":1,"message":"497","line":101,"column":70,"nodeType":"491","messageId":"492","endLine":101,"endColumn":72},{"ruleId":"489","severity":1,"message":"490","line":102,"column":37,"nodeType":"491","messageId":"492","endLine":102,"endColumn":39},{"ruleId":"511","severity":1,"message":"512","line":109,"column":44,"nodeType":"513","messageId":"514","endLine":109,"endColumn":46},{"ruleId":"489","severity":1,"message":"497","line":110,"column":70,"nodeType":"491","messageId":"492","endLine":110,"endColumn":72},{"ruleId":"489","severity":1,"message":"490","line":111,"column":37,"nodeType":"491","messageId":"492","endLine":111,"endColumn":39},{"ruleId":"511","severity":1,"message":"512","line":126,"column":37,"nodeType":"513","messageId":"514","endLine":126,"endColumn":39},{"ruleId":"511","severity":1,"message":"512","line":127,"column":41,"nodeType":"513","messageId":"514","endLine":127,"endColumn":43},{"ruleId":"489","severity":1,"message":"497","line":128,"column":34,"nodeType":"491","messageId":"492","endLine":128,"endColumn":36},{"ruleId":"489","severity":1,"message":"497","line":134,"column":77,"nodeType":"491","messageId":"492","endLine":134,"endColumn":79},{"ruleId":"483","severity":1,"message":"515","line":145,"column":8,"nodeType":"485","endLine":145,"endColumn":10,"suggestions":"561"},{"ruleId":"489","severity":1,"message":"497","line":148,"column":59,"nodeType":"491","messageId":"492","endLine":148,"endColumn":61},{"ruleId":"483","severity":1,"message":"487","line":20,"column":8,"nodeType":"485","endLine":20,"endColumn":15,"suggestions":"562"},{"ruleId":"489","severity":1,"message":"497","line":26,"column":16,"nodeType":"491","messageId":"492","endLine":26,"endColumn":18},{"ruleId":"489","severity":1,"message":"497","line":27,"column":16,"nodeType":"491","messageId":"492","endLine":27,"endColumn":18},{"ruleId":"489","severity":1,"message":"497","line":28,"column":16,"nodeType":"491","messageId":"492","endLine":28,"endColumn":18},{"ruleId":"493","severity":1,"message":"494","line":24,"column":17,"nodeType":"495","messageId":"496","endLine":31,"endColumn":18},{"ruleId":"493","severity":1,"message":"494","line":61,"column":17,"nodeType":"495","messageId":"496","endLine":68,"endColumn":18},{"ruleId":"489","severity":1,"message":"497","line":64,"column":98,"nodeType":"491","messageId":"492","endLine":64,"endColumn":100},{"ruleId":"511","severity":1,"message":"512","line":66,"column":43,"nodeType":"513","messageId":"514","endLine":66,"endColumn":45},{"ruleId":"489","severity":1,"message":"497","line":68,"column":45,"nodeType":"491","messageId":"492","endLine":68,"endColumn":47},{"ruleId":"489","severity":1,"message":"497","line":75,"column":116,"nodeType":"491","messageId":"492","endLine":75,"endColumn":118},{"ruleId":"483","severity":1,"message":"563","line":91,"column":8,"nodeType":"485","endLine":91,"endColumn":20,"suggestions":"564"},{"ruleId":"477","severity":1,"message":"565","line":94,"column":15,"nodeType":"479","messageId":"480","endLine":94,"endColumn":29},{"ruleId":"489","severity":1,"message":"497","line":97,"column":30,"nodeType":"491","messageId":"492","endLine":97,"endColumn":32},{"ruleId":"489","severity":1,"message":"497","line":127,"column":97,"nodeType":"491","messageId":"492","endLine":127,"endColumn":99},{"ruleId":"511","severity":1,"message":"512","line":135,"column":32,"nodeType":"513","messageId":"514","endLine":135,"endColumn":34},{"ruleId":"489","severity":1,"message":"497","line":136,"column":26,"nodeType":"491","messageId":"492","endLine":136,"endColumn":28},{"ruleId":"511","severity":1,"message":"512","line":212,"column":47,"nodeType":"513","messageId":"514","endLine":212,"endColumn":49},{"ruleId":"489","severity":1,"message":"497","line":214,"column":49,"nodeType":"491","messageId":"492","endLine":214,"endColumn":51},{"ruleId":"489","severity":1,"message":"497","line":261,"column":42,"nodeType":"491","messageId":"492","endLine":261,"endColumn":44},{"ruleId":"489","severity":1,"message":"497","line":264,"column":42,"nodeType":"491","messageId":"492","endLine":264,"endColumn":44},{"ruleId":"489","severity":1,"message":"497","line":264,"column":61,"nodeType":"491","messageId":"492","endLine":264,"endColumn":63},{"ruleId":"489","severity":1,"message":"497","line":268,"column":42,"nodeType":"491","messageId":"492","endLine":268,"endColumn":44},{"ruleId":"489","severity":1,"message":"497","line":268,"column":61,"nodeType":"491","messageId":"492","endLine":268,"endColumn":63},{"ruleId":"489","severity":1,"message":"490","line":378,"column":74,"nodeType":"491","messageId":"492","endLine":378,"endColumn":76},{"ruleId":"473","replacedBy":"566"},{"ruleId":"475","replacedBy":"567"},{"ruleId":"477","severity":1,"message":"558","line":1,"column":27,"nodeType":"479","messageId":"480","endLine":1,"endColumn":36},{"ruleId":"477","severity":1,"message":"541","line":13,"column":13,"nodeType":"479","messageId":"480","endLine":13,"endColumn":14},{"ruleId":"477","severity":1,"message":"568","line":18,"column":30,"nodeType":"479","messageId":"480","endLine":18,"endColumn":49},{"ruleId":"489","severity":1,"message":"490","line":23,"column":25,"nodeType":"491","messageId":"492","endLine":23,"endColumn":27},{"ruleId":"489","severity":1,"message":"497","line":6,"column":30,"nodeType":"491","messageId":"492","endLine":6,"endColumn":32},{"ruleId":"477","severity":1,"message":"569","line":1,"column":10,"nodeType":"479","messageId":"480","endLine":1,"endColumn":14},{"ruleId":"477","severity":1,"message":"557","line":1,"column":27,"nodeType":"479","messageId":"480","endLine":1,"endColumn":33},{"ruleId":"477","severity":1,"message":"570","line":14,"column":15,"nodeType":"479","messageId":"480","endLine":14,"endColumn":25},{"ruleId":"483","severity":1,"message":"571","line":23,"column":8,"nodeType":"485","endLine":23,"endColumn":10,"suggestions":"572"},{"ruleId":"489","severity":1,"message":"497","line":48,"column":31,"nodeType":"491","messageId":"492","endLine":48,"endColumn":33},{"ruleId":"489","severity":1,"message":"497","line":52,"column":38,"nodeType":"491","messageId":"492","endLine":52,"endColumn":40},{"ruleId":"489","severity":1,"message":"497","line":56,"column":38,"nodeType":"491","messageId":"492","endLine":56,"endColumn":40},{"ruleId":"489","severity":1,"message":"497","line":72,"column":30,"nodeType":"491","messageId":"492","endLine":72,"endColumn":32},{"ruleId":"489","severity":1,"message":"497","line":76,"column":37,"nodeType":"491","messageId":"492","endLine":76,"endColumn":39},{"ruleId":"489","severity":1,"message":"497","line":80,"column":37,"nodeType":"491","messageId":"492","endLine":80,"endColumn":39},{"ruleId":"489","severity":1,"message":"497","line":96,"column":30,"nodeType":"491","messageId":"492","endLine":96,"endColumn":32},{"ruleId":"489","severity":1,"message":"497","line":96,"column":61,"nodeType":"491","messageId":"492","endLine":96,"endColumn":63},{"ruleId":"489","severity":1,"message":"497","line":116,"column":30,"nodeType":"491","messageId":"492","endLine":116,"endColumn":32},{"ruleId":"489","severity":1,"message":"497","line":122,"column":37,"nodeType":"491","messageId":"492","endLine":122,"endColumn":39},{"ruleId":"489","severity":1,"message":"497","line":128,"column":37,"nodeType":"491","messageId":"492","endLine":128,"endColumn":39},{"ruleId":"489","severity":1,"message":"497","line":145,"column":30,"nodeType":"491","messageId":"492","endLine":145,"endColumn":32},{"ruleId":"489","severity":1,"message":"497","line":150,"column":34,"nodeType":"491","messageId":"492","endLine":150,"endColumn":36},{"ruleId":"489","severity":1,"message":"497","line":154,"column":41,"nodeType":"491","messageId":"492","endLine":154,"endColumn":43},{"ruleId":"489","severity":1,"message":"497","line":158,"column":41,"nodeType":"491","messageId":"492","endLine":158,"endColumn":43},{"ruleId":"489","severity":1,"message":"497","line":186,"column":81,"nodeType":"491","messageId":"492","endLine":186,"endColumn":83},{"ruleId":"489","severity":1,"message":"497","line":189,"column":82,"nodeType":"491","messageId":"492","endLine":189,"endColumn":84},{"ruleId":"489","severity":1,"message":"497","line":192,"column":81,"nodeType":"491","messageId":"492","endLine":192,"endColumn":83},{"ruleId":"489","severity":1,"message":"497","line":195,"column":82,"nodeType":"491","messageId":"492","endLine":195,"endColumn":84},{"ruleId":"477","severity":1,"message":"557","line":1,"column":17,"nodeType":"479","messageId":"480","endLine":1,"endColumn":23},{"ruleId":"477","severity":1,"message":"573","line":22,"column":12,"nodeType":"479","messageId":"480","endLine":22,"endColumn":31},{"ruleId":"489","severity":1,"message":"497","line":65,"column":36,"nodeType":"491","messageId":"492","endLine":65,"endColumn":38},{"ruleId":"489","severity":1,"message":"497","line":95,"column":37,"nodeType":"491","messageId":"492","endLine":95,"endColumn":39},{"ruleId":"489","severity":1,"message":"497","line":109,"column":37,"nodeType":"491","messageId":"492","endLine":109,"endColumn":39},{"ruleId":"489","severity":1,"message":"497","line":113,"column":37,"nodeType":"491","messageId":"492","endLine":113,"endColumn":39},{"ruleId":"483","severity":1,"message":"574","line":35,"column":8,"nodeType":"485","endLine":35,"endColumn":10,"suggestions":"575"},{"ruleId":"503","severity":1,"message":"504","line":174,"column":21,"nodeType":"500","endLine":174,"endColumn":121},"no-native-reassign",["576"],"no-negated-in-lhs",["577"],"no-unused-vars","'loggedInUserState' is assigned a value but never used.","Identifier","unusedVar","'signupUser' is defined but never used.","'NOTIFICATION_ERROR' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'signinUser'. Either include it or remove the dependency array.","ArrayExpression",["578"],"React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["579"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","Expected '===' and instead saw '=='.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'FavoriteBorderOutlinedIcon' is defined but never used.","'firstPrizeBadge' is defined but never used.","'secondPrizeBadge' is defined but never used.","'thirdPrizeBadge' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch', 'history', 'loggedInUser', 'onWindowScroll', and 'state.currentLoginFlow'. Either include them or remove the dependency array.",["580"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has missing dependencies: 'dispatch' and 'loggedInUser.key'. Either include them or remove the dependency array.",["581"],["582"],"'FaStaylinked' is defined but never used.","'setActiveRoute' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'history?.location?.pathname' and 'routeChangeTrigger'. Either include them or remove the dependency array. If 'routeChangeTrigger' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["583"],"'listenRouteChange' is assigned a value but never used.","no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'ImageUploader' is defined but never used.","'onimageUpload' is assigned a value but never used.","'useState' is defined but never used.","React Hook useEffect has a missing dependency: 'history?.location?.pathname'. Either include it or remove the dependency array.",["584"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","'toBase64' is defined but never used.","'NOTIFICATION_SUCCCESS' is defined but never used.","'FEMALE_PROFILE_DEFAULT_IMAGE' is defined but never used.","React Hook useEffect has a missing dependency: 'userDetails'. Either include it or remove the dependency array. You can also do a functional update 'setUserDetails(u => ...)' if you only need 'userDetails' in the 'setUserDetails' call.",["585"],"'$' is defined but never used.","'dispatch' is assigned a value but never used.","'isMobile' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dispatch', 'loggedInUser.email', 'loggedInUser.phone', 'loggedInUser.subscriptions', 'prepareUserCompData', and 'state.currentLoginFlow'. Either include them or remove the dependency array.",["586"],"React Hook useEffect has missing dependencies: 'dispatch', 'history', 'loggedInUser', 'sendEmailToAdmin', 'sendEmailToUser', 'state.activeSubscription.key', 'state.activeSubscription.type', and 'state.currentLoginFlow'. Either include them or remove the dependency array.",["587"],"React Hook useEffect has a missing dependency: 'loggedInUser?.subscriptions'. Either include it or remove the dependency array.",["588"],["589"],"React Hook useEffect has a missing dependency: 'stepData'. Either include it or remove the dependency array.",["590"],["591"],"'classes' is assigned a value but never used.","Assignments to the 'initialFields' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","ObjectExpression","'useRef' is defined but never used.","'useEffect' is defined but never used.","'Video' is defined but never used.","'setActiveCategory' is assigned a value but never used.",["592"],["593"],"React Hook useEffect has missing dependencies: 'competitionDetails', 'dispatch', 'loggedInUser.email', 'loggedInUser.key', 'loggedInUser.phone', 'state.activeVideoForCompetition', 'state.currentLoginFlow', and 'userUploadedVdos.length'. Either include them or remove the dependency array.",["594"],"'getCurrentData' is assigned a value but never used.",["576"],["577"],"'setOpenDetailsModal' is assigned a value but never used.","'data' is defined but never used.","'videoFront' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'activeVideosList'. Either include it or remove the dependency array.",["595"],"'subsciptionValidity' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'loggedInUser.subscriptions'. Either include it or remove the dependency array.",["596"],"no-global-assign","no-unsafe-negation",{"desc":"597","fix":"598"},{"desc":"599","fix":"600"},{"desc":"601","fix":"602"},{"desc":"603","fix":"604"},{"desc":"605","fix":"606"},{"desc":"607","fix":"608"},{"desc":"609","fix":"610"},{"desc":"611","fix":"612"},{"desc":"613","fix":"614"},{"desc":"615","fix":"616"},{"desc":"617","fix":"618"},{"desc":"611","fix":"619"},{"desc":"620","fix":"621"},{"desc":"599","fix":"622"},{"desc":"603","fix":"623"},{"desc":"624","fix":"625"},{"desc":"626","fix":"627"},{"desc":"628","fix":"629"},{"desc":"630","fix":"631"},"Update the dependencies array to be: [signinUser, thirdPartyResponse]",{"range":"632","text":"633"},"Update the dependencies array to be: [dispatch]",{"range":"634","text":"635"},"Update the dependencies array to be: [dispatch, history, loggedInUser, onWindowScroll, state.currentLoginFlow]",{"range":"636","text":"637"},"Update the dependencies array to be: [dispatch, loggedInUser.key]",{"range":"638","text":"639"},"Update the dependencies array to be: [dispatch, loggedInUser.key, state]",{"range":"640","text":"641"},"Update the dependencies array to be: [history?.location?.pathname, isMobile, routeChangeTrigger]",{"range":"642","text":"643"},"Update the dependencies array to be: [history?.location?.pathname]",{"range":"644","text":"645"},"Update the dependencies array to be: [userDetails]",{"range":"646","text":"647"},"Update the dependencies array to be: [dispatch, loggedInUser.email, loggedInUser.phone, loggedInUser.subscriptions, prepareUserCompData, state.currentLoginFlow]",{"range":"648","text":"649"},"Update the dependencies array to be: [dispatch, history, loggedInUser, sendEmailToAdmin, sendEmailToUser, state.activeSubscription.key, state.activeSubscription.type, state.currentLoginFlow]",{"range":"650","text":"651"},"Update the dependencies array to be: [loggedInUser?.subscriptions, state.loggedInUser]",{"range":"652","text":"653"},{"range":"654","text":"647"},"Update the dependencies array to be: [activeStep, stepData]",{"range":"655","text":"656"},{"range":"657","text":"635"},{"range":"658","text":"639"},"Update the dependencies array to be: [dispatch, state]",{"range":"659","text":"660"},"Update the dependencies array to be: [ActiveStep, competitionDetails, dispatch, loggedInUser.email, loggedInUser.key, loggedInUser.phone, state.activeVideoForCompetition, state.currentLoginFlow, userUploadedVdos.length]",{"range":"661","text":"662"},"Update the dependencies array to be: [activeVideosList]",{"range":"663","text":"664"},"Update the dependencies array to be: [loggedInUser.subscriptions]",{"range":"665","text":"666"},[2267,2287],"[signinUser, thirdPartyResponse]",[2635,2637],"[dispatch]",[4902,4904],"[dispatch, history, loggedInUser, onWindowScroll, state.currentLoginFlow]",[7145,7147],"[dispatch, loggedInUser.key]",[7413,7420],"[dispatch, loggedInUser.key, state]",[4258,4268],"[history?.location?.pathname, isMobile, routeChangeTrigger]",[950,952],"[history?.location?.pathname]",[3140,3142],"[userDetails]",[3967,3969],"[dispatch, loggedInUser.email, loggedInUser.phone, loggedInUser.subscriptions, prepareUserCompData, state.currentLoginFlow]",[5593,5595],"[dispatch, history, loggedInUser, sendEmailToAdmin, sendEmailToUser, state.activeSubscription.key, state.activeSubscription.type, state.currentLoginFlow]",[5823,5843],"[loggedInUser?.subscriptions, state.loggedInUser]",[3780,3782],[5130,5142],"[activeStep, stepData]",[2563,2565],[5868,5870],[870,877],"[dispatch, state]",[4814,4826],"[ActiveStep, competitionDetails, dispatch, loggedInUser.email, loggedInUser.key, loggedInUser.phone, state.activeVideoForCompetition, state.currentLoginFlow, userUploadedVdos.length]",[1297,1299],"[activeVideosList]",[1846,1848],"[loggedInUser.subscriptions]"]