[{"/Users/danny/Documents/Projects/boogalu/src/index.js":"1","/Users/danny/Documents/Projects/boogalu/src/reportWebVitals.js":"2","/Users/danny/Documents/Projects/boogalu/src/App.js":"3","/Users/danny/Documents/Projects/boogalu/src/Providers/StateProvider.js":"4","/Users/danny/Documents/Projects/boogalu/src/Components/Footer/index.js":"5","/Users/danny/Documents/Projects/boogalu/src/Components/Admin/Subscription.js":"6","/Users/danny/Documents/Projects/boogalu/src/Components/Admin/Competition.js":"7","/Users/danny/Documents/Projects/boogalu/src/Components/EditProfile/EditProfile.js":"8","/Users/danny/Documents/Projects/boogalu/src/Services/LocalstorageCache.js":"9","/Users/danny/Documents/Projects/boogalu/src/Components/Login/Login.js":"10","/Users/danny/Documents/Projects/boogalu/src/Components/Navigation/index.js":"11","/Users/danny/Documents/Projects/boogalu/src/Components/Profile/Profile.js":"12","/Users/danny/Documents/Projects/boogalu/src/Components/Splash/index.js":"13","/Users/danny/Documents/Projects/boogalu/src/Components/Upcoming/index.js":"14","/Users/danny/Documents/Projects/boogalu/src/Components/Subscriptions/index.js":"15","/Users/danny/Documents/Projects/boogalu/src/Components/Competitions/index.js":"16","/Users/danny/Documents/Projects/boogalu/src/Components/Contactus/index.js":"17","/Users/danny/Documents/Projects/boogalu/src/Components/Loader/index.js":"18","/Users/danny/Documents/Projects/boogalu/src/Components/Page404/index.js":"19","/Users/danny/Documents/Projects/boogalu/src/Components/Notification/index.js":"20","/Users/danny/Documents/Projects/boogalu/src/Reducers/index.js":"21","/Users/danny/Documents/Projects/boogalu/src/Components/Signup/index.js":"22","/Users/danny/Documents/Projects/boogalu/src/Components/Homepage/index.js":"23","/Users/danny/Documents/Projects/boogalu/src/Components/VideoUploader/index.js":"24","/Users/danny/Documents/Projects/boogalu/src/Components/Feeds/index.js":"25","/Users/danny/Documents/Projects/boogalu/src/Services/Subscription.service.js":"26","/Users/danny/Documents/Projects/boogalu/src/Services/Utils.js":"27","/Users/danny/Documents/Projects/boogalu/src/Services/Upload.service.js":"28","/Users/danny/Documents/Projects/boogalu/src/Services/Competition.service.js":"29","/Users/danny/Documents/Projects/boogalu/src/Services/User.service.js":"30","/Users/danny/Documents/Projects/boogalu/src/Actions/User/index.js":"31","/Users/danny/Documents/Projects/boogalu/src/Services/EnrollCompetition.service.js":"32","/Users/danny/Documents/Projects/boogalu/src/Components/Vedio/Video.js":"33","/Users/danny/Documents/Projects/boogalu/src/Services/UploadedVideo.service.js":"34","/Users/danny/Documents/Projects/boogalu/src/Services/Email.service.js":"35","/Users/danny/Documents/Projects/boogalu/src/Constants/index.js":"36","/Users/danny/Documents/Projects/boogalu/src/Services/firebase.js":"37","/Users/danny/Documents/Projects/boogalu/src/Actions/Loader/index.js":"38","/Users/danny/Documents/Projects/boogalu/src/Actions/Notification/index.js":"39","/Users/danny/Documents/Projects/boogalu/src/Actions/LoginFlow/index.js":"40","/Users/danny/Documents/Projects/boogalu/src/Components/VideoDetails/index.js":"41","/Users/danny/Documents/Projects/boogalu/src/Actions/Utility/index.js":"42","/Users/danny/Documents/Projects/boogalu/src/Actions/Competition/index.js":"43","/Users/danny/Documents/Projects/boogalu/src/Components/CompetitionsDetails/index.js":"44","/Users/danny/Documents/Projects/boogalu/src/Data/LessonsCategory.js":"45","/Users/danny/Documents/Projects/boogalu/src/Data/RegistrationStepData.js":"46","/Users/danny/Documents/Projects/boogalu/src/Components/ProfileImage/index.js":"47","/Users/danny/Documents/Projects/boogalu/src/Database/index.js":"48","/Users/danny/Documents/Projects/boogalu/src/Components/BuySubscription/index.js":"49","/Users/danny/Documents/Projects/boogalu/src/Actions/Subscription/index.js":"50","/Users/danny/Documents/Projects/boogalu/src/Components/EnrollCompetition/index.js":"51","/Users/danny/Documents/Projects/boogalu/src/Services/Other.service.js":"52","/Users/danny/Documents/Projects/boogalu/src/Components/LessonVideoComponent/index.js":"53","/Users/danny/Documents/Projects/boogalu/src/Data/Dummy.js":"54"},{"size":714,"mtime":1607871183480,"results":"55","hashOfConfig":"56"},{"size":362,"mtime":1607448783643,"results":"57","hashOfConfig":"56"},{"size":3978,"mtime":1612471028648,"results":"58","hashOfConfig":"56"},{"size":1061,"mtime":1612286797394,"results":"59","hashOfConfig":"56"},{"size":4454,"mtime":1611990120104,"results":"60","hashOfConfig":"56"},{"size":9655,"mtime":1612121473779,"results":"61","hashOfConfig":"56"},{"size":11016,"mtime":1612121473778,"results":"62","hashOfConfig":"56"},{"size":15769,"mtime":1612283738043,"results":"63","hashOfConfig":"56"},{"size":244,"mtime":1608092665797,"results":"64","hashOfConfig":"56"},{"size":15011,"mtime":1612542943299,"results":"65","hashOfConfig":"56"},{"size":12913,"mtime":1612612910086,"results":"66","hashOfConfig":"56"},{"size":24016,"mtime":1612547055682,"results":"67","hashOfConfig":"56"},{"size":337,"mtime":1610252476571,"results":"68","hashOfConfig":"56"},{"size":1465,"mtime":1612717504270,"results":"69","hashOfConfig":"56"},{"size":7706,"mtime":1612464628298,"results":"70","hashOfConfig":"56"},{"size":5207,"mtime":1612546411050,"results":"71","hashOfConfig":"56"},{"size":5770,"mtime":1612562658074,"results":"72","hashOfConfig":"56"},{"size":358,"mtime":1612286899848,"results":"73","hashOfConfig":"56"},{"size":454,"mtime":1612089803600,"results":"74","hashOfConfig":"56"},{"size":1189,"mtime":1612283162498,"results":"75","hashOfConfig":"56"},{"size":1956,"mtime":1612545557611,"results":"76","hashOfConfig":"56"},{"size":33602,"mtime":1612542943303,"results":"77","hashOfConfig":"56"},{"size":7362,"mtime":1612717487656,"results":"78","hashOfConfig":"56"},{"size":15517,"mtime":1612612934947,"results":"79","hashOfConfig":"56"},{"size":8577,"mtime":1612547296307,"results":"80","hashOfConfig":"56"},{"size":2579,"mtime":1611998841256,"results":"81","hashOfConfig":"56"},{"size":1406,"mtime":1611638880845,"results":"82","hashOfConfig":"56"},{"size":2925,"mtime":1611659867189,"results":"83","hashOfConfig":"56"},{"size":3029,"mtime":1611657725425,"results":"84","hashOfConfig":"56"},{"size":2483,"mtime":1612121473782,"results":"85","hashOfConfig":"56"},{"size":382,"mtime":1607543824191,"results":"86","hashOfConfig":"56"},{"size":3292,"mtime":1611776438217,"results":"87","hashOfConfig":"56"},{"size":599,"mtime":1612542943305,"results":"88","hashOfConfig":"56"},{"size":2423,"mtime":1612305365673,"results":"89","hashOfConfig":"56"},{"size":549,"mtime":1612381171338,"results":"90","hashOfConfig":"56"},{"size":2264,"mtime":1612687922840,"results":"91","hashOfConfig":"56"},{"size":984,"mtime":1611418181345,"results":"92","hashOfConfig":"56"},{"size":285,"mtime":1612213987846,"results":"93","hashOfConfig":"56"},{"size":322,"mtime":1612120835900,"results":"94","hashOfConfig":"56"},{"size":306,"mtime":1611686954131,"results":"95","hashOfConfig":"56"},{"size":4182,"mtime":1612381532604,"results":"96","hashOfConfig":"56"},{"size":355,"mtime":1612115913064,"results":"97","hashOfConfig":"56"},{"size":368,"mtime":1612545439288,"results":"98","hashOfConfig":"56"},{"size":22426,"mtime":1612546714789,"results":"99","hashOfConfig":"56"},{"size":11937,"mtime":1610252476574,"results":"100","hashOfConfig":"56"},{"size":7490,"mtime":1608453248853,"results":"101","hashOfConfig":"56"},{"size":399,"mtime":1612304535187,"results":"102","hashOfConfig":"56"},{"size":139,"mtime":1611420039353,"results":"103","hashOfConfig":"56"},{"size":6044,"mtime":1612561651433,"results":"104","hashOfConfig":"56"},{"size":189,"mtime":1612003974266,"results":"105","hashOfConfig":"56"},{"size":9034,"mtime":1612464615401,"results":"106","hashOfConfig":"56"},{"size":432,"mtime":1612562719386,"results":"107","hashOfConfig":"56"},{"size":10069,"mtime":1612716675932,"results":"108","hashOfConfig":"56"},{"size":1569,"mtime":1612716632925,"results":"109","hashOfConfig":"56"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},"1gp1tlp",{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"112"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"112"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"112"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"112"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"112"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"112"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"112"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"112"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":41,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"112"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"148","messages":"149","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"112"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"112"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"112"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"112"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":33,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"112"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"171","messages":"172","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"112"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176","usedDeprecatedRules":"112"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181","usedDeprecatedRules":"112"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"112"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"211","usedDeprecatedRules":"112"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"218","usedDeprecatedRules":"112"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"225","usedDeprecatedRules":"112"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"228","usedDeprecatedRules":"112"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"231","usedDeprecatedRules":"112"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"236","usedDeprecatedRules":"112"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/danny/Documents/Projects/boogalu/src/index.js",[],["243","244"],"/Users/danny/Documents/Projects/boogalu/src/reportWebVitals.js",[],"/Users/danny/Documents/Projects/boogalu/src/App.js",["245"],"import React, { useState, useEffect } from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport \"./App.scss\"\nimport Login from \"./Components/Login/Login\";\nimport SplashScreen from './Components/Splash';\nimport Navigation from \"./Components/Navigation/index\";\nimport Homepage from \"./Components/Homepage\";\nimport Footer from \"./Components/Footer/index\";\nimport Signup from \"./Components/Signup\";\nimport Profile from \"./Components/Profile/Profile\";\nimport Upcoming from \"./Components/Upcoming\";\nimport Competitions from \"./Components/Competitions\";\nimport Competition from \"./Components/Admin/Competition\"\nimport Subscriptions from \"./Components/Subscriptions\";\nimport EditProfile from \"./Components/EditProfile/EditProfile\";\nimport ContactUs from \"./Components/Contactus\";\nimport VideoUploader from \"./Components/VideoUploader\";\nimport Subscription from \"./Components/Admin/Subscription\";\nimport Feeds from \"./Components/Feeds\";\nimport Page404 from './Components/Page404';\nimport Loader from \"./Components/Loader\";\nimport { useStoreConsumer } from './Providers/StateProvider';\nimport Notification from \"./Components/Notification\";\n\nfunction App() {\n  const { state } = useStoreConsumer();\n  const [isSplashVisible, toggleSplash] = useState(true);\n  const [transitionOpacityClass, toggleTransition] = useState('');\n  useEffect(() => {\n    setTimeout(() => {\n      toggleSplash(false);\n    }, 2500);\n\n    setTimeout(() => {\n      toggleTransition('visible-transition');\n    }, 2800);\n  }, []);\n\n  return (\n    <Router>\n      <div className=\"App\">\n        {\n          isSplashVisible ?\n            <SplashScreen />\n            :\n            <div className={`main-content-wrapper ${transitionOpacityClass}`}>\n              <Navigation />\n              <Notification />\n              {state?.isLoading && <Loader />}\n              <Switch>\n                <Route exact path=\"/contactus\">\n                  <ContactUs />\n                </Route>\n                <Route exact path=\"/login:plan\">\n                  <Login />\n                </Route>\n                <Route exact path=\"/login\">\n                  <Login />\n                </Route>\n                <Route exact path=\"/profile/edit\">\n                  <EditProfile />\n                </Route>\n                <Route exact path=\"/register:plan\">\n                  <Signup />\n                </Route>\n                <Route exact path=\"/register\">\n                  <Signup />\n                </Route>\n                <Route exact path=\"/lessons\">\n                  <Upcoming />\n                </Route>\n                <Route exact path=\"/competitions\">\n                  <Competitions />\n                </Route>\n                <Route exact path=\"/subscription\">\n                  <Subscriptions />\n                </Route>\n                <Route exact path=\"/profile\">\n                  <Profile />\n                </Route>\n                <Route exact path=\"/home\">\n                  {state.loggedInUser && state.loggedInUser.username ? <Feeds /> : <Homepage />}\n                </Route>\n                <Route exact path=\"/upload-video\">\n                  <VideoUploader />\n                </Route>\n                <Route exact path=\"/feeds\">\n                  <Feeds />\n                </Route>\n                <Route exact path=\"/\">\n                  {state.loggedInUser && state.loggedInUser.username ? <Feeds /> : <Homepage />}\n                </Route>\n\n                {/* admin routes */}\n                <Route exact path=\"/admin/competition\">\n                  <Competition />\n                </Route>\n                <Route exact path=\"/admin/subscription\">\n                  <Subscription />\n                </Route>\n\n                {/* Handling 404 */}\n                <Route>\n                  <Page404 />\n                </Route>\n              </Switch>\n              <Footer />\n            </div>\n        }\n      </div>\n    </Router>\n  );\n}\nexport default App;","/Users/danny/Documents/Projects/boogalu/src/Providers/StateProvider.js",["246"],"import React, { createContext, useReducer, useContext } from 'react';\nimport storeReducer from '../Reducers';\nimport LocalstorageCache from '../Services/LocalstorageCache';\n\nconst loggedInUserState = {\n  name: '',\n  username: '',\n  email: '',\n  phone: '',\n  dob: '2017-05-24',\n  gender: '',\n  country: '',\n  state: '',\n  password: '',\n  confirmPassword: '',\n  bio: '',\n  tnc: true,\n  profileImage: '',\n  source: ''\n}\n\nconst initialState = localStorage.getItem(\"Choreoculture\") ? JSON.parse(localStorage.getItem(\"Choreoculture\"))\n  : {\n    loggedInUser: {},\n    isLoading: null,\n    currentLoginFlow: null,\n    notification: {\n      msg: \"\",\n      type: \"\",\n      time: 3000\n    }\n  };\nconst store = createContext(initialState);\nconst { Provider } = store;\n\nconst useStoreConsumer = () => useContext(store);\n\nconst StateProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(LocalstorageCache(storeReducer), initialState);\n\n  return <Provider value={{ state, dispatch }}>{children}</Provider>;\n};\n\nexport { store, StateProvider, useStoreConsumer }","/Users/danny/Documents/Projects/boogalu/src/Components/Footer/index.js",["247","248","249","250","251","252","253"],"import React, { useState, useEffect } from 'react';\nimport { useHistory } from \"react-router-dom\";\nimport boogaluLogo from '../../Images/Boogalu-logo.svg';\nimport { FaInstagramSquare, FaYoutube, FaFacebookSquare } from 'react-icons/fa';\nimport * as $ from 'jquery';\n\nfunction Footer() {\n    const history = useHistory();\n    \n    useEffect(() => {\n        setTimeout(() => {\n            const pathName = history?.location?.pathname.split('/')[1];\n            const footerLinks = document.querySelectorAll('.js-page-links li');\n\n            if (footerLinks && footerLinks.length) {\n                footerLinks.forEach((ele) => {\n                    const getData = ele.getAttribute('data-name').toLocaleLowerCase();\n                    if (pathName?.length && getData.includes(pathName)) {\n                        ele.classList.add('active');\n                    }\n                });\n            }\n\n        }, 1000);\n\n    }, []);\n\n    function navigatePageLinks(event, path) {\n        const footerLinks = document.querySelectorAll('.js-page-links li');\n        if (footerLinks && footerLinks.length) {\n            footerLinks.forEach((ele) => {\n                const getData = ele.getAttribute('data-name').toLocaleLowerCase();\n                if (path?.length && getData.includes(path)) {\n                    ele.classList.add('active');\n                } else {\n                    if (ele.classList.contains('active')) {\n                        ele.classList.remove('active');    \n                    }\n                }\n            });\n        }\n        history.push(`/${path}`);\n        if (path) {\n            setTimeout(() => {\n                $('html,body').animate({\n                    scrollTop: 0\n                }, 700);\n            }, 100);\n        }\n    }\n\n    return (\n        <div>\n            <footer className=\"flex-container-VC\">\n                <div className=\"flex-1 copyright-wrap\">\n                    <div className=\"footer-logo-wrap\">\n                        <img src={boogaluLogo} alt=\"Logo\" className=\"image-7\" />\n                    </div>\n                    <div className=\"copyright-inner\">\n                        &#169; 2021 &nbsp;  \n                        <a href=\"https://www.choreoculture.com/\" target=\"_blank\">\n                            CHOREOCULTURE STUDIO.\n                        </a>\n                        <div>ALL RIGHTS RESERVED.</div>\n                    </div>\n                </div>\n                <div className=\"flex-1\">\n                    <div className=\"footer-tagline\" >Get the latest dance content &amp; ChoreoCulture news</div>\n                    <div className=\"email-input-inner\">\n                        <input type=\"email\" placeholder=\"Email\" />\n                    </div>\n                    <button className=\"subscribe\" >Subscribe</button>\n                </div>\n                <div className=\"footer-menus flex-1\">\n                    <ul className=\"menu-lists js-page-links flex-1\">\n                        <li data-name=\"career\">Careers</li>\n                        <li data-name=\"contactus\">\n                            <a onClick={(e) => navigatePageLinks(e, 'contactus')}>Contact us</a>\n                        </li>\n                        <li data-name=\"terms\">Terms</li>\n                    </ul>\n                    <ul className=\"menu-lists menu-lists-2 flex-1\">\n                        <li>\n                            <a href=\"https://www.instagram.com/choreo_culture/?hl=en\" title=\"Follow us on Insta\" target=\"_blank\">\n                                <i><FaInstagramSquare /></i>\n                                <span>Instagram</span>\n                            </a>\n                        </li>\n                        <li>\n                            <a href=\"https://www.youtube.com/user/anjanevents\" title=\"Subscribe our channel\" target=\"_blank\">\n                                <i><FaYoutube /></i>\n                                <span>Youtube</span>\n                            </a>\n                        </li>\n                        <li>\n                            <a href=\"https://www.facebook.com/choreocultureindia/\" title=\"Like our FB page\" target=\"_blank\">\n                                <i><FaFacebookSquare /></i>\n                                <span>Facebook</span>\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </footer>\n        </div>\n    )\n}\n\nexport default Footer\n","/Users/danny/Documents/Projects/boogalu/src/Components/Admin/Subscription.js",["254","255"],"import React, { useState } from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport ImageUploader from 'react-images-upload';\nimport Button from '@material-ui/core/Button';\nimport { uploadImage } from \"../../Services/Upload.service\";\nimport { saveSubscription } from \"../../Services/Subscription.service\";\n\nexport default function Subscription() {\n    const initialSubscriptionData = {\n        name: \"\",\n        desc: \"\",\n        active: true,\n        type: \"\",\n        amount: \"\",\n        img: \"\",\n        startAt: \"\",\n        endAt: \"\",\n        plans: \"\",\n    }\n    const [Subscription, setSubscription] = useState(initialSubscriptionData);\n    const [isAdminLoggedIn, toggleAdminLogin] = useState(false);\n    const [adminEmail, setAdminEmail] = useState('');\n    const [adminPwd, setAdminPwd] = useState('');\n    const [loggedInMessages, setLoginMessage] = useState('');\n\n    function handleAdminLogin(value, type) {\n        if (type === 'email') {\n            setAdminEmail(value?.target?.value);\n        } else {\n            setAdminPwd(value?.target?.value);\n        }\n    }\n\n    function triggerLogin(event) {\n        if (adminEmail && adminEmail === 'b2b@boxpuppet.com' && adminPwd && adminPwd === 'Box-puppet@1001') {\n            toggleAdminLogin(true);\n        } else {\n            toggleAdminLogin(false);\n            setLoginMessage('Invalid credentials, please enter valid email-Id and Password!');\n        }\n    }\n\n    const handleChange = (prop, index) => (event) => {\n        let value = event.target.value;\n        if (prop === 'active') value = event.target.checked;\n        if (prop === 'prices') {\n            Subscription.prices[index] = event.target.value;\n            value = Subscription.prices;\n        }\n        setSubscription({ ...Subscription, [prop]: value });\n    };\n\n    const onimageUpload = (picture) => {\n        setSubscription({ ...Subscription, img: picture });\n    }\n\n    async function saveDetails(e) {\n        console.log(Subscription)\n        // upload Subscription image to bucket\n        if (Subscription.img[0]) {\n            const reader = new FileReader();\n            reader.readAsDataURL(Subscription.img[0]);\n            reader.onload = () => {\n                uploadImage(reader.result, 'subscription', 'small').subscribe((downloadableUrl) => {\n                    Subscription.img = downloadableUrl;\n                    // save Subscription data to db with imag url\n                    saveSubscription(Subscription).subscribe((response) => {\n                        console.log('Subscription success', response);\n                        setSubscription(initialSubscriptionData);\n                    })\n                })\n            }\n        } else {\n            saveSubscription(Subscription).subscribe((response) => {\n                console.log('Subscription success', response);\n                setSubscription(initialSubscriptionData);\n            })\n        }\n    }\n    return (\n        <div className=\"subscription-bo-wrap clearfix\">\n            {\n                isAdminLoggedIn ?\n                    <h1>Create a new Subscription</h1>\n                :\n                    <h1>Login to create new Subscription</h1>\n            }\n            {\n                isAdminLoggedIn ?\n                <div className=\"inner-form-wrap\">\n                    <div className=\"input-wrap\">\n                        <TextField className=\"input-field\"\n                            required\n                            id=\"outlined-required-name\"\n                            label=\"Name\"\n                            onChange={handleChange('name')}\n                            value={Subscription.name}\n                            variant=\"outlined\"\n                        />\n                    </div>\n                    <div className=\"input-wrap\">\n                        <TextField className=\"input-field\"\n                            id=\"outlined-required-desc\"\n                            label=\"Description\"\n                            onChange={handleChange('desc')}\n                            value={Subscription.desc}\n                            variant=\"outlined\"\n                        />\n                    </div>\n                    <div className=\"input-wrap\">\n                        <TextField className=\"input-field\"\n                            id=\"outlined-required-amount\"\n                            label=\"Amount\"\n                            type=\"number\"\n                            onChange={handleChange('amount')}\n                            value={Subscription.amount}\n                            variant=\"outlined\"\n                        />\n                    </div>\n                    <div className=\"input-wrap\">\n                        <FormControl variant=\"outlined\" className=\"input-field\">\n                            <InputLabel id=\"select-outlined-label\">Plans</InputLabel>\n                            <Select\n                                labelId=\"select-outlined-label\"\n                                id=\"select-outlined\"\n                                value={Subscription.plans}\n                                onChange={handleChange('plans')}\n                            >\n                                <MenuItem value=\"monthly\">Monthly</MenuItem>\n                                <MenuItem value=\"annual\">Annual</MenuItem>\n                            </Select>\n                        </FormControl>\n                    </div>\n                    <div className=\"input-wrap data-time-wrap\">\n                        <TextField\n                            id=\"datetime-local-start\"\n                            label=\"Start Date & Time\"\n                            type=\"datetime-local\"\n                            value={Subscription.startAt}\n                            onChange={handleChange('startAt')}\n                            InputLabelProps={{\n                                shrink: true,\n                            }}\n                        />\n                        <TextField\n                            id=\"datetime-local-end\"\n                            label=\"End Date & Time\"\n                            type=\"datetime-local\"\n                            value={Subscription.endAt}\n                            onChange={handleChange('endAt')}\n                            InputLabelProps={{\n                                shrink: true,\n                            }}\n                        />\n                    </div>\n                    {/* <div className=\"input-wrap\">\n                        <ImageUploader\n                            withIcon={true}\n                            buttonText='Upload image'\n                            onChange={onimageUpload}\n                            imgExtension={['.jpg', '.gif', '.png', '.gif', '.svg']}\n                            maxFileSize={5242880}\n                            accept=\"image/*\"\n                            withPreview={true}\n                            singleImage={true}\n                            label=\"Select subscription image\"\n                        />\n                    </div> */}\n                    <div className=\"input-wrap action-wrap\">\n                        <Button variant=\"contained\" color=\"primary\">Cancel</Button>\n                        <Button variant=\"contained\" color=\"secondary\" onClick={(e) => saveDetails(e)}>Save</Button>\n                        <FormControlLabel\n                            control={\n                                <Checkbox\n                                    required\n                                    color=\"primary\"\n                                    className=\"selected-item-checkbox\"\n                                    checked={Subscription.active}\n                                    onChange={handleChange('active')}\n                                    inputProps={{ 'aria-label': 'secondary checkbox' }}\n                                />\n                            }\n                            label=\"Active Subscription\"\n                        />\n                    </div>\n                </div> : \n\n                <div className=\"login-admin-form\">\n                    <p className=\"errorMessage\">{loggedInMessages}</p>\n                    <div className=\"input-wrap\">\n                        <TextField className=\"input-field\"\n                            required\n                            id=\"admin-id\"\n                            label=\"Email Id\"\n                            onChange={value => handleAdminLogin(value, 'email')}\n                            variant=\"outlined\"\n                        />\n                    </div>    \n                    <div className=\"input-wrap\">\n                        <TextField className=\"input-field\"\n                            required\n                            id=\"admin-pwd\"\n                            type=\"password\"\n                            label=\"Password\"\n                            onChange={value => handleAdminLogin(value, 'pwd')}\n                            variant=\"outlined\"\n                        />\n                    </div>\n                    <div className=\"input-wrap action-wrap\">\n                        <Button variant=\"contained\" color=\"secondary\" onClick={(e) => triggerLogin(e)}>Login</Button>\n                    </div>\n                </div>\n            }\n        </div>\n    )\n}\n","/Users/danny/Documents/Projects/boogalu/src/Components/Admin/Competition.js",["256"],"import React, { useState } from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport ImageUploader from 'react-images-upload';\nimport Button from '@material-ui/core/Button';\nimport { saveCompetition } from \"../../Services/Competition.service\";\nimport { uploadImage } from \"../../Services/Upload.service\";\nimport { toBase64 } from \"../../Services/Utils\";\n\nexport default function Competition() {\n    const initialCompetitionData = {\n        name: \"\",\n        type: \"\",\n        desc: \"\",\n        active: true,\n        fee: \"\",\n        img: \"\",\n        startAt: \"\",\n        endAt: \"\",\n        prices: [],\n    }\n\n    const [isAdminLoggedIn, toggleAdminLogin] = useState(false);\n    const [CompetitionData, setCompetitionData] = useState(initialCompetitionData);\n    const [adminEmail, setAdminEmail] = useState('');\n    const [adminPwd, setAdminPwd] = useState('');\n    const [loggedInMessages, setLoginMessage] = useState('');\n\n    function handleAdminLogin(value, type) {\n        if (type === 'email') {\n            setAdminEmail(value?.target?.value);\n        } else {\n            setAdminPwd(value?.target?.value);\n        }\n    }\n\n    function triggerLogin(event) {\n        if (adminEmail && adminEmail === 'b2b@boxpuppet.com' && adminPwd && adminPwd === 'Box-puppet@1001') {\n            toggleAdminLogin(true);\n        } else {\n            toggleAdminLogin(false);\n            setLoginMessage('Invalid credentials, please enter valid email-Id and Password!');\n        }\n    }\n\n    const handleChange = (prop, index) => (event) => {\n        let value = event.target.value;\n        if (prop === 'active') value = event.target.checked;\n        if (prop === 'prices') {\n            CompetitionData.prices[index] = event.target.value;\n            value = CompetitionData.prices;\n        }\n        setCompetitionData({ ...CompetitionData, [prop]: value });\n    };\n\n    const onimageUpload = (picture) => {\n        setCompetitionData({ ...CompetitionData, img: picture });\n    }\n\n    async function saveDetails(e) {\n        console.log(CompetitionData)\n        // upload competition image to bucket\n        if (CompetitionData.img[0]) {\n            const reader = new FileReader();\n            reader.readAsDataURL(CompetitionData.img[0]);\n            reader.onload = () => {\n                uploadImage(reader.result, 'competition', 'small').subscribe((downloadableUrl) => {\n                    CompetitionData.img = downloadableUrl;\n                    // save competition data to db with imag url\n                    saveCompetition(CompetitionData).subscribe((response) => {\n                        console.log('competition success', response);\n                        setCompetitionData(initialCompetitionData);\n                    })\n                })\n            }\n        }\n    }\n    return (\n        <div className=\"competition-bo-wrap clearfix\">\n            {\n                isAdminLoggedIn ?\n                    <h1>Launch a new competition</h1>\n                : \n                    <h1>Login to create new Competition</h1>\n            }\n            {\n                isAdminLoggedIn ? \n                <div className=\"inner-form-wrap\">\n                    <div className=\"input-wrap\">\n                        <TextField className=\"input-field\"\n                            required\n                            id=\"outlined-required-name\"\n                            label=\"Name\"\n                            onChange={handleChange('name')}\n                            value={CompetitionData.name}\n                            variant=\"outlined\"\n                        />\n                    </div>\n                    <div className=\"input-wrap\">\n                        <TextField className=\"input-field\"\n                            id=\"outlined-required-desc\"\n                            label=\"Description\"\n                            onChange={handleChange('desc')}\n                            value={CompetitionData.desc}\n                            variant=\"outlined\"\n                        />\n                    </div>\n                    <div className=\"input-wrap\">\n                        <TextField className=\"input-field\"\n                            id=\"outlined-required-fee\"\n                            label=\"Fee\"\n                            type=\"number\"\n                            onChange={handleChange('fee')}\n                            value={CompetitionData.fee}\n                            variant=\"outlined\"\n                        />\n                    </div>\n                    <div className=\"input-wrap\">\n                        <FormControl variant=\"outlined\" className=\"input-field\">\n                            <InputLabel id=\"select-outlined-label\">Type</InputLabel>\n                            <Select\n                                labelId=\"select-outlined-label\"\n                                id=\"select-outlined\"\n                                value={CompetitionData.type}\n                                onChange={handleChange('type')}\n                                label=\"Type\"\n                            >\n                                <MenuItem value=\"running\">Currently Running</MenuItem>\n                                <MenuItem value=\"upcomming\">Up-Comming</MenuItem>\n                            </Select>\n                        </FormControl>\n                    </div>\n                    <div className=\"input-wrap data-time-wrap\">\n                        <TextField\n                            id=\"datetime-local-start\"\n                            label=\"Start Date & Time\"\n                            type=\"datetime-local\"\n                            value={CompetitionData.startAt}\n                            onChange={handleChange('startAt')}\n                            InputLabelProps={{\n                                shrink: true,\n                            }}\n                        />\n                        <TextField\n                            id=\"datetime-local-end\"\n                            label=\"End Date & Time\"\n                            type=\"datetime-local\"\n                            value={CompetitionData.endAt}\n                            onChange={handleChange('endAt')}\n                            InputLabelProps={{\n                                shrink: true,\n                            }}\n                        />\n                    </div>\n                    <div className=\"input-wrap\">\n                        <TextField className=\"input-field\"\n                            required\n                            id=\"outlined-required-name\"\n                            label=\"First Price\"\n                            onChange={handleChange('prices', 0)}\n                            value={CompetitionData.prices[0]}\n                            variant=\"outlined\"\n                        />\n                    </div>\n                    <div className=\"input-wrap\">\n                        <TextField className=\"input-field\"\n                            required\n                            id=\"outlined-required-name\"\n                            label=\"Second Price\"\n                            onChange={handleChange('prices', 1)}\n                            value={CompetitionData.prices[1]}\n                            variant=\"outlined\"\n                        />\n                    </div>\n                    <div className=\"input-wrap\">\n                        <TextField className=\"input-field\"\n                            required\n                            id=\"outlined-required-name\"\n                            label=\"Third Price\"\n                            onChange={handleChange('prices', 2)}\n                            value={CompetitionData.prices[2]}\n                            variant=\"outlined\"\n                        />\n                    </div>\n                    <div className=\"input-wrap\">\n                        <ImageUploader\n                            withIcon={true}\n                            buttonText='Upload image'\n                            onChange={onimageUpload}\n                            imgExtension={['.jpg', '.gif', '.png', '.gif', '.svg']}\n                            maxFileSize={5242880}\n                            accept=\"image/*\"\n                            withPreview={true}\n                            singleImage={true}\n                            label=\"Select competition image\"\n                        />\n                    </div>\n                    <div className=\"input-wrap action-wrap\">\n                        <Button variant=\"contained\" color=\"primary\">Cancel</Button>\n                        <Button variant=\"contained\" color=\"secondary\" onClick={(e) => saveDetails(e)}>Save</Button>\n                        <FormControlLabel\n                            control={\n                                <Checkbox\n                                    required\n                                    color=\"primary\"\n                                    className=\"selected-item-checkbox\"\n                                    checked={CompetitionData.active}\n                                    onChange={handleChange('active')}\n                                    inputProps={{ 'aria-label': 'secondary checkbox' }}\n                                />\n                            }\n                            label=\"Active Competition\"\n                        />\n                    </div>\n                </div> \n                :\n                <div className=\"login-admin-form\">\n                    <p className=\"errorMessage\">{loggedInMessages}</p>\n                    <div className=\"input-wrap\">\n                        <TextField className=\"input-field\"\n                            required\n                            id=\"admin-id\"\n                            label=\"Email Id\"\n                            onChange={value => handleAdminLogin(value, 'email')}\n                            variant=\"outlined\"\n                        />\n                    </div>    \n                    <div className=\"input-wrap\">\n                        <TextField className=\"input-field\"\n                            required\n                            id=\"admin-pwd\"\n                            type=\"password\"\n                            label=\"Password\"\n                            onChange={value => handleAdminLogin(value, 'pwd')}\n                            variant=\"outlined\"\n                        />\n                    </div>\n                    <div className=\"input-wrap action-wrap\">\n                        <Button variant=\"contained\" color=\"secondary\" onClick={(e) => triggerLogin(e)}>Login</Button>\n                    </div>\n                </div>\n            }\n        </div>\n    )\n}\n","/Users/danny/Documents/Projects/boogalu/src/Components/EditProfile/EditProfile.js",["257","258","259","260","261","262","263","264"],"import React, { useState, useEffect, useRef } from 'react';\nimport { useHistory } from \"react-router-dom\";\nimport { useStoreConsumer } from '../../Providers/StateProvider';\nimport { signupUser } from '../../Actions/User';\nimport bgImg from '../../Images/bg1.svg';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport FormControl from '@material-ui/core/FormControl';\nimport TextField from '@material-ui/core/TextField';\nimport Visibility from '@material-ui/icons/Visibility';\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport ArrowRightSharpIcon from '@material-ui/icons/ArrowRightSharp';\nimport { updateUser } from \"../../Services/User.service\";\nimport { uploadImage } from \"../../Services/Upload.service\";\nimport { FaPlus, FaEdit } from 'react-icons/fa';\nimport { NOTIFICATION_SUCCCESS, NOTIFICATION_ERROR, MALE_PROFILE_DEFAULT_IMAGE, FEMALE_PROFILE_DEFAULT_IMAGE } from \"../../Constants\";\nimport { enableLoading, disableLoading } from \"../../Actions/Loader\";\nimport * as $ from 'jquery';\n\nexport default function EditProfile() {\n    const { state, dispatch } = useStoreConsumer();\n    const history = useHistory();\n    let loggedInUser = state.loggedInUser;\n    // get data from history props if redirected through google or facebook login\n    if (history.location.state && (history.location.state.source == 'Facebook' || history.location.state.source == 'Google')) {\n        loggedInUser.email = history.location.state.email;\n        loggedInUser.name = history.location.state.name;\n        // setNeedToRegisterError('You are not registered yet, Please register with Choreoculture.')\n    }\n    const uploaderRef = useRef(null);\n    const [userDetails, setUserDetails] = useState(loggedInUser);\n    const [SignUpError, setSignUpError] = useState(null);\n    const [showHidePassword, setShowHidePassword] = useState({ showPassword: false, showConfirmPassword: false });\n    const [IsProfileImageChanged, setIsProfileImageChanged] = useState(false);\n    const [isUserPhotoUploaded, userPhotoUploadToggle] = useState(false);\n    const handleChange = (prop) => (event) => {\n        setUserDetails({ ...userDetails, [prop]: event.target.value });\n        console.log(userDetails)\n    };\n\n    const handleClickShowPassword = (prop) => {\n        setShowHidePassword({ ...showHidePassword, [prop]: !showHidePassword[prop] });\n    };\n\n    const handleMouseDownPassword = (event) => {\n        event.preventDefault();\n    };\n\n    useEffect(() => {\n        $('html,body').animate({\n            scrollTop: 0\n        }, 500);\n        if (userDetails && !userDetails.profileImage) {\n            setUserDetails({ ...userDetails, profileImage: MALE_PROFILE_DEFAULT_IMAGE })\n        }\n    }, [])\n\n    const setSignupUserCred = (e) => {\n        if (userDetails.password != userDetails.confirmPassword) {\n            setSignUpError('Password dose not match.');\n            return;\n        }\n        dispatch(enableLoading());\n        if (IsProfileImageChanged) {\n            uploadImage(userDetails.profileImage, 'user', 'small').subscribe((downloadableUrl) => {\n                userDetails.profileImage = downloadableUrl;\n                updateUser(userDetails.key, userDetails).subscribe(() => {\n                    dispatch(disableLoading());\n                    dispatch(signupUser(userDetails));\n                    history.push(({\n                        pathname: '/profile',\n                        state: null\n                    }));\n                })\n            })\n        } else {\n            updateUser(userDetails.key, userDetails).subscribe(() => {\n                dispatch(disableLoading());\n                dispatch(signupUser(userDetails));\n                history.push(({\n                    pathname: '/profile',\n                    state: null\n                }));\n            })\n        }\n        e.preventDefault();\n    }\n\n    async function onChangeFile(event) {\n        event.stopPropagation();\n        event.preventDefault();\n        var file = event.target.files[0];\n        console.log(file);\n        if (file) {\n            setUserDetails({ ...userDetails, profileImage: null });\n            const reader = new FileReader();\n            reader.readAsDataURL(file);\n            reader.onload = () => {\n                userPhotoUploadToggle(true);\n                setIsProfileImageChanged(true);\n                setUserDetails({ ...userDetails, profileImage: reader.result });\n            }\n            reader.onerror = error => console.error(error);\n        } else setIsProfileImageChanged(false);\n    }\n\n    return (\n        <div className=\"logout-wrap edit-page-wrap clearfix\">\n            <form className=\"form-wrap clearfix\" onSubmit={setSignupUserCred}>\n                <div className=\"heading-outer\">\n                    <div className=\"heading1\">Update Profile</div>\n                </div>\n                <div className=\"profile-img-wrap\">\n                    <div className=\"uploaded-img\" >\n                        <img src={userDetails.profileImage} onClick={() => { uploaderRef.current.click() }} />\n                    </div>\n                    {\n                        isUserPhotoUploaded ?\n                            <i className=\"plus-icon\"><FaEdit /></i>\n                            :\n                            <i className=\"plus-icon\"><FaPlus /></i>\n                    }\n                    <input id=\"myInput\"\n                        type=\"file\"\n                        accept=\"image/*\"\n                        ref={uploaderRef}\n                        onChange={(e) => onChangeFile(e)}\n                    />\n                </div>\n                <div className=\"form-outer final-registration-block clearfix\">\n                    <div className=\"input-wrap\">\n                        <TextField className=\"input-field\"\n                            required\n                            id=\"outlined-required-Name\"\n                            label=\"Name\"\n                            onChange={handleChange('name')}\n                            value={userDetails.name}\n                            variant=\"outlined\"\n                        />\n                    </div>\n                    <div className=\"input-wrap\">\n                        <TextField className=\"input-field\"\n                            required\n                            id=\"outlined-required-Username\"\n                            label=\"Username\"\n                            onChange={handleChange('username')}\n                            value={userDetails.username}\n                            variant=\"outlined\"\n                        />\n                    </div>\n                    <div className=\"input-wrap\">\n                        <TextField className=\"input-field\"\n                            required\n                            type=\"tel\"\n                            id=\"outlined-required-phone\"\n                            label=\"Phone\"\n                            onChange={handleChange('phone')}\n                            value={userDetails.phone}\n                            variant=\"outlined\"\n                            InputProps={{ readOnly: true }}\n                        />\n                    </div>\n                    <div className=\"input-wrap\">\n                        <TextField className=\"input-field\"\n                            required\n                            id=\"outlined-required-email\"\n                            label=\"Email\"\n                            type=\"email\"\n                            onChange={handleChange('email')}\n                            value={userDetails.email}\n                            variant=\"outlined\"\n                            InputProps={{ readOnly: true }}\n                        />\n                    </div>\n                    <div className=\"input-wrap\">\n                        <TextField className=\"input-field\"\n                            required\n                            id=\"outlined-required-country\"\n                            label=\"Country\"\n                            onChange={handleChange('country')}\n                            value={userDetails.country}\n                            variant=\"outlined\"\n                        />\n                    </div>\n                    <div className=\"input-wrap\">\n                        <TextField className=\"input-field\"\n                            required\n                            id=\"outlined-required-state\"\n                            label=\"State\"\n                            onChange={handleChange('state')}\n                            value={userDetails.state}\n                            variant=\"outlined\"\n                        />\n                    </div>\n                    <div className=\"input-wrap\">\n                        <FormControl className=\"\" variant=\"outlined\" style={{ width: '100%' }}>\n                            <InputLabel htmlFor=\"outlined-adornment-password\">Password</InputLabel>\n                            <OutlinedInput\n                                required\n                                id=\"outlined-adornment-password\"\n                                type={showHidePassword.showPassword ? 'text' : 'password'}\n                                value={userDetails.password}\n                                onChange={handleChange('password')}\n                                endAdornment={\n                                    <InputAdornment position=\"end\">\n                                        <IconButton\n                                            aria-label=\"toggle password visibility\"\n                                            onClick={() => handleClickShowPassword('showPassword')}\n                                            onMouseDown={handleMouseDownPassword}\n                                            edge=\"end\"\n                                        >\n                                            {showHidePassword.showPassword ? <Visibility /> : <VisibilityOff />}\n                                        </IconButton>\n                                    </InputAdornment>\n                                }\n                                labelWidth={70}\n                            />\n                        </FormControl>\n                    </div>\n                    <div className=\"input-wrap\">\n                        <FormControl className=\"\" variant=\"outlined\" style={{ width: '100%' }}>\n                            <InputLabel htmlFor=\"outlined-adornment-confirm-password\">Confirm Password</InputLabel>\n                            <OutlinedInput\n                                required\n                                id=\"outlined-adornment-confirm-password\"\n                                type={showHidePassword.showConfirmPassword ? 'text' : 'password'}\n                                value={userDetails.confirmPassword}\n                                onChange={handleChange('confirmPassword')}\n                                endAdornment={\n                                    <InputAdornment position=\"end\">\n                                        <IconButton\n                                            aria-label=\"toggle confirm password visibility\"\n                                            onClick={() => handleClickShowPassword('showConfirmPassword')}\n                                            onMouseDown={handleMouseDownPassword}\n                                            edge=\"end\"\n                                        >\n                                            {showHidePassword.showConfirmPassword ? <Visibility /> : <VisibilityOff />}\n                                        </IconButton>\n                                    </InputAdornment>\n                                }\n                                labelWidth={70}\n                            />\n                        </FormControl>\n                    </div>\n                    <div className=\"input-wrap\">\n                        <div className=\"dob-wrap\">\n                            <TextField className=\"input-field\"\n                                id=\"date\"\n                                label=\"Birthday\"\n                                type=\"date\"\n                                style={{ width: '100%' }}\n                                onChange={handleChange('dob')}\n                                value={userDetails.dob}\n                                InputLabelProps={{\n                                    shrink: true,\n                                }}\n                            />\n                        </div>\n                    </div>\n                    <div className=\"input-wrap\">\n                        <FormControl variant=\"outlined\" className=\"input-field\">\n                            <InputLabel id=\"select-outlined-label\">Gender</InputLabel>\n                            <Select\n                                labelId=\"select-outlined-label\"\n                                id=\"select-outlined\"\n                                value={userDetails.gender}\n                                onChange={handleChange('gender')}\n                                label=\"Gender\"\n                            >\n                                <MenuItem value=\"Male\">Male</MenuItem>\n                                <MenuItem value=\"Female\">Female</MenuItem>\n                                <MenuItem value=\"Other\">Other</MenuItem>\n                            </Select>\n                        </FormControl>\n                    </div>\n                    <div className=\"input-wrap bio-wrap\">\n                        <TextField className=\"input-field bio-input\"\n                            id=\"outlined-required-bio\"\n                            label=\"Bio\"\n                            value={userDetails.bio}\n                            onChange={handleChange('bio')}\n                            variant=\"outlined\"\n                        />\n                    </div>\n                    <div className=\"input-wrap bio-wrap edit-profile-page-input\">\n                        <div className=\"tnc-wrap\">\n                            <div className=\"tnc-content clearfix\">\n                                <div className=\"checkbox-wrap\">\n                                    <Checkbox\n                                        required\n                                        color=\"primary\"\n                                        checked={userDetails.tnc}\n                                        onChange={(e) => setUserDetails({ ...userDetails, tnc: e.target.checked })}\n                                        inputProps={{ 'aria-label': 'secondary checkbox' }}\n                                    />\n                                </div>\n                                <div className=\"note-wrap\">Yes, I agree to the terms and conditions </div>\n                            </div>\n                        </div>\n                        {SignUpError && <div className=\"login-error\">\n                            {SignUpError}\n                        </div>}\n                        <div className=\"submit-btn clearfix\">\n                            <Button variant=\"contained\" type=\"submit\" color=\"primary\" >Update\n                            <ArrowRightSharpIcon />\n                            </Button>\n                        </div>\n                    </div>\n                </div>\n            </form>\n            <div className=\"img-wrap\">\n                <img src={bgImg} alt=\"bg1\" />\n            </div>\n        </div>\n    );\n}","/Users/danny/Documents/Projects/boogalu/src/Services/LocalstorageCache.js",[],"/Users/danny/Documents/Projects/boogalu/src/Components/Login/Login.js",["265","266","267","268","269","270","271","272","273","274","275","276"],"import React, { useState, useEffect } from 'react';\nimport { useHistory } from \"react-router-dom\";\nimport { useStoreConsumer } from '../../Providers/StateProvider';\nimport { GoogleLogin } from 'react-google-login';\nimport FacebookLogin from 'react-facebook-login';\nimport FacebookIcon from '@material-ui/icons/Facebook';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport FormControl from '@material-ui/core/FormControl';\nimport TextField from '@material-ui/core/TextField';\nimport Visibility from '@material-ui/icons/Visibility';\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\nimport ArrowRightSharpIcon from '@material-ui/icons/ArrowRightSharp';\nimport bgImg from '../../Images/bg1.svg';\nimport { loginUser, signupUser } from '../../Actions/User/index';\nimport { getUserByEmail, getUserByPhone } from \"../../Services/User.service\";\nimport VideoUploader from \"../VideoUploader\";\nimport { enableLoading, disableLoading } from \"../../Actions/Loader\";\nimport { displayNotification } from \"../../Actions/Notification\";\nimport { NOTIFICATION_SUCCCESS, NOTIFICATION_ERROR } from \"../../Constants\";\nimport * as $ from 'jquery';\n\nexport default function Login() {\n    const { state, dispatch } = useStoreConsumer();\n    const history = useHistory();\n    const [loginCred, setloginCred] = useState({ username: \"\", password: \"\", showPassWord: false })\n    const [LoginError, setLoginError] = useState(null);\n    const [thirdPartyResponse, setThirdPartyResponse] = useState({ isLogginSuccess: false, data: null, source: '' })\n    const [openVdoUploadModal, setOpenVdoUploadModal] = useState(false)\n\n    useEffect(() => {\n        if (thirdPartyResponse.source === 'Facebook') signinUser('', 'Facebook');\n        if (thirdPartyResponse.source === 'Google') signinUser('', 'Google');\n    }, [thirdPartyResponse]);\n\n    useEffect(() => {\n        $('html,body').animate({\n            scrollTop: 0\n        }, 500);\n    }, [])\n\n    const setLoginResponseToServer = () => {\n        // notify server that user is loggedin\n        console.log('Save loggin user to db')\n\n    }\n    const successResponseGoogle = function (response) {\n        console.log(response);\n        let loginResponse = {\n            data: {\n                name: response.profileObj.name,\n                email: response.profileObj.email,\n                token: response.googleId,\n                profileImage: response.profileObj.imageUrl,\n            },\n            source: 'Google'\n        }\n        setThirdPartyResponse(loginResponse);\n    }\n\n    const failureResponseGoogle = function (response) {\n        if (response.error != \"idpiframe_initialization_failed\") {\n            setLoginError('Sorry there was a problem with your google login request.')\n        }\n    }\n\n    const responseFacebook = (response) => {\n        console.log(response);\n        if (response && response.userID) {\n            let loginResponse = {\n                isLogginSuccess: true,\n                data: response,\n                source: 'Facebook'\n            }\n            setThirdPartyResponse(loginResponse);\n        } else {\n            setLoginError('Sorry there was a problem with your facebook login request.')\n            console.log(\"facebook login error\", response);\n        }\n    }\n\n    const handleMouseDownPassword = (event) => {\n        event.preventDefault();\n    };\n\n    const handleChange = (prop) => (event) => {\n        setLoginError(null);\n        setloginCred({ ...loginCred, [prop]: event.target.value });\n    };\n\n    const showPassword = () => {\n        setloginCred({ ...loginCred, showPassWord: (loginCred.showPassWord ? false : true) })\n    }\n\n    const checkForUserPhone = (phone) => {\n        return new Promise((res, rej) => {\n            getUserByPhone(phone).subscribe((data) => {\n                if (data && data.length) res(data);\n                else res(null);\n            })\n        })\n    }\n\n    const checkForUserEmail = (email) => {\n        return new Promise((res, rej) => {\n            getUserByEmail(email).subscribe((data) => {\n                if (data && data.length) res(data);\n                else res(null);\n            })\n        })\n    }\n\n    const getUserLoginData = (userData) => {\n        return new Promise((res, rej) => {\n            if (thirdPartyResponse.data && thirdPartyResponse.data.email) {\n                // with gmail or fb flow\n                getUserByEmail(userData.email).subscribe((isRegisteredUser) => {\n                    if (isRegisteredUser.length) {\n                        res(isRegisteredUser[0]);\n                    } else {\n                        setLoginError('Please enter correct credentials.')\n                        rej({ ...userData, isRegistered: false });\n                    }\n                })\n            } else {\n                // without gmail fb flow\n                checkForUserEmail(userData.emailOrPhone).then((isRegisteredUser) => {\n                    if (isRegisteredUser && isRegisteredUser.length) {\n                        if (isRegisteredUser[0].password === userData.password) res(isRegisteredUser[0]);\n                        else {\n                            setLoginError('Please enter correct credentials.')\n                            rej();\n                        }\n                    } else {\n                        checkForUserPhone(userData.emailOrPhone).then((isRegisteredUser) => {\n                            if (isRegisteredUser && isRegisteredUser.length) {\n                                if (isRegisteredUser[0].password === userData.password) res(isRegisteredUser[0]);\n                                else {\n                                    setLoginError('Please enter correct credentials.')\n                                    rej();\n                                }\n                            } else {\n                                setLoginError('Please enter correct credentials.')\n                                rej();\n                            }\n                        })\n                    }\n                })\n            }\n        })\n    }\n    const signinUser = (e, status) => {\n        dispatch(enableLoading());\n        setLoginError(null);\n        let userData = {};\n        switch (status) {\n            case 'cred':\n                setThirdPartyResponse({ isLogginSuccess: false, data: null, source: '' })\n                e.preventDefault();\n                e.stopPropagation();\n                userData = {\n                    ...loginCred,\n                    phone: loginCred.username,\n                    email: loginCred.username,\n                    emailOrPhone: loginCred.username\n                }\n                getUserLoginData(userData)\n                    .then((data) => {\n                        //user is registered\n                        setLoginResponseToServer();\n                        data.source = 'Website';\n                        dispatch(loginUser(data));\n                        dispatch(disableLoading());\n                        dispatch(displayNotification({\n                            msg: \"Login successfully\",\n                            type: NOTIFICATION_SUCCCESS,\n                            time: 3000\n                        }));\n                        if (state.currentLoginFlow == 'competition') history.push('/competitions');\n                        else if (state.currentLoginFlow == 'subscription') history.push('/subscription');\n                        else if (state.currentLoginFlow == 'upload-video') setOpenVdoUploadModal(true);\n                        else history.push('/')\n                    })\n                    .catch((data) => {\n                        dispatch(disableLoading());\n                        if (data) {\n                            //user not registered\n                            history.push({\n                                pathname: '/register',\n                                state: data\n                            })\n                        }\n                    })\n                break;\n            case 'Google': case 'Facebook':\n                userData = {\n                    name: thirdPartyResponse.data.name,\n                    email: thirdPartyResponse.data.email,\n                }\n                getUserLoginData(userData)\n                    .then((data) => {\n                        //user is registered\n                        dispatch(disableLoading());\n                        setLoginResponseToServer();\n                        data.source = thirdPartyResponse.source;\n                        dispatch(loginUser(data));\n                        dispatch(displayNotification({\n                            msg: \"Login successfully\",\n                            type: NOTIFICATION_SUCCCESS,\n                            time: 3000\n                        }));\n                        if (state.currentLoginFlow == 'competition') history.push('/competitions');\n                        else if (state.currentLoginFlow == 'subscription') history.push('/subscription');\n                        else if (state.currentLoginFlow == 'upload-video') setOpenVdoUploadModal(true);\n                        else history.push('/')\n                    })\n                    .catch((data) => {\n                        dispatch(disableLoading());\n                        if (data) {\n                            data.source = thirdPartyResponse.source;\n                            //user not registered\n                            history.push({\n                                pathname: '/register',\n                                state: data\n                            })\n                        }\n                    })\n                break;\n        }\n    }\n\n    return (\n        <div className=\"login-wrap clearfix\">\n            <form className=\"form-wrap clearfix\" onSubmit={(e) => signinUser(e, 'cred')}>\n                <div className=\"heading-outer\">\n                    <div className=\"heading1\">Welcome Back!</div>\n                    <div className=\"heading2\">Login to your existing Boogalu account.</div>\n                </div>\n                <div className=\"form-outer clearfix\">\n                    <div className=\"input-wrap\">\n                        <TextField className=\"input-field\"\n                            required\n                            id=\"outlined-required-username\"\n                            label=\"Username / Email / Phone\"\n                            onChange={handleChange('username')}\n                            value={loginCred.username}\n                            variant=\"outlined\"\n                        />\n                    </div>\n                    <div className=\"input-wrap\">\n                        <FormControl className=\"\" variant=\"outlined\" style={{ width: '100%' }}>\n                            <InputLabel htmlFor=\"outlined-adornment-password\">Password</InputLabel>\n                            <OutlinedInput\n                                required\n                                id=\"outlined-adornment-password\"\n                                type={loginCred.showPassWord ? 'text' : 'password'}\n                                value={loginCred.password}\n                                onChange={handleChange('password')}\n                                endAdornment={\n                                    <InputAdornment position=\"end\">\n                                        <IconButton\n                                            aria-label=\"toggle password visibility\"\n                                            onClick={showPassword}\n                                            onMouseDown={handleMouseDownPassword}\n                                            edge=\"end\"\n                                        >\n                                            {loginCred.showPassWord ? <Visibility /> : <VisibilityOff />}\n                                        </IconButton>\n                                    </InputAdornment>\n                                }\n                                labelWidth={70}\n                            />\n                        </FormControl>\n                    </div>\n                    <div className=\"action-wrap\">\n                        {LoginError && <div className=\"login-error\">\n                            {LoginError}\n                        </div>}\n                        <div className=\"submit-btn clearfix\">\n                            <Button variant=\"contained\" type=\"submit\" color=\"primary\">Sign In\n                            <ArrowRightSharpIcon />\n                            </Button>\n                        </div>\n                        <div className=\"forgot-password clearfix\">\n                            <div>Forgot Password ?</div>\n                        </div>\n                    </div>\n                    <div className=\"or-seprator clearfix\">\n                        <span></span>\n                        <div>OR</div>\n                        <span></span>\n                    </div>\n                    <div className=\"login-with\">\n                        <p className=\"loginWithTitle\">Login with</p>\n                        <div className=\"login-with-google\">\n                            <GoogleLogin\n                                className=\"google-login-btn\"\n                                clientId=\"417866547364-mesv7a9cn6bj4n3ge45s8b6hhl1vdam0.apps.googleusercontent.com\"\n                                buttonText=\"Login with Google\"\n                                onSuccess={successResponseGoogle}\n                                onFailure={failureResponseGoogle} >\n                            </GoogleLogin>\n                        </div>\n                        <div className=\"login-with-fb\">\n                            <div className=\"login-with-fb\">\n                                <FacebookLogin\n                                    appId=\"813330422546108\"\n                                    autoLoad={false}\n                                    fields=\"name,email,picture\"\n                                    callback={responseFacebook}\n                                    cssClass=\"facebook-login-btn\"\n                                    icon={<FacebookIcon />}\n                                />\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"already-login-wrap\">\n                        <div className=\"text-wrap\">New to Boogalu?</div>\n                        <Button color=\"primary\" onClick={() => history.push('/register')}>SIGN UP</Button>\n                    </div>\n                </div>\n            </form>\n\n            <div className=\"img-wrap\">\n                <img src={bgImg} />\n            </div>\n            {openVdoUploadModal && <VideoUploader handleClose={() => setOpenVdoUploadModal(false)} />}\n        </div>\n    );\n}","/Users/danny/Documents/Projects/boogalu/src/Components/Navigation/index.js",["277","278","279","280","281","282","283","284","285","286","287","288","289","290","291"],"import React, { useState, useEffect, useRef } from 'react';\nimport { FaHome, FaBookReader, FaCloudUploadAlt, FaTrophy, FaStaylinked, FaUserAlt } from 'react-icons/fa';\nimport boogaluLogo from '../../Images/Boogalu-logo.svg';\nimport { useHistory } from \"react-router-dom\";\nimport { useStoreConsumer } from '../../Providers/StateProvider';\nimport { logoutUser } from '../../Actions/User';\nimport AccountCircleOutlinedIcon from '@material-ui/icons/AccountCircleOutlined';\nimport { enableLoginFlow } from \"../../Actions/LoginFlow\";\nimport { disableLoginFlow } from \"../../Actions/LoginFlow\";\nimport VideoUploader from \"../VideoUploader\";\nimport { NOTIFICATION_SUCCCESS, NOTIFICATION_ERROR } from \"../../Constants\";\nimport { displayNotification } from \"../../Actions/Notification\";\nimport * as $ from 'jquery';\nconst SCROLL_TOP_LIMIT = 200;\n\nfunction Navigation() {\n    const [goingUpClass, setGoingUpClass] = useState('');\n    const [hideVdoUploadBtn, setHideVdoUploadBtn] = useState(false);\n    const [didMount, setDidMount] = useState(false);\n    const [isMobile, toggleMobile] = useState(false);\n    const [goingDownClass, setGoingDownClass] = useState('');\n    const [showProfileTab, setShowProfileTab] = useState(false);\n    const ref = useRef();\n    const mobilHomelinkRef = useRef();\n    const history = useHistory();\n    const { state, dispatch } = useStoreConsumer();\n    const loggedInUser = state.loggedInUser;\n    const [openVdoUploadModal, setOpenVdoUploadModal] = useState(false)\n    const [activeRoute, setActiveRoute] = useState('');\n\n    useOnClickOutside(ref, () => setShowProfileTab(false));\n\n    useEffect(() => {\n        setDidMount(true);\n        setHideVdoUploadBtn(false);\n        let windowViewPortWidth = window.innerWidth;\n        if (windowViewPortWidth > 1023) {\n            toggleMobile(false);\n        } else {\n            toggleMobile(true);\n        }\n\n        const handleScroll = () => {\n            const currentScrollY = window.scrollY;\n            if (currentScrollY < SCROLL_TOP_LIMIT) {\n                setGoingUpClass('');\n                setGoingDownClass('');\n            } else {\n                setGoingUpClass('scrolled-up');\n                setTimeout(() => {\n                    setGoingDownClass('scrolled-down');\n                }, 200);\n            }\n        };\n\n        const windowResize = () => {\n            windowViewPortWidth = window.innerWidth;\n            if (windowViewPortWidth > 1023) {\n                toggleMobile(false);\n            } else {\n                toggleMobile(true);\n            }\n        }\n\n\n        setTimeout(() => {\n            const pathName = history?.location?.pathname.split('/')[1];\n            const navLinks = document.querySelectorAll('.nav-ul a');\n            if (pathName.includes('register') || pathName.includes('admin')) {\n                setHideVdoUploadBtn(true);\n            }\n            if (navLinks && navLinks.length) {\n                navLinks.forEach((ele) => {\n                    const getHref = ele.getAttribute('href').toLocaleLowerCase();\n                    if (pathName?.length && getHref.includes(pathName)) {\n                        ele.classList.add('active');\n                    }\n                });\n            }\n        }, 1000);\n\n        window.addEventListener(\"resize\", windowResize, { passive: true });\n        window.addEventListener(\"scroll\", handleScroll, { passive: true });\n        return () => setDidMount(false);\n    }, [isMobile]);\n\n    useEffect(() => {\n        const listenRouteChange = history.listen((location, action) => {\n            const pathName = location?.pathname.split('/')[1];\n            if (pathName.includes('admin') || pathName.includes('register')) setHideVdoUploadBtn(true);\n            else setHideVdoUploadBtn(false);\n            if ((!pathName || pathName.includes('lessons') || pathName.includes('contactus') || pathName.includes('home')) && state.currentLoginFlow) {\n                dispatch(disableLoginFlow());\n            }\n            if (state.currentLoginFlow == 'upload-video' && pathName.includes('competitions') || pathName.includes('lessons')) dispatch(disableLoginFlow());\n            //set active route name\n\n        });\n    })\n\n    const logout = () => {\n        dispatch(displayNotification({\n            msg: \"Logout Successfully\",\n            type: NOTIFICATION_SUCCCESS,\n            time: 3000\n        }))\n        console.log('logout success');\n        dispatch(logoutUser());\n        setShowProfileTab(false)\n        history.push(`/login`);\n    }\n\n    const onClickNav = (e, route) => {\n        e.preventDefault();\n        const navLinks = document.querySelectorAll('.nav-ul a');\n\n        setTimeout(() => {\n            const pathName = history?.location?.pathname.split('/')[1];\n            if (pathName.includes('register') || pathName.includes('admin')) setHideVdoUploadBtn(true);\n            else setHideVdoUploadBtn(false);\n        });\n\n        if (navLinks && navLinks.length) {\n            navLinks.forEach((ele) => {\n                if (ele.classList.contains('active')) {\n                    ele.classList.remove('active');\n                }\n            });\n        }\n        if (route) {\n            history.push(`/${route}`);\n            e.target.classList.add('active');\n            setTimeout(() => {\n                let target = $(`.${route}`);\n                if (target && target.offset()) {\n                    $('html,body').animate({\n                        scrollTop: target.offset().top - 200\n                    }, 700);\n                }\n            }, 100);\n        } else {\n            history.push(`/`);\n            setTimeout(() => {\n                let target = $(`.homepage`);\n                if (target.length) {\n                    $('html,body').animate({\n                        scrollTop: target.offset().top - 200\n                    }, 700);\n                }\n            }, 100);\n        }\n    }\n    // Hook\n    function useOnClickOutside(ref, handler) {\n        useEffect(\n            () => {\n                const listener = event => {\n                    if (!ref.current || ref.current.contains(event.target)) {\n                        return;\n                    }\n\n                    handler(event);\n                };\n                document.addEventListener('mousedown', listener);\n                document.addEventListener('touchstart', listener);\n                return () => {\n                    document.removeEventListener('mousedown', listener);\n                    document.removeEventListener('touchstart', listener);\n                };\n            },\n            [ref, handler]\n        );\n    }\n\n    function navigateToUserRegistrationLogin(path) {\n        setHideVdoUploadBtn(true);\n        history.push(`/${path}`)\n    }\n\n    if (!didMount) {\n        return null;\n    }\n\n    const uploadVdo = (e) => {\n        // setHideVdoUploadBtn(true);\n        e.preventDefault();\n        if (loggedInUser && loggedInUser.email && loggedInUser.phone) {\n            // history.push({\n            //     pathname: '/upload-video',\n            //     state: null\n            // })\n            setOpenVdoUploadModal(true);\n        } else {\n            dispatch(enableLoginFlow('upload-video'));\n            history.push({\n                pathname: '/login',\n                state: null\n            })\n        }\n    }\n\n    return (\n        <>\n            <nav className={`navigation-wrap ${goingUpClass} ${goingDownClass} ${!loggedInUser.username ? 'user-logged-out' : ''}`}>\n                <div className=\"flex-container desktop-navigation\">\n                    <h1 title=\"home\" >\n                        <a href=\"/\" onClick={(e) => onClickNav(e, '')}>\n                            <img src={boogaluLogo} alt=\"Boogalu\" />\n                        </a>\n                    </h1>\n                    {\n                        !isMobile ?\n                            <ul className=\"flex-1 nav-ul\">\n                                {loggedInUser.username && <li><a href=\"#profile\" onClick={(e) => onClickNav(e, 'profile')}>Profile</a></li>}\n                                <li><a href=\"#Competitions\" onClick={(e) => onClickNav(e, 'competitions')}>Competitions</a></li>\n                                <li><a href=\"#Lessons\" onClick={(e) => onClickNav(e, 'lessons')}>Lessons</a></li>\n                                {\n                                    !hideVdoUploadBtn ?\n                                        <li>\n                                            <a href=\"\" onClick={(e) => uploadVdo(e)}>Upload</a>\n                                        </li> : ''\n                                }\n                            </ul> : ''\n                    }\n                    {(!loggedInUser || !loggedInUser.phone) && <div className=\"flex-2 signup-wrap\" >\n                        <button className=\"btn primary-light login\" onClick={() => navigateToUserRegistrationLogin('login')}>Login</button>\n                        <button className=\"btn primary-dark signup\" onClick={() => navigateToUserRegistrationLogin('register')}>Sign Up</button>\n                    </div>}\n\n                    {loggedInUser && loggedInUser.phone && <div className=\"flex-2 signup-wrap\" >\n                        <div className=\"profile\" ref={ref}>\n                            {loggedInUser.profileImage ? <div className=\"profile-img-wrap\">\n                                <img src={loggedInUser.profileImage} onClick={() => setShowProfileTab(true)} style={{ fontSize: '35px' }} />\n                            </div> : <AccountCircleOutlinedIcon onClick={() => setShowProfileTab(true)} style={{ fontSize: '35px' }} />}\n\n                            {showProfileTab && <div className=\"profile-tab-wrap\">\n                                <div className=\"profile\" onClick={() => { history.push('/subscription'); setShowProfileTab(false) }}>Subscription</div>\n                                <div className=\"logout\" onClick={() => logout()}>Logout</div>\n                            </div>}\n                        </div>\n                        {/* <button className=\"signup\" onClick={() => logout()}>Logout</button> */}\n                    </div>}\n                </div>\n                {\n                    !hideVdoUploadBtn ?\n                        <a href=\"\" className=\"upload-btn\" onClick={(e) => uploadVdo(e)}>\n                            <i><FaCloudUploadAlt /></i>\n                        </a> : ''\n                }\n                {\n                    isMobile ?\n                        <div className=\"sticky-mobile-menu\">\n                            <ul className=\"flex-1 nav-ul\">\n                                <li>\n                                    <a href=\"/\" ref={mobilHomelinkRef} onClick={(e) => onClickNav(e, '')} className={activeRoute == '' ? 'active' : ''}>\n                                        <i>\n                                            <FaHome />\n                                        </i>\n                                        <span>Home</span>\n                                    </a>\n                                </li>\n                                {loggedInUser.username && <li>\n                                    <a href=\"#profile\" onClick={(e) => onClickNav(e, 'profile')} className={activeRoute == '' ? 'active' : ''}>\n                                        <i><FaUserAlt /></i>\n                                        <span>Profile</span>\n                                    </a>\n                                </li>}\n                                <li>\n                                    <a href=\"#Lessons\" onClick={(e) => onClickNav(e, 'lessons')} className={activeRoute == 'competitions' ? 'active' : ''}>\n                                        <i><FaBookReader /></i>\n                                        <span>Lessons</span>\n                                    </a>\n                                </li>\n                                <li>\n                                    <a href=\"#upload\" onClick={(e) => onClickNav(e, 'competitions')} className={activeRoute == 'competitions' ? 'active' : ''}>\n                                        <i><FaTrophy /></i>\n                                        <span>Competition</span>\n                                    </a>\n                                </li>\n                                {/* <li>\n                                    <a href=\"#Subscription\" onClick={(e) => onClickNav(e, 'subscription')}>\n                                        <i><FaStaylinked /></i>\n                                        <span>Subscription</span>\n                                    </a>\n                                </li> */}\n                            </ul>\n                        </div>\n                        : ''\n                }\n                {openVdoUploadModal && <VideoUploader handleVdoUploadResponse={() => setOpenVdoUploadModal(false)} />}\n            </nav>\n        </>\n    )\n}\nexport default Navigation","/Users/danny/Documents/Projects/boogalu/src/Components/Profile/Profile.js",["292","293","294","295","296","297","298","299","300","301","302","303","304","305","306","307","308","309","310","311","312","313","314","315","316","317","318","319","320","321","322","323","324","325","326","327","328","329","330","331","332"],"import React, { useState, useEffect, useRef } from 'react'\nimport { useHistory } from \"react-router-dom\";\nimport { useStoreConsumer } from '../../Providers/StateProvider';\nimport AccountCircleOutlinedIcon from '@material-ui/icons/AccountCircleOutlined';\nimport LoyaltyOutlinedIcon from '@material-ui/icons/LoyaltyOutlined';\nimport FavoriteBorderOutlinedIcon from '@material-ui/icons/FavoriteBorderOutlined';\nimport CollectionsOutlinedIcon from '@material-ui/icons/CollectionsOutlined';\nimport PropTypes from 'prop-types';\nimport { useTheme } from '@material-ui/core/styles';\nimport SwipeableViews from 'react-swipeable-views';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport firstPrizeBadge from '../../Images/1st-prize-badge.png';\nimport secondPrizeBadge from '../../Images/2nd-prize-badge.png';\nimport thirdPrizeBadge from '../../Images/3rd-prize-badge.png';\nimport * as $ from 'jquery';\nimport { getUploadedVideosByUserId } from \"../../Services/UploadedVideo.service\";\nimport { getCompetitionByUserId } from \"../../Services/EnrollCompetition.service\";\nimport CompetitionsDetails from \"../CompetitionsDetails\";\nimport { getCompetitionsList } from \"../../Services/Competition.service\";\nimport { setActiveCompetition } from \"../../Actions/Competition\";\nimport Vedio from \"../Vedio/Video\";\nimport { enableLoading, disableLoading } from \"../../Actions/Loader\";\nimport { removeDataRefetchModuleName } from \"../../Actions/Utility\";\nimport FavoriteBorder from '@material-ui/icons/FavoriteBorder';\nimport Favorite from '@material-ui/icons/Favorite';\nimport CommentOutlined from '@material-ui/icons/CommentOutlined';\nimport { updateVideoLikes, updateVideoComments } from \"../../Services/UploadedVideo.service\";\nimport VideoDetails from '../VideoDetails'\nimport { getAllUser } from \"../../Services/User.service\";\nimport { getUploadedVideosList } from \"../../Services/UploadedVideo.service\";\nimport { FaBars } from 'react-icons/fa';\nimport { disableLoginFlow, enableLoginFlow } from \"../../Actions/LoginFlow\";\nimport { setActiveVideoForCompetition } from \"../../Actions/Competition\";\nfunction TabPanel(props) {\n    const { children, value, index, ...other } = props;\n\n    return (\n        <div\n            role=\"tabpanel\"\n            hidden={value !== index}\n            id={`full-width-tabpanel-${index}`}\n            aria-labelledby={`full-width-tab-${index}`}\n            {...other}\n        >\n            {value === index && (\n                <Box p={3}>\n                    <Typography>{children}</Typography>\n                </Box>\n            )}\n        </div>\n    );\n}\n\nTabPanel.propTypes = {\n    children: PropTypes.node,\n    index: PropTypes.any.isRequired,\n    value: PropTypes.any.isRequired,\n};\n\nfunction a11yProps(index) {\n    return {\n        id: `full-width-tab-${index}`,\n        'aria-controls': `full-width-tabpanel-${index}`,\n    };\n}\nfunction Profile() {\n    const history = useHistory();\n    const theme = useTheme();\n    const { state, dispatch } = useStoreConsumer();\n    const [value, setValue] = useState(0);\n    const loggedInUser = state.loggedInUser;\n    const [UserUploadedVideoList, setUserUploadedVideoList] = useState([]);\n    const [UserCompetitionsList, setUserCompetitionsList] = useState([]);\n    const [UserLikedVideoList, setUserLikedVideoList] = useState([]);\n    const [openUserEnrolledCompDetailsModal, setOpenUserEnrolledCompDetailsModal] = useState(false);\n    const [initialStep, setInitialStep] = useState(1);\n    const profileOuterRef = useRef();\n    const userTabsRef = useRef();\n    const [activeVideoObj, setActiveVideoObj] = useState({})\n    const [commentModal, setCommentModal] = useState(false)\n    const [userList, setUserList] = useState([])\n    const [showProfileTab, setShowProfileTab] = useState(false);\n    const [openUploadCompModalFor, setOpenUploadCompModalFor] = useState(null)\n    const ref = useRef();\n    useOnClickOutside(ref, () => { setShowProfileTab(false); setOpenUploadCompModalFor(null) });\n\n    useEffect(() => {\n        if (!loggedInUser || !loggedInUser.email) history.push('/login')\n        $('html,body').animate({\n            scrollTop: 0\n        }, 500);\n\n        if (state.currentLoginFlow == 'profile-competition') {\n            setValue(1);\n            dispatch(disableLoginFlow());\n            dispatch(setActiveVideoForCompetition());\n        };\n\n        document.addEventListener('scroll', onWindowScroll);\n        dispatch(enableLoading());\n        getCompetitionByUserId(loggedInUser.key).subscribe((list) => { dispatch(disableLoading()); setUserCompetitionsList(list) });\n        // getCompetitionByUserId(loggedInUser.key).subscribe((list) => UserLikedVideoList(list));\n    }, []);\n\n    const getAllUserList = () => {\n        return new Promise((res, rej) => {\n            getAllUser().subscribe((users) => {\n                res(users);\n            });\n        })\n    }\n    const getAllUploadedVideos = () => {\n        return new Promise((res, rej) => {\n            getUploadedVideosList().subscribe((videos) => {\n                res(videos);\n            });\n        })\n    }\n\n    useEffect(() => {\n        getUploadedVideosByUserId(loggedInUser.key).subscribe((list) => {\n            setUserUploadedVideoList(list);\n            if (list.length != 0) {\n                getAllUserList().then((data) => {\n                    setUserList(data);\n                    let userList = data;\n                    let userVdoCopy = [...list];\n                    userVdoCopy.map((vdoObj) => {\n                        if (vdoObj.likes && vdoObj.likes.length) {\n                            vdoObj.likes.map((likeObj) => {\n                                let userData = userList.filter(userObj => userObj.key == likeObj.userId);\n                                if (userData.length != 0) {\n                                    likeObj.username = userData[0].username;\n                                    likeObj.profileImage = userData[0].profileImage;\n                                }\n                            })\n                        }\n                        if (vdoObj.comments && vdoObj.comments.length) {\n                            vdoObj.comments.map((commentObj) => {\n                                let userData = userList.filter(userObj => userObj.key == commentObj.userId);\n                                if (userData.length != 0) {\n                                    commentObj.username = userData[0].username;\n                                    commentObj.profileImage = userData[0].profileImage;\n                                }\n                            })\n                        }\n                    })\n                    dispatch(disableLoading());\n                    console.log('userVdoCopy', userVdoCopy)\n                    setUserUploadedVideoList(userVdoCopy)\n                })\n            } else dispatch(disableLoading());\n        });\n    }, [])\n\n    useEffect(() => {\n        if (state.refetchDataModule == 'user-uploaded-video') {\n            getUploadedVideosByUserId(loggedInUser.key).subscribe((list) => { dispatch(removeDataRefetchModuleName()); setUserUploadedVideoList(list) });\n        }\n    }, [state])\n\n    function onWindowScroll(event) {\n        if (window.outerWidth > 1023) {\n            if (window.scrollY >= 302) {\n                toggleStickyHeader('add');\n            } else {\n                toggleStickyHeader('remove');\n            }\n        } else {\n            if (window.scrollY >= 294) {\n                toggleStickyHeader('add');\n            } else {\n                toggleStickyHeader('remove');\n            }\n        }\n    }\n\n    function toggleStickyHeader(toggleValue) {\n        if (toggleValue === 'add') {\n            if (userTabsRef.current) {\n                userTabsRef.current.classList.add('sticky');\n            }\n            if (profileOuterRef.current) {\n                profileOuterRef.current.classList.add('sticky');\n            }\n        } else {\n            if (userTabsRef.current) {\n                userTabsRef.current.classList.remove('sticky');\n            }\n            if (profileOuterRef.current) {\n                profileOuterRef.current.classList.remove('sticky');\n            }\n        }\n    }\n\n    const handleChange = (event, newValue) => {\n        setValue(newValue);\n        if (newValue == 1 && UserLikedVideoList.length == 0) {\n            dispatch(enableLoading());\n            getAllUploadedVideos().then((feeds) => {\n                if (feeds) {\n                    let userLikedVdos = []\n                    feeds.map((feed) => {\n                        if (feed.likes && feed.likes.length) {\n                            let isAvail = feed.likes.filter(data => data.userId == loggedInUser.key)\n                            if (isAvail.length != 0) userLikedVdos.push(feed)\n                        }\n                    })\n                    dispatch(disableLoading());\n                    setUserLikedVideoList(userLikedVdos);\n                } else dispatch(disableLoading());\n            })\n        }\n    };\n\n    const handleChangeIndex = (index) => {\n        setValue(index);\n    };\n\n    const openCompetitionDetailsModal = (competition) => {\n        getCompetitionsList().subscribe(allCompList => {\n            let isUserEnrolled = allCompList.filter((data) => data.key == competition.compId);\n            if (isUserEnrolled.length) {\n                isUserEnrolled[0].isUserEnrolled = true;\n                isUserEnrolled[0].userSubmitedDetails = competition;\n                setInitialStep(2);\n                dispatch(setActiveCompetition(isUserEnrolled[0]));\n                setOpenUserEnrolledCompDetailsModal(true);\n            }\n        });\n    }\n\n\n    const addUserDetailsToFeed = (feed, allUser) => {\n        if (feed.likes && feed.likes.length) {\n            feed.likes.map((likeObj) => {\n                let userData = allUser.filter(userObj => userObj.key == likeObj.userId);\n                if (userData.length != 0) {\n                    likeObj.username = userData[0].username;\n                    likeObj.profileImage = userData[0].profileImage;\n                }\n            })\n        }\n        if (feed.comments && feed.comments.length) {\n            feed.comments.map((commentObj) => {\n                let userData = allUser.filter(userObj => userObj.key == commentObj.userId);\n                if (userData.length != 0) {\n                    commentObj.username = userData[0].username;\n                    commentObj.profileImage = userData[0].profileImage;\n                }\n            })\n        }\n    }\n\n    const handleLikes = (video, status) => {\n        let videoObj = { ...video }\n        if (status == 'liked') {\n            if (videoObj.likes) {\n                videoObj.likes.push({ value: 1, userId: loggedInUser.key })\n            } else {\n                videoObj.likes = [{ value: 1, userId: loggedInUser.key }]\n            }\n        } else {\n            let likes = videoObj.likes.filter(data => data.userId != loggedInUser.key)\n            videoObj.likes = likes\n        }\n        videoObj.likes.map((likeObj) => { delete likeObj.profileImage; delete likeObj.username; })\n        updateVideoLikes(videoObj.key, videoObj).subscribe(() => {\n            let feedListCopy = [...UserUploadedVideoList]\n            feedListCopy.map((feed) => {\n                if (feed.key == videoObj.key) {\n                    feed.likes = videoObj.likes\n                }\n\n                if (feed.likes && feed.likes.length) {\n                    let isAvail = feed.likes.filter(data => data.userId == loggedInUser.key)\n                    isAvail.length > 0 ? feed.isLiked = true : feed.isLiked = false\n                } else {\n                    feed.isLiked = false\n                }\n                addUserDetailsToFeed(feed, userList);\n            })\n            setUserUploadedVideoList(feedListCopy)\n        })\n    }\n\n    const handleComments = (commentString) => {\n        let videoObj = { ...activeVideoObj }\n        if (videoObj.comments) {\n            videoObj.comments.push({ value: commentString, userId: loggedInUser.key })\n        } else {\n            videoObj.comments = [{ value: commentString, userId: loggedInUser.key }]\n        }\n\n        videoObj.comments.map((commentObj) => { delete commentObj.profileImage; delete commentObj.username; })\n        updateVideoComments(videoObj.key, videoObj).subscribe(() => {\n            let feedListCopy = [...UserUploadedVideoList]\n            feedListCopy.map((feed) => {\n                if (feed.key == videoObj.key) {\n                    feed.comments = videoObj.comments\n                }\n                addUserDetailsToFeed(feed, userList);\n            })\n            setUserUploadedVideoList(feedListCopy)\n        })\n    }\n\n    const handleCommentClick = (video) => {\n        setCommentModal(true);\n        setActiveVideoObj(video)\n    }\n\n    const redirectToCompetition = () => {\n        dispatch(setActiveVideoForCompetition(openUploadCompModalFor));\n        dispatch(enableLoginFlow('profile-competition'));\n        history.push('/competitions');\n        setShowProfileTab(false);\n    }\n\n    // Hook\n    function useOnClickOutside(ref, handler) {\n        useEffect(\n            () => {\n                const listener = event => {\n                    if (!ref.current || ref.current.contains(event.target)) {\n                        return;\n                    }\n\n                    handler(event);\n                };\n                document.addEventListener('mousedown', listener);\n                document.addEventListener('touchstart', listener);\n                return () => {\n                    document.removeEventListener('mousedown', listener);\n                    document.removeEventListener('touchstart', listener);\n                };\n            },\n            [ref, handler]\n        );\n    }\n\n\n    return (\n        <div className=\"profile-outer\" ref={profileOuterRef}>\n            <div className=\"profile-details-wrap clearfix\">\n                <div className=\"profile-img\">\n                    {\n                        loggedInUser.profileImage ?\n                            <img src={loggedInUser.profileImage} />\n                            :\n                            <AccountCircleOutlinedIcon />\n                    }\n                </div>\n                <div className=\"profile-details clearfix\">\n                    <div className=\"username-wrap clearfix\">\n                        <div className=\"username\">\n                            {loggedInUser.username}\n                        </div>\n                        <div className=\"edit-profile\" onClick={() => history.push('/profile/edit')}>\n                            Edit Profile\n                        </div>\n                    </div>\n                    <div className=\"followers-wrap clearfix\">\n                        <div className=\"posts\">\n                            <span>{UserUploadedVideoList.length}</span> Posts\n                        </div>\n                        {/* <div className=\"followers\">\n                            <span>999</span> Followers\n                        </div>\n                        <div className=\"following\">\n                            <span>999</span> Followings\n                        </div> */}\n                    </div>\n                    <div className=\"bio-wrap\">\n                        <div className=\"fullname\">\n                            {loggedInUser.name}\n                        </div>\n                        {loggedInUser.bio ? <div className=\"bio\">\n                            {loggedInUser.bio}\n                        </div> : <div className=\"bio\">\n                                Older dancers (especially from the SoCal dance community) – even if you can appreciate and welcome the ways dance has evolved, you’ll still feel pangs of nostalgia when going through this list.\n                        </div>}\n                    </div>\n                </div>\n            </div>\n            <div className=\"profile-content-wrap\">\n                <div className=\"headers-wrap\">\n                    <div className=\"user-tabs-wrap\" ref={userTabsRef}>\n                        <Tabs\n                            value={value}\n                            onChange={handleChange}\n                            indicatorColor=\"primary\"\n                            textColor=\"primary\"\n                            variant=\"fullWidth\"\n                            aria-label=\"full width tabs example\"\n                        >\n                            <Tab label=\"Posts\" icon={<CollectionsOutlinedIcon />} {...a11yProps(0)} />\n                            <Tab label=\"Competitions\" icon={<LoyaltyOutlinedIcon />} {...a11yProps(1)} />\n                            {/* <Tab label=\"Liked\" icon={<FavoriteBorderOutlinedIcon />}{...a11yProps(1)} /> */}\n                        </Tabs>\n                    </div>\n                    <SwipeableViews\n                        axis={theme.direction === 'rtl' ? 'x-reverse' : 'x'}\n                        index={value}\n                        onChangeIndex={handleChangeIndex}>\n                        <TabPanel value={value} index={0} dir={theme.direction}>\n                            <div className=\"flex-container\" >\n                                {UserUploadedVideoList.length !== 0 ?\n                                    <div className=\"feed-wrap\">\n                                        {UserUploadedVideoList && UserUploadedVideoList.map((vdo) => {\n                                            return <div key={vdo.key} className=\"profile-vdo-wrap\">\n                                                {/* TODO: This badges code block will be dynamic once we have\n                                                    winners data and on the basis of their rank the respective \n                                                    badge will apper on that video\n                                                */}\n                                                {/* {\n                                                    index === 0 ? \n                                                    <div className=\"winners-badges\">\n                                                        <img src={firstPrizeBadge} alt=\"first prize\" />\n                                                    </div>: ''\n                                                }\n\n                                                {\n                                                    index === 2 ?\n                                                    <div className=\"winners-badges\">\n                                                        <img src={secondPrizeBadge} alt=\"Second prize\" />\n                                                    </div>: ''\n                                                }\n\n{\n                                                    index === 3 ?\n                                                    <div className=\"winners-badges\">\n                                                        <img src={thirdPrizeBadge} alt=\"Third prize\" />\n                                                    </div>: ''\n                                                } */}\n                                                <div className=\"menu\" onClick={() => { setOpenUploadCompModalFor(vdo.key); setShowProfileTab(true) }}>\n                                                    <i><FaBars /></i>\n                                                </div>\n                                                {showProfileTab && openUploadCompModalFor == vdo.key && <div className=\"profile-tab-wrap\" ref={ref}>\n                                                    <div className=\"profile\" onClick={() => redirectToCompetition()}>Upload for competition</div>\n                                                </div>}\n                                                <div className=\"vdo-card\">\n                                                    <div>\n                                                        <Vedio vdoObj={vdo} />\n                                                    </div>\n                                                    <div className=\"video-title-like-wrap\">\n                                                        <div className=\"title\">{vdo.title}</div>\n                                                        <div className=\"like-comment\">\n                                                            {vdo.likes && vdo.likes.length > 0 && <div className=\"likes-count\">{vdo.likes.length} Likes</div>}\n                                                            {!vdo.isLiked && <FavoriteBorder title=\"Unlike\" onClick={() => handleLikes(vdo, 'liked')} />}\n                                                            {vdo.isLiked && <Favorite title=\"Like\" onClick={() => handleLikes(vdo, 'unliked')} />}\n                                                            <CommentOutlined title=\"comment\" onClick={() => handleCommentClick(vdo)} />\n                                                        </div>\n\n                                                    </div>\n                                                </div>\n                                            </div>\n                                        })}\n                                    </div>\n                                    :\n                                    <div>No video posted yet !</div>}\n                            </div>\n                        </TabPanel>\n                        {/* <TabPanel value={value} index={1} dir={theme.direction}>\n                            <div className=\"flex-container\" >\n                                {UserLikedVideoList.length !== 0 ? UserLikedVideoList.map((vdoObj) => {\n                                    return <div className=\"flex-basis-3 like-tab\" key={vdoObj.key}>\n                                        <div>\n                                            <Vedio vdoObj={vdoObj} />\n                                        </div>\n                                        <div className=\"video-title-like-wrap\">\n                                            <div className=\"title\">{vdoObj.title}</div>\n                                            <div className=\"like-comment\">\n                                                {vdoObj.likes && vdoObj.likes.length > 0 && <div className=\"likes-count\">{vdoObj.likes.length} Likes</div>}\n                                            </div>\n                                        </div>\n                                    </div>\n                                }) :\n                                    <div>No video liked yet !</div>}\n                            </div>\n                        </TabPanel> */}\n                        <TabPanel value={value} index={1} dir={theme.direction}>\n                            <div className=\"flex-container\" >\n                                {UserCompetitionsList.length !== 0 ? UserCompetitionsList.map((competition) => {\n                                    return <div className=\"flex-basis-3 competition-tab\" key={competition.key} onClick={() => openCompetitionDetailsModal(competition)}>\n                                        <div>{competition.compName}</div>\n                                        <img src={competition.compImg} />\n                                    </div>\n                                }) :\n                                    <div>No competition enrolled yet !</div>}\n                            </div>\n                        </TabPanel>\n                    </SwipeableViews>\n                </div>\n            </div>\n            {commentModal && <VideoDetails handleClose={() => setCommentModal(false)} handleLikes={handleLikes} handleComments={handleComments} videoObj={activeVideoObj} />}\n            {openUserEnrolledCompDetailsModal && <CompetitionsDetails open={openUserEnrolledCompDetailsModal} handleClose={() => setOpenUserEnrolledCompDetailsModal(false)} initialStep={initialStep} />}\n        </div>\n    )\n}\n\nexport default Profile\n","/Users/danny/Documents/Projects/boogalu/src/Components/Splash/index.js",[],"/Users/danny/Documents/Projects/boogalu/src/Components/Upcoming/index.js",["333","334","335","336"],"/Users/danny/Documents/Projects/boogalu/src/Components/Subscriptions/index.js",["337","338","339","340","341"],"import React, { useState, useEffect } from 'react'\nimport { useHistory } from \"react-router-dom\";\nimport { useStoreConsumer } from '../../Providers/StateProvider';\nimport { getActiveSubscriptionsList } from \"../../Services/Subscription.service\";\nimport { setActiveSubscription } from \"../../Actions/Subscription\";\nimport BuySubscription from \"../BuySubscription\";\nimport { enableLoginFlow, disableLoginFlow } from \"../../Actions/LoginFlow\";\nimport { saveUserSubscription } from \"../../Services/User.service\";\nimport { loginUser } from \"../../Actions/User\";\nimport { SUBSCRIPTION_ACTIVE_STATUS, ADMIN_EMAIL_STAGING } from \"../../Constants\";\nimport { enableLoading, disableLoading } from \"../../Actions/Loader\";\nimport { sendEmail } from \"../../Services/Email.service\";\n\nfunction Subscriptions() {\n    const { state, dispatch } = useStoreConsumer();\n    const history = useHistory();\n    const loggedInUser = state.loggedInUser;\n    const [AvailableSubscriptions, setAvailableSubscriptions] = useState([]);\n    const [showSubscriptionDetails, setShowSubscriptionDetails] = useState(false);\n    const [activeStep, setActiveStep] = useState(1);\n    const [alreadySubscribed, setAlreadySubscribed] = useState(false)\n\n    const sendEmailToAdmin = () => {\n        let emailBody = `<div>\n            <h6 style=\"font-size: 17px;margin-bottom: 26px;\">User subscribed for ${state.activeSubscription.name}</h6>\n            <h4>User details -</h4>\n            <h6>${loggedInUser.name}</h6>\n            <h6>${loggedInUser.email}</h6>\n            <h6>${loggedInUser.phone}</h6>\n            </div>`;\n        let payload = {\n            mailTo: ADMIN_EMAIL_STAGING,\n            title: 'User subscribed',\n            content: emailBody\n        }\n        sendEmail(payload).subscribe((res) => {\n            if (!('error' in res)) {\n                console.log('Admin Email Send Successfully.');\n            } else console.log('Admin Email Send Failed.');\n        })\n    }\n\n    const sendEmailToUser = () => {\n        let emailBody = `<div>\n            <p><span >Congratulations</span>  <strong>${loggedInUser.name}</strong>, \n            you have subscribed to our 1-month subscription. Now, you can enroll in any active competitions for a month.</p>\n            <h4>Time To Express Your Talent on Our Platform during this Lockdown</h4>`;\n        let payload = {\n            mailTo: loggedInUser.email,\n            title: 'Boogalu subscription successfull',\n            content: emailBody\n        }\n        sendEmail(payload).subscribe((res) => {\n            if (!('error' in res)) {\n                console.log('Email to user Send Successfully.');\n            } else console.log('Email to user Send Failed.');\n        })\n    }\n    // check for payment status if user is in payment flow\n    useEffect(() => {\n        dispatch(enableLoading());\n        if (history.location.search && history.location.search.includes('status')) {\n            getActiveSubscriptionsList().subscribe((subscriptionsList) => {\n                setAvailableSubscriptions(subscriptionsList);\n                dispatch(disableLoading());\n                console.log(subscriptionsList);\n            })\n            let paymentStatus = history.location.search.split('status=')[1];\n            if (paymentStatus == 'success') {\n                const subscriptionSuccessObj = {\n                    subId: state.activeSubscription.key,\n                    type: state.activeSubscription.type,\n                    status: SUBSCRIPTION_ACTIVE_STATUS, // current subscription status Active or Ended\n                    subscribedAt: new Date()\n                }\n                let loggedInUserData = { ...loggedInUser };\n                if (loggedInUserData.subscriptions) loggedInUserData.subscriptions.push(subscriptionSuccessObj)\n                else (loggedInUserData.subscriptions = [subscriptionSuccessObj]);\n\n                dispatch(enableLoading());\n                saveUserSubscription(state.activeSubscription.key, loggedInUserData).subscribe((response) => {\n                    sendEmailToAdmin();\n                    sendEmailToUser();\n                    dispatch(loginUser(loggedInUserData));\n                    setShowSubscriptionDetails(true);\n                    dispatch(disableLoading());\n                    setActiveStep(2);\n                });\n            } else {\n                // payment failure\n                setShowSubscriptionDetails(true);\n                setActiveStep(3)\n            }\n            history.push('/subscription');\n        } else {\n            getActiveSubscriptionsList().subscribe((subscriptionsList) => {\n                setAvailableSubscriptions(subscriptionsList);\n                dispatch(disableLoading());\n                console.log(subscriptionsList);\n                //if user come from competition details \n                if (state.currentLoginFlow == 'competition-subscription') {\n                    let subscriptionForCompetition = subscriptionsList.filter((data) => data.type === 'competition-enrollment');\n                    dispatch(setActiveSubscription(subscriptionForCompetition[0]));\n                    setActiveStep(1);\n                    setShowSubscriptionDetails(true);\n                }\n            })\n            //is user go to login flow from itself(current page)\n            if (state.currentLoginFlow == 'subscription') {\n                dispatch(disableLoginFlow());\n                setShowSubscriptionDetails(true);\n            }\n        }\n    }, [])\n\n    useEffect(() => {\n        let isSubscribed = loggedInUser?.subscriptions?.filter((data) => data.type === 'competition-enrollment');\n        if (isSubscribed && isSubscribed.length) setAlreadySubscribed(true);\n    }, [state.loggedInUser])\n\n    const setSubscription = (subscription) => {\n        dispatch(setActiveSubscription(subscription));\n        setActiveStep(1);\n        if (loggedInUser.name && loggedInUser.phone && loggedInUser.username) {\n            setShowSubscriptionDetails(true);\n        } else {\n            dispatch(enableLoginFlow('subscription'));\n            history.push({\n                pathname: '/login',\n                state: null\n            })\n        }\n    }\n\n    return (\n        <div className=\"subscription subscription-outer charcoal-bg\">\n            <div id=\"Subscription\" className=\"charcoal-bg\">\n                <div className=\"flex-container-VC subscription-wrap charcoal-bg\">\n                    <div className=\"flex-3 heading-content\">\n                        <h1>Unlimited Classes For The Price Of One</h1>\n                        <div className=\"line1\">Dance to the music that makes YOU want to move at any skill level.</div>\n                    </div>\n                    <div className=\"inner-plans-wrap\">\n                        {AvailableSubscriptions && AvailableSubscriptions.map((subscription) => {\n                            return <div className=\"flex-2 plan\" onClick={() => setSubscription(subscription)} key={subscription.key}>\n                                <div className=\"plan_tag\">{subscription.name}</div>\n                                <div className=\"plan_price\">@{subscription.amount}<span>{subscription.plans}</span></div>\n                                <div className=\"plan_tag\">{subscription.desc}</div>\n                                {alreadySubscribed && <div>Alredy subscribed</div>}\n                            </div>\n                        })}\n                    </div>\n                </div>\n            </div>\n            {showSubscriptionDetails && <BuySubscription handleClose={() => setShowSubscriptionDetails(false)} activeStep={activeStep} alreadySubscribed={alreadySubscribed} />}\n        </div>\n    )\n}\n\nexport default Subscriptions\n","/Users/danny/Documents/Projects/boogalu/src/Components/Competitions/index.js",["342","343","344","345"],"import React, { useState, useEffect } from 'react'\nimport CompetitionsDetails from \"../CompetitionsDetails\";\nimport { getCompetitionsList } from \"../../Services/Competition.service\";\nimport { useStoreConsumer } from '../../Providers/StateProvider';\nimport { setActiveCompetition } from \"../../Actions/Competition\";\nimport { disableLoginFlow } from \"../../Actions/LoginFlow\";\nimport { getCompetitionByUserId } from \"../../Services/EnrollCompetition.service\";\nimport { enableLoading, disableLoading } from \"../../Actions/Loader\";\n\nfunction Competitions() {\n    const { state, dispatch } = useStoreConsumer();\n    const [isOpenDetailsModal, setIsOpenDetailsModal] = useState(false);\n    const [CompletitionList, setCompletitionList] = useState(null);\n    const [initialStep, setInitialStep] = useState(1);\n    const loggedInUser = state.loggedInUser;\n\n    const prepareUserCompData = (allCompList) => {\n        return new Promise((res, rej) => {\n            getCompetitionByUserId(loggedInUser.key).subscribe((userCompList) => {\n                dispatch(disableLoading());\n                if (userCompList.length) {\n                    allCompList.map((compDetails) => {\n                        let isUserEnrolled = userCompList.filter((userCompData) => userCompData.compId == compDetails.key);\n                        if (isUserEnrolled.length) {\n                            compDetails.isUserEnrolled = true;\n                            compDetails.userSubmitedDetails = isUserEnrolled[0];\n                        }\n                    })\n                    res(allCompList);\n                } else res(allCompList);\n            });\n        })\n    }\n\n    useEffect(() => {\n        dispatch(enableLoading());\n        getCompetitionsList().subscribe(allCompList => {\n            if (allCompList.length && loggedInUser.email && loggedInUser.phone) {\n                // get user submitted competition details\n                prepareUserCompData(allCompList).then((compListWithUserData) => {\n                    setCompletitionList(compListWithUserData);\n                    if (state.currentLoginFlow === 'profile-competition') {\n                        // if user come from profile page by clicking upload for competition\n                        dispatch(setActiveCompetition(compListWithUserData[0]));\n                        setIsOpenDetailsModal(true);\n                        setInitialStep(1);\n                    }\n                })\n            } else {\n                dispatch(disableLoading());\n                setCompletitionList(allCompList);\n                if (state.currentLoginFlow === 'profile-competition') {\n                    // if user come from profile page by clicking upload for competition\n                    dispatch(setActiveCompetition(allCompList[0]));\n                    setIsOpenDetailsModal(true);\n                    setInitialStep(1);\n                }\n            }\n        });\n        // if user come from login page\n        if (state.currentLoginFlow == 'competition') {\n            dispatch(disableLoginFlow());\n            setIsOpenDetailsModal(true);\n            if (loggedInUser.subscriptions) {\n                let isSubscribed = loggedInUser.subscriptions.filter((data) => data.type === 'competition-enrollment');\n                if (isSubscribed.length) setInitialStep(3);\n                else setInitialStep(1);\n            } else setInitialStep(1);\n        } else if (state.currentLoginFlow === 'competition-subscription') {\n            // if user come from subscription page\n            dispatch(disableLoginFlow());\n            setIsOpenDetailsModal(true);\n            setInitialStep(1);\n        } else if (state.currentLoginFlow === 'competition-uploadvdo') {\n            // if user come from vdoUpload page\n            dispatch(disableLoginFlow());\n            setIsOpenDetailsModal(true);\n            setInitialStep(3);\n        }\n    }, [])\n\n    const openDetailsModal = (competition) => {\n        if (competition.isUserEnrolled) setInitialStep(1);\n        dispatch(setActiveCompetition(competition));\n        setIsOpenDetailsModal(true);\n    }\n\n    return (\n        <div className=\"competition-wrap\">\n            <div className=\"competition-inner\">\n                <div className=\"title-wrap\">\n                    <h1>Our Active Competition !</h1>\n                    <div className=\"competition-desc\">Participate in different competitions &amp; win exciting prizes.</div>\n                </div>\n                <ul className=\"competition-list\" >\n                    {CompletitionList && CompletitionList.map((competition) => {\n                        return <li key={competition.name + '-id'} onClick={() => openDetailsModal(competition)}>\n                            <img src={competition.img} alt={competition.name} />\n                            <h2>{competition.name}  {competition.isUserEnrolled && <span>- Video submitted</span>}</h2>\n                        </li>\n                    })}\n                </ul>\n\n                {isOpenDetailsModal && <CompetitionsDetails open={isOpenDetailsModal} handleClose={() => setIsOpenDetailsModal(false)} initialStep={initialStep} />}\n            </div>\n        </div>\n    )\n}\n\nexport default Competitions\n","/Users/danny/Documents/Projects/boogalu/src/Components/Contactus/index.js",["346","347"],"import React, { useState, useEffect } from 'react';\nimport { useStoreConsumer } from '../../Providers/StateProvider';\nimport { submitEnquiry } from \"../../Services/Other.service\";\nimport Button from '@material-ui/core/Button';\nimport { useHistory } from \"react-router-dom\";\n\n// modal imports\nimport Modal from '@material-ui/core/Modal';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport Fade from '@material-ui/core/Fade';\nimport CloseIcon from '@material-ui/icons/Close';\nimport IconButton from '@material-ui/core/IconButton';\n\nfunction ContactUs() {\n\n    let initialFields = {\n        name: '',\n        email: '',\n        phone: '',\n        address: '',\n        subject: '',\n        message: ''\n    }\n    const { state, dispatch } = useStoreConsumer();\n    let loggedInUser = state.loggedInUser;\n    const history = useHistory();\n    const [formFields, setFormFields] = useState(initialFields);\n    const [enquirySubmitted, setEnquirySubmitted] = useState(false)\n    useEffect(() => {\n        if (state.loggedInUser?.username) {\n            initialFields = {\n                name: loggedInUser.name,\n                email: loggedInUser.email,\n                phone: loggedInUser.phone,\n                address: '',\n                subject: '',\n                message: ''\n            }\n            setFormFields(initialFields);\n        }\n    }, [state])\n\n    const handleChange = (prop) => (event) => {\n        setFormFields({ ...formFields, [prop]: event.target.value });\n    };\n\n    const clearForm = (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n        setFormFields(initialFields);\n    }\n\n    const submitForm = (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n        submitEnquiry(formFields).subscribe(() => {\n            setEnquirySubmitted(true);\n        })\n    }\n\n    const redirectTo = () => {\n        history.push('/')\n    }\n\n    return (\n        !enquirySubmitted ? <div className=\"contact-us-wrap charcoal-bg\" id=\"contactUsPage\">\n            <div className=\"inner-page\">\n                <h1>Reach us with your queries or concerns, &amp; we'll help you with that.</h1>\n                <form className=\"contact-form\" onSubmit={submitForm}>\n                    <div className='control-group'>\n                        <input value={formFields.name} onChange={handleChange('name')} type=\"text\" required id=\"name\" name=\"fullname\" placeholder=\"Full name*\" />\n                    </div>\n                    <div className='control-group'>\n                        <input value={formFields.email} onChange={handleChange('email')} type=\"email\" required id=\"email\" name=\"emailid\" placeholder=\"Valid email id*\" />\n                    </div>\n                    <div className='control-group'>\n                        <input value={formFields.phone} onChange={handleChange('phone')} type=\"text\" required id=\"phone\" name=\"phone\" placeholder=\"Valid phone number*\" />\n                    </div>\n                    <div className='control-group'>\n                        <input value={formFields.address} onChange={handleChange('address')} type=\"text\" id=\"address\" name=\"address\" placeholder=\"Your address\" />\n                    </div>\n                    <div className='control-group'>\n                        <input value={formFields.subject} onChange={handleChange('subject')} type=\"text\" required id=\"subject\" name=\"subject\" placeholder=\"Subject*\" />\n                    </div>\n                    <div className='control-group'>\n                        <textarea value={formFields.message} onChange={handleChange('message')} id=\"message\" name=\"message\" required placeholder=\"Query/Message/Concerns*\"></textarea>\n                    </div>\n                    <div className=\"control-group action-group\">\n                        <button className=\"btn reset-btn\" onClick={(e) => clearForm(e)}>Clear</button>\n                        <button className=\"btn primary-light\" type=\"submit\">Send</button>\n                    </div>\n                </form>\n                <div className=\"address-block\">\n                    +91-9920518931 /  9619828307 / 9884588775<br />\n                    Mahaprgya Hights No. 49 Sector - 20, kharghar, Navi Mumbai Opposite Metro Bridge, Reliance fresh road\n                </div>\n            </div>\n        </div> :\n            <div className=\"subscription-modal-wrap\">\n                <Modal\n                    aria-labelledby=\"transition-modal-title\"\n                    aria-describedby=\"transition-modal-description\"\n                    className='subscription-modal-box'\n                    open={enquirySubmitted}\n                    onClose={() => redirectTo()}\n                    closeAfterTransition\n                    BackdropComponent={Backdrop}\n                    BackdropProps={{\n                        timeout: 500,\n                    }}\n                >\n                    <Fade in={enquirySubmitted}>\n                        <div className=\"subscription-inner-modal\">\n                            <IconButton className=\"close-modal-btn\" onClick={() => redirectTo()}>\n                                <CloseIcon />\n                            </IconButton>\n                            <h3 className=\"confirmation-heading\">Thank you for your enquiry</h3>\n                            <div className=\"confirmation-content\">Your message has been sent successfully.</div>\n                            <div className=\"confirmation-content\">Thank you for your enquiry. Will be get back to you as soon as possible.</div>\n                            <Button variant=\"contained\" color=\"secondary\" onClick={(e) => redirectTo()}>Ok</Button>\n                        </div>\n                    </Fade>\n                </Modal>\n            </div >\n\n    )\n}\n\nexport default ContactUs;\n","/Users/danny/Documents/Projects/boogalu/src/Components/Loader/index.js",[],"/Users/danny/Documents/Projects/boogalu/src/Components/Page404/index.js",[],"/Users/danny/Documents/Projects/boogalu/src/Components/Notification/index.js",["348"],"import React, { useState, useEffect } from 'react'\nimport { useStoreConsumer } from '../../Providers/StateProvider';\nimport { removeNotification } from \"../../Actions/Notification\";\nexport default function Notification() {\n\n    const { state, dispatch } = useStoreConsumer();\n    const [ShowNotification, setShowNotification] = useState(true);\n    const [ActiveNotification, setActiveNotification] = useState(null);\n\n    useEffect(() => {\n        if (state.notification && state.notification.msg) {\n            setShowNotification(true);\n            setActiveNotification(state.notification);\n            setTimeout(() => {\n                setShowNotification(false);\n                setActiveNotification(null);\n                dispatch(removeNotification({ msg: '', type: '', time: 3000 }))\n            }, state.notification.time);\n        }\n    }, [state])\n    return (\n        <>\n            {ShowNotification ? <div className={`${ActiveNotification?.type} notification-wrap`}>\n                <div className=\"notification-type\">\n                    <div className=\"notification-msg\">{ActiveNotification?.msg}</div>\n                </div>\n            </div> : null}\n        </>\n    )\n}","/Users/danny/Documents/Projects/boogalu/src/Reducers/index.js",[],"/Users/danny/Documents/Projects/boogalu/src/Components/Signup/index.js",["349","350","351","352","353","354","355","356","357","358","359","360","361","362","363","364","365","366","367","368","369","370","371","372","373","374","375","376","377","378","379","380","381"],"import React, { useRef, useState, useEffect } from 'react';\nimport { useHistory } from \"react-router-dom\";\nimport { useStoreConsumer } from '../../Providers/StateProvider';\nimport { signupUser } from '../../Actions/User';\nimport bgImg from '../../Images/bg1.svg';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport TextField from '@material-ui/core/TextField';\nimport Visibility from '@material-ui/icons/Visibility';\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport { FaPlus, FaEdit } from 'react-icons/fa';\nimport stepListData from '../../Data/RegistrationStepData'\nimport ArrowRightSharpIcon from '@material-ui/icons/ArrowRightSharp';\nimport { registerUser, getUserByEmail, getUserByPhone } from \"../../Services/User.service\";\nimport { enableLoading, disableLoading } from \"../../Actions/Loader\";\nimport { displayNotification } from \"../../Actions/Notification\";\nimport { NOTIFICATION_SUCCCESS, NOTIFICATION_ERROR, MALE_PROFILE_DEFAULT_IMAGE, FEMALE_PROFILE_DEFAULT_IMAGE } from \"../../Constants\";\nimport { uploadImage } from \"../../Services/Upload.service\";\nimport * as $ from 'jquery';\n\nexport default function Signup() {\n    const { state, dispatch } = useStoreConsumer();\n    const history = useHistory();\n    let loggedInUser = state.loggedInUser;\n    // if user already login then redirect to home\n    if (loggedInUser.name && loggedInUser.phone && loggedInUser.email && loggedInUser.username) history.push({\n        pathname: '/',\n        state: null\n    })\n    // get data from history props if redirected through google or facebook login\n    if (history.location.state && (history.location.state.source === 'Facebook' || history.location.state.source === 'Google')) {\n        loggedInUser.email = history.location.state.email;\n        loggedInUser.name = history.location.state.name;\n        // setNeedToRegisterError('You are not registered yet, Please register with Choreoculture.')\n    }\n    const [userDetails, setUserDetails] = useState(loggedInUser);\n    const [SignUpError, setSignUpError] = useState(null);\n    const [showHidePassword, setShowHidePassword] = useState({ showPassword: false, showConfirmPassword: false });\n\n    const [activeStep, setActiveStep] = useState(6);\n    const [showNextButton, setShowNextButton] = useState(false);\n    const [stepData, setStepListData] = useState(stepListData);\n    const [selectedOptionsList, setSelectedOptionsList] = useState([]);\n    const [isUserPhotoUploaded, userPhotoUploadToggle] = useState(false);\n    const uploaderRef = useRef(null);\n\n    const handleChange = (prop) => (event) => {\n        setUserDetails({ ...userDetails, [prop]: event.target.value });\n    };\n\n    const handleClickShowPassword = (prop) => {\n        setShowHidePassword({ ...showHidePassword, [prop]: !showHidePassword[prop] });\n    };\n\n    const handleMouseDownPassword = (event) => {\n        event.preventDefault();\n    };\n\n    useEffect(() => {\n        $('html,body').animate({\n            scrollTop: 0\n        }, 500);\n        if (userDetails && !userDetails.profileImage) {\n            setUserDetails({ ...userDetails, profileImage: MALE_PROFILE_DEFAULT_IMAGE })\n        }\n    }, [])\n\n    useEffect(() => {\n        if (stepData[activeStep]) {\n            let isAnySelected = stepData[activeStep].filter((data) => data.isSelected);\n            if (isAnySelected.length != 0) setShowNextButton(true);\n            else setShowNextButton(false);\n            // set selected options\n            let selectedOptions = [];\n            Object.entries(stepData).map(([parentKey, parentValue]) => {\n                parentValue.map((parentValueItem) => {\n                    if (parentValueItem.isSelected) {\n                        let selectionObj = { value: [parentValueItem.title], key: parentKey, heading: parentValueItem.heading };\n                        if (selectedOptions.length != 0) {\n                            let isAvl = selectedOptions.filter((data) => data.key === parentKey);\n                            if (isAvl.length != 0) {\n                                selectedOptions.map((item) => {\n                                    if (item.key === parentKey) item.value.push(parentValueItem.title);\n                                })\n                            } else selectedOptions.push(selectionObj);\n                        } else selectedOptions.push(selectionObj);\n                    }\n                })\n            })\n            setSelectedOptionsList(selectedOptions);\n        }\n    }, [activeStep])\n\n    const saveUserRegistrationDetails = () => {\n        return new Promise((res, rej) => {\n            dispatch(enableLoading());\n            if (userDetails.profileImage != MALE_PROFILE_DEFAULT_IMAGE) {\n                uploadImage(userDetails.profileImage, 'user', 'small').subscribe((downloadableUrl) => {\n                    userDetails.profileImage = downloadableUrl;\n                    registerUser(userDetails).subscribe((data) => {\n                        console.log('user registered success', data);\n                        res(data.key);\n                    })\n                })\n            } else {\n                registerUser(userDetails).subscribe((data) => {\n                    console.log('user registered success', data);\n                    res(data.key);\n                })\n            }\n        })\n    }\n\n    const checkForUsedPhone = () => {\n        return new Promise((res, rej) => {\n            getUserByPhone(userDetails.phone).subscribe((data) => {\n                dispatch(disableLoading());\n                if (data && data.length) {\n                    setSignUpError('Phone already registered.');\n                    rej(false);\n                } else {\n                    res(true);\n                }\n            })\n        })\n    }\n\n    const checkForUsedEmail = () => {\n        return new Promise((res, rej) => {\n            getUserByEmail(userDetails.email).subscribe((data) => {\n                dispatch(disableLoading());\n                if (data && data.length) {\n                    setSignUpError('Email already registered.');\n                    rej(false);\n                } else {\n                    res(true);\n                }\n            })\n        })\n    }\n\n    const redirection = () => {\n        dispatch(signupUser(userDetails));\n        dispatch(displayNotification({\n            msg: \"Registration successfully\",\n            type: NOTIFICATION_SUCCCESS,\n            time: 3000\n        }));\n        if (state.currentLoginFlow == 'competition') history.push('/competitions');\n        else if (state.currentLoginFlow == 'subscription') history.push('/subscription');\n        if (state.currentLoginFlow == 'upload-video') history.push('/upload-video');\n        else history.push(({\n            pathname: '/',\n            state: null\n        }));\n    }\n\n    const setSignupUserCred = (e) => {\n        dispatch(enableLoading());\n        if (userDetails.password != userDetails.confirmPassword) {\n            setSignUpError('Password dose not match.');\n            return;\n        }\n\n        Promise.all([checkForUsedEmail(), checkForUsedPhone()]).then(() => {\n            saveUserRegistrationDetails()\n                .then((userKey) => {\n                    userDetails.key = userKey;\n                    dispatch(disableLoading());\n                    // dispatch(signupUser(userDetails));\n                    // dispatch(displayNotification({\n                    //     msg: \"Registration successfully\",\n                    //     type: NOTIFICATION_SUCCCESS,\n                    //     time: 3000\n                    // }));\n                    setActiveStep('stepOne');\n                })\n                .catch((error) => {\n                    // error in user registration\n                    if (error) {\n\n                    }\n                })\n        }).catch(error => {\n            console.error(error)\n        });\n        e.preventDefault();\n    }\n\n    const setNextStep = () => {\n        switch (activeStep) {\n            case 'stepOne': setActiveStep('stepTwo'); break;\n            case 'stepTwo': setActiveStep('stepThree'); break;\n            case 'stepThree': setActiveStep('stepFour'); break;\n            case 'stepFour': redirection(); break;\n            // case 'stepFive': setActiveStep(6); break;\n        }\n    }\n\n    const setPrevStep = () => {\n        switch (activeStep) {\n            case 'stepTwo': setActiveStep('stepOne'); break;\n            case 'stepThree': setActiveStep('stepTwo'); break;\n            case 'stepFour': setActiveStep('stepThree'); break;\n            // case 'stepFive': setActiveStep('stepFour'); break;\n            // case 6: setActiveStep('stepFour'); break;\n        }\n    }\n\n    const setStepListItemData = (e, activeItem, status) => {\n        e.preventDefault();\n        e.stopPropagation();\n        const stepDataList = Object.assign({}, stepData);\n        stepDataList[activeStep].map((item) => {\n            if (item.title === activeItem.title) {\n                item.isSelected = item.isSelected ? false : true;\n            } else {\n                if (status != 'multi-select') {\n                    item.isSelected = false;\n                }\n            }\n        })\n        // set selected options\n        let selectedOptions = [];\n        Object.entries(stepDataList).map(([parentKey, parentValue]) => {\n            parentValue.map((parentValueItem) => {\n                if (parentValueItem.isSelected) {\n                    let selectionObj = { value: [parentValueItem.title], key: parentKey, heading: parentValueItem.heading };\n                    if (selectedOptions.length != 0) {\n                        let isAvl = selectedOptions.filter((data) => data.key === parentKey);\n                        if (isAvl.length != 0) {\n                            selectedOptions.map((item) => {\n                                if (item.key === parentKey) item.value.push(parentValueItem.title);\n                            })\n                        } else selectedOptions.push(selectionObj);\n                    } else selectedOptions.push(selectionObj);\n                }\n            })\n        })\n        setSelectedOptionsList(selectedOptions);\n        let isAnySelected = stepDataList[activeStep].filter((data) => data.isSelected);\n        if (isAnySelected.length != 0) setShowNextButton(true);\n        else setShowNextButton(false);\n        setStepListData(stepDataList);\n    }\n\n    async function onChangeFile(event) {\n        event.stopPropagation();\n        event.preventDefault();\n        var file = event.target.files[0];\n        console.log(file);\n        if (file) {\n            setUserDetails({ ...userDetails, profileImage: null });\n            const reader = new FileReader();\n            reader.readAsDataURL(file);\n            reader.onload = () => {\n                userPhotoUploadToggle(true);\n                setUserDetails({ ...userDetails, profileImage: reader.result });\n            }\n            reader.onerror = error => console.error(error);\n        }\n    }\n\n    return (\n        <div className=\"logout-wrap clearfix\">\n            {activeStep != 6 && <div className=\"step-wrap\">\n                <div className=\"heading1\">Let's Get Started!</div>\n                {activeStep === 'stepOne' && <>\n                    <div className=\"list-content\">\n                        <div className=\"list-heading-wrap\">\n                            <div className=\"heading2\">What’s your experience with dancing?</div>\n                            <div className=\"heading3\">Select One Option</div>\n                        </div>\n                        <div className=\"list\">\n                            {stepData.stepOne.map((item, i) => {\n                                return (\n                                    <div key={i} className={item.isSelected ? 'list-item selected-item' : 'list-item'} onClick={(e) => setStepListItemData(e, item)}>\n                                        <div className=\"title\">{item.title}</div>\n                                        <div className=\"desc\">{item.desc}</div>\n                                        <Checkbox\n                                            required\n                                            color=\"primary\"\n                                            className=\"selected-item-checkbox\"\n                                            checked={item.isSelected}\n                                            onChange={(e) => setStepListItemData(e, item)}\n                                            inputProps={{ 'aria-label': 'secondary checkbox' }}\n                                        />\n                                    </div>\n                                )\n                            })}\n                        </div>\n                    </div>\n                </>}\n                {activeStep === 'stepTwo' && <>\n                    <div className=\"list-content\">\n                        <div className=\"list-heading-wrap\">\n                            <div className=\"heading2\">What is your first goal that you want to work on?</div>\n                            <div className=\"heading3\">Select One Option</div>\n                        </div>\n                        <div className=\"list\">\n                            {stepData.stepTwo.map((item, i) => {\n                                return (\n                                    <div key={i} className={item.isSelected ? 'list-item selected-item' : 'list-item'} onClick={(e) => setStepListItemData(e, item)}>\n                                        <div className=\"title\">{item.title}</div>\n                                        <div className=\"desc\">{item.desc}</div>\n                                        <Checkbox\n                                            required\n                                            color=\"primary\"\n                                            className=\"selected-item-checkbox\"\n                                            checked={item.isSelected}\n                                            onChange={(e) => setStepListItemData(e, item)}\n                                            inputProps={{ 'aria-label': 'secondary checkbox' }}\n                                        />\n                                    </div>\n                                )\n                            })}\n                        </div>\n                    </div>\n                </>}\n                {activeStep === 'stepThree' && <>\n                    <div className=\"list-content\">\n                        <div className=\"list-heading-wrap\">\n                            <div className=\"heading2\">What are you interested in?</div>\n                            <div className=\"heading3\">Select all that apply</div>\n                        </div>\n                        <div className=\"list\">\n                            {stepData.stepThree.map((item, i) => {\n                                return (\n                                    <div key={i} className={item.isSelected ? 'list-item selected-item' : 'list-item'} onClick={(e) => setStepListItemData(e, item, 'multi-select')}>\n                                        <div className=\"title\">{item.title}</div>\n                                        <div className=\"desc\" style={{ paddingRight: '25px' }}>{item.desc}</div>\n                                        <Checkbox\n                                            required\n                                            color=\"primary\"\n                                            className=\"selected-item-checkbox\"\n                                            checked={item.isSelected}\n                                            onChange={(e) => setStepListItemData(e, item, 'multi-select')}\n                                            inputProps={{ 'aria-label': 'secondary checkbox' }}\n                                        />\n                                    </div>\n                                )\n                            })}\n                        </div>\n                    </div>\n                </>}\n                {activeStep === 'stepFour' && <>\n                    <div className=\"list-content\">\n                        <div className=\"list-heading-wrap\">\n                            <div className=\"heading2\">How long would you like your dance sessions to be?</div>\n                            <div className=\"heading3\">Select One Option</div>\n                        </div>\n                        <div className=\"list\">\n                            {stepData.stepFour.map((item, i) => {\n                                return (\n                                    <div key={i} className={item.isSelected ? 'list-item selected-item' : 'list-item'} onClick={(e) => setStepListItemData(e, item)}>\n                                        <div className=\"title\">{item.title}</div>\n                                        <div className=\"desc\">{item.desc}</div>\n                                        <Checkbox\n                                            required\n                                            color=\"primary\"\n                                            className=\"selected-item-checkbox\"\n                                            checked={item.isSelected}\n                                            onChange={(e) => setStepListItemData(e, item)}\n                                            inputProps={{ 'aria-label': 'secondary checkbox' }}\n                                        />\n                                    </div>\n                                )\n                            })}\n                        </div>\n                    </div>\n                </>}\n                {activeStep === 'stepFive' && <>\n                    <div className=\"list-content\">\n                        <div className=\"list-heading-wrap\">\n                            <div style={{ paddingBottom: 0 }} className=\"heading2\">Your Personal Schedule & Recommendations</div>\n                        </div>\n                        <div className=\"list\">\n                            {selectedOptionsList.map((item, i) => {\n                                return (\n                                    <div key={i} className=\"list-item selected-item\" onClick={() => setActiveStep(item.key)}>\n                                        <div className=\"title\">{item.heading}</div>\n                                        <div className=\"desc\">\n                                            {item.value.length === 1 &&\n                                                item.value.map((listValue, j) => {\n                                                    return <span key={j}>{listValue} </span>\n                                                })\n                                            }\n                                            {item.value.length != 1 &&\n                                                item.value.map((listValue, j) => {\n                                                    return <span key={j}>{listValue}, </span>\n                                                })\n                                            }\n\n                                        </div>\n                                        {/* <Checkbox\n                                            required\n                                            color=\"primary\"\n                                            className=\"selected-item-checkbox\"\n                                            checked={true}\n                                            disabled={true}\n                                            inputProps={{ 'aria-label': 'secondary checkbox' }}\n                                        /> */}\n                                    </div>\n                                )\n                            })}\n                        </div>\n                    </div>\n                </>}\n                {activeStep != 6 && <div className=\"step-already-login-wrap clearfix\">\n                    <div className=\"text-wrap\">Already have an account?</div>\n                    <Button color=\"primary\" onClick={() => history.push({\n                        pathname: '/login',\n                        state: null\n                    })}>SIGN IN</Button>\n                    {/* {\n                        showNextButton ?\n                            <div className={`next-prev-actions ${activeStep != 'stepOne' ? 'next-step-active' : ''} `}>\n                                {activeStep != 'stepOne' && <Button color=\"primary\" variant=\"contained\" className=\"next-btn previous\" onClick={() => setPrevStep()}>Prev</Button>}\n                                {showNextButton && <Button color=\"primary\" variant=\"contained\" className=\"next-btn\" onClick={() => setNextStep()}>Next</Button>}\n                            </div> : ''\n                    } */}\n                    <div className={`next-prev-actions ${activeStep != 'stepOne' ? 'next-step-active' : ''} `}>\n                        {activeStep != 'stepOne' && <Button color=\"primary\" variant=\"contained\" className=\"next-btn previous\" onClick={() => setPrevStep()}>Prev</Button>}\n                        {/* <Button color=\"primary\" variant=\"contained\" className=\"next-btn\" onClick={() => setNextStep()}>Next</Button> */}\n                        {showNextButton && <Button color=\"primary\" variant=\"contained\" className=\"next-btn\" onClick={() => setNextStep()}>Next</Button>}\n                        {!showNextButton && <Button color=\"primary\" variant=\"contained\" className=\"next-btn skip-btn\" onClick={() => setNextStep()}>Skip</Button>}\n                        {activeStep != 'stepFour' && <Button color=\"primary\" variant=\"contained\" className=\"next-btn skip-all-btn\" onClick={() => redirection()}>Skip All</Button>}\n                    </div>\n                </div>}\n            </div>}\n            {activeStep == 6 && <form className=\"form-wrap final-registration-block clearfix\" onSubmit={setSignupUserCred}>\n                <div className=\"heading-outer\">\n                    <div className=\"heading1\">Let's Get Started!</div>\n                    <div className=\"heading2\">Create an account to Choreoculture to get all features.</div>\n                </div>\n                {/* {NeedToRegisterError && <div className=\"login-error\">\n                    {NeedToRegisterError}\n                </div>} */}\n                <div className=\"profile-img-wrap\">\n                    <div className=\"uploaded-img\" >\n                        <img src={userDetails.profileImage} onClick={() => { uploaderRef.current.click() }} />\n                    </div>\n                    {\n                        isUserPhotoUploaded ?\n                            <i className=\"plus-icon\"><FaEdit /></i>\n                            :\n                            <i className=\"plus-icon\"><FaPlus /></i>\n                    }\n                    <input id=\"myInput\"\n                        type=\"file\"\n                        accept=\"image/*\"\n                        ref={uploaderRef}\n                        onChange={(e) => onChangeFile(e)}\n                    />\n                    {/* <div className=\"upload-btn-file\">\n                        <Button\n                            variant=\"contained\" color=\"primary\"\n                            onClick={() => { uploaderRef.current.click() }}>Upload Video</Button>\n                    </div>  */}\n                </div>\n                <div className=\"form-outer clearfix\">\n                    <div className=\"input-wrap\">\n                        <TextField className=\"input-field\"\n                            required\n                            id=\"outlined-required-Name\"\n                            label=\"Name\"\n                            onChange={handleChange('name')}\n                            value={userDetails.name}\n                            variant=\"outlined\"\n                        />\n                    </div>\n                    <div className=\"input-wrap\">\n                        <TextField className=\"input-field\"\n                            required\n                            id=\"outlined-required-Username\"\n                            label=\"Username\"\n                            onChange={handleChange('username')}\n                            value={userDetails.username}\n                            variant=\"outlined\"\n                        />\n                    </div>\n                    <div className=\"input-wrap\">\n                        <TextField className=\"input-field\"\n                            required\n                            type=\"tel\"\n                            id=\"outlined-required-phone\"\n                            label=\"Phone\"\n                            onChange={handleChange('phone')}\n                            value={userDetails.phone}\n                            variant=\"outlined\"\n                        />\n                    </div>\n                    <div className=\"input-wrap\">\n                        <TextField className=\"input-field\"\n                            required\n                            id=\"outlined-required-email\"\n                            label=\"Email\"\n                            type=\"email\"\n                            onChange={handleChange('email')}\n                            value={userDetails.email}\n                            variant=\"outlined\"\n                        />\n                    </div>\n                    <div className=\"input-wrap\">\n                        <TextField className=\"input-field\"\n                            required\n                            id=\"outlined-required-country\"\n                            label=\"Country\"\n                            onChange={handleChange('country')}\n                            value={userDetails.country}\n                            variant=\"outlined\"\n                        />\n                    </div>\n                    <div className=\"input-wrap\">\n                        <TextField className=\"input-field\"\n                            required\n                            id=\"outlined-required-state\"\n                            label=\"State\"\n                            onChange={handleChange('state')}\n                            value={userDetails.state}\n                            variant=\"outlined\"\n                        />\n                    </div>\n                    <div className=\"input-wrap\">\n                        <FormControl className=\"\" variant=\"outlined\">\n                            <InputLabel htmlFor=\"outlined-adornment-password\">Password</InputLabel>\n                            <OutlinedInput\n                                required\n                                id=\"outlined-adornment-password\"\n                                type={showHidePassword.showPassword ? 'text' : 'password'}\n                                value={userDetails.password}\n                                onChange={handleChange('password')}\n                                endAdornment={\n                                    <InputAdornment position=\"end\">\n                                        <IconButton\n                                            aria-label=\"toggle password visibility\"\n                                            onClick={() => handleClickShowPassword('showPassword')}\n                                            onMouseDown={handleMouseDownPassword}\n                                            edge=\"end\"\n                                        >\n                                            {showHidePassword.showPassword ? <Visibility /> : <VisibilityOff />}\n                                        </IconButton>\n                                    </InputAdornment>\n                                }\n                                labelWidth={70}\n                            />\n                        </FormControl>\n                    </div>\n                    <div className=\"input-wrap\">\n                        <FormControl className=\"\" variant=\"outlined\">\n                            <InputLabel htmlFor=\"outlined-adornment-confirm-password\">Confirm Password</InputLabel>\n                            <OutlinedInput\n                                required\n                                id=\"outlined-adornment-confirm-password\"\n                                type={showHidePassword.showConfirmPassword ? 'text' : 'password'}\n                                value={userDetails.confirmPassword}\n                                onChange={handleChange('confirmPassword')}\n                                endAdornment={\n                                    <InputAdornment position=\"end\">\n                                        <IconButton\n                                            aria-label=\"toggle confirm password visibility\"\n                                            onClick={() => handleClickShowPassword('showConfirmPassword')}\n                                            onMouseDown={handleMouseDownPassword}\n                                            edge=\"end\"\n                                        >\n                                            {showHidePassword.showConfirmPassword ? <Visibility /> : <VisibilityOff />}\n                                        </IconButton>\n                                    </InputAdornment>\n                                }\n                                labelWidth={70}\n                            />\n                        </FormControl>\n                    </div>\n                    <div className=\"input-wrap\">\n                        <div className=\"dob-wrap\">\n                            <TextField className=\"input-field\"\n                                id=\"date\"\n                                label=\"Birthday\"\n                                type=\"date\"\n                                onChange={handleChange('dob')}\n                                value={userDetails.dob}\n                                InputLabelProps={{\n                                    shrink: true,\n                                }}\n                            />\n                        </div>\n                    </div>\n                    <div className=\"input-wrap\">\n                        <FormControl variant=\"outlined\" className=\"input-field\">\n                            <InputLabel id=\"select-outlined-label\">Gender</InputLabel>\n                            <Select\n                                labelId=\"select-outlined-label\"\n                                id=\"select-outlined\"\n                                value={userDetails.gender}\n                                onChange={handleChange('gender')}\n                                label=\"Gender\"\n                            >\n                                <MenuItem value=\"Male\">Male</MenuItem>\n                                <MenuItem value=\"Female\">Female</MenuItem>\n                                <MenuItem value=\"Other\">Other</MenuItem>\n                            </Select>\n                        </FormControl>\n                    </div>\n                    <div className=\"input-wrap bio-wrap\">\n                        <TextField className=\"input-field bio-input\"\n                            id=\"outlined-required-bio\"\n                            label=\"Bio\"\n                            value={userDetails.bio}\n                            onChange={handleChange('bio')}\n                            variant=\"outlined\"\n                        />\n                    </div>\n                    <div className=\"tnc-wrap\">\n                        <div className=\"tnc-content clearfix\">\n                            <div className=\"checkbox-wrap\">\n                                <Checkbox\n                                    required\n                                    color=\"primary\"\n                                    checked={userDetails.tnc}\n                                    onChange={(e) => setUserDetails({ ...userDetails, tnc: e.target.checked })}\n                                    inputProps={{ 'aria-label': 'secondary checkbox' }}\n                                />\n                            </div>\n                            <div className=\"note-wrap\">Yes, I agree to the terms and conditions </div>\n                        </div>\n                    </div>\n                    {SignUpError && <div className=\"login-error\">\n                        {SignUpError}\n                    </div>}\n                    <div className=\"submit-btn clearfix\">\n                        <Button variant=\"contained\" type=\"submit\" color=\"primary\" >Sign Up\n                         <ArrowRightSharpIcon />\n                        </Button>\n                        {/* {activeStep != 'stepOne' && <Button color=\"primary\" variant=\"contained\" className=\"next-btn previous\" onClick={() => setPrevStep()}>Prev</Button>} */}\n                    </div>\n                    <div className=\"already-login-wrap\">\n                        <div className=\"text-wrap\">Already have an account?</div>\n                        <Button color=\"primary\" onClick={() => history.push({\n                            pathname: '/login',\n                            state: null\n                        })}>SIGN IN</Button>\n                    </div>\n                </div>\n            </form>}\n\n            <div className=\"img-wrap\">\n                <img src={bgImg} alt=\"bg1\" />\n            </div>\n        </div>\n    );\n}","/Users/danny/Documents/Projects/boogalu/src/Components/Homepage/index.js",["382","383","384","385","386"],"/Users/danny/Documents/Projects/boogalu/src/Components/VideoUploader/index.js",["387","388","389"],"import React, { useRef, useState, useEffect } from 'react'\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport { useStoreConsumer } from '../../Providers/StateProvider';\nimport { uploadVideo, uploadImage } from \"../../Services/Upload.service\";\nimport { saveUploadedVideo } from \"../../Services/UploadedVideo.service\";\nimport { useHistory } from \"react-router-dom\";\nimport { THUMBNAIL_URL } from \"../../Constants\";\nimport ImageUploader from 'react-images-upload';\nimport { disableLoginFlow } from \"../../Actions/LoginFlow\";\nimport { FaCloudUploadAlt } from 'react-icons/fa';\nimport { setDataRefetchModuleName } from \"../../Actions/Utility\";\nimport { NOTIFICATION_ERROR, ADMIN_EMAIL_STAGING } from \"../../Constants\";\nimport { displayNotification } from \"../../Actions/Notification\";\nimport { sendEmail } from \"../../Services/Email.service\";\n// modal imports\nimport Modal from '@material-ui/core/Modal';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport Fade from '@material-ui/core/Fade';\nimport { makeStyles } from '@material-ui/core/styles';\nimport CloseIcon from '@material-ui/icons/Close';\nimport IconButton from '@material-ui/core/IconButton';\nimport { enableLoading, disableLoading } from \"../../Actions/Loader\";\n//circular progress\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\n\nexport default function VideoUploader({ selectedVdo, handleVdoUploadResponse }) {\n    const history = useHistory();\n    const { state, dispatch } = useStoreConsumer();\n    const loggedInUser = state.loggedInUser;\n    const uploaderRef = useRef(null);\n    const [SelectedVideo, setSelectedVideo] = useState(selectedVdo ? selectedVdo : { title: \"\", desc: \"\", file: null });\n    const [UploadedVdoUrl, setUploadedVdoUrl] = useState(null);\n    const [ThumbnailImage, setThumbnailImage] = useState(null);\n    const [openVdoUploaderModal, setOpenVdoUploaderModal] = useState(true);\n    const [progress, setProgress] = useState(0);\n    const [ShowVdoUploadProgress, setShowVdoUploadProgress] = useState(false);\n\n    // useEffect(() => {\n    //     const timer = setInterval(() => {\n    //         setProgress((prevProgress) => (prevProgress >= 100 ? 0 : prevProgress + 10));\n    //     }, 800);\n    //     return () => {\n    //         clearInterval(timer);\n    //     };\n    // }, []);\n\n    useEffect(() => {\n        dispatch(disableLoginFlow());\n    }, [])\n\n    const useStyles = makeStyles((theme) => ({\n        modal: {\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n        },\n        paper: {\n            backgroundColor: theme.palette.background.paper,\n            border: '2px solid #000',\n            boxShadow: theme.shadows[5],\n            padding: theme.spacing(2, 4, 3),\n        },\n    }));\n    const classes = useStyles();\n\n    async function onChangeFile(event) {\n        event.stopPropagation();\n        event.preventDefault();\n        var file = event.target.files[0];\n        console.log(file);\n        // 1MB in Bytes is 1,048,576 so you can multiply it by the limit you need.\n        if (file) {\n            if (file.size > 52428800) {\n                alert(\"File is too big!\");\n                dispatch(displayNotification({\n                    msg: \"File is too big!\",\n                    type: NOTIFICATION_ERROR,\n                    time: 3000\n                }))\n                setSelectedVideo({ ...SelectedVideo, file: null });\n                uploaderRef.current.click();\n            } else {\n                setSelectedVideo({ ...SelectedVideo, file: null });\n                const reader = new FileReader();\n                reader.readAsDataURL(file);\n                reader.onload = () => {\n                    setSelectedVideo({ ...SelectedVideo, file: reader.result });\n                }\n                reader.onerror = error => console.error(error);\n            }\n        }\n    }\n\n    const handleChange = (prop) => (event) => {\n        setSelectedVideo({ ...SelectedVideo, [prop]: event.target.value });\n    };\n\n    async function uploadSelectedVideo() {\n        if (!(SelectedVideo.title && SelectedVideo.desc)) {\n            dispatch(displayNotification({\n                msg: \"Title and description are mandatory!\",\n                type: NOTIFICATION_ERROR,\n                time: 3000\n            }))\n            return\n        }\n        var thumbnailImage = THUMBNAIL_URL;\n        if (ThumbnailImage && ThumbnailImage[0]) {\n            const reader = new FileReader();\n            reader.readAsDataURL(ThumbnailImage[0]);\n            reader.onload = () => {\n                uploadImage(reader.result, 'thumbnail', 'small').subscribe((downloadableUrl) => {\n                    thumbnailImage = downloadableUrl;\n                })\n            }\n            reader.onerror = error => console.error(error);\n        }\n\n        const sendEmailToAdmin = (vdoUrl) => {\n            let emailBody = `<div>\n            <h6 style=\"font-size: 17px;margin-bottom: 26px;\">New Video Uploaded</h6>\n            <h4>User details -</h4>\n            <h6>${loggedInUser.name}</h6>\n            <h6>${loggedInUser.email}</h6>\n            <h6>${loggedInUser.phone}</h6>\n            <a href=${vdoUrl} >Clik here to check uploaded video</a>\n            </div>`;\n            let payload = {\n                mailTo: ADMIN_EMAIL_STAGING,\n                title: 'New Video Uploaded',\n                content: emailBody\n            }\n            sendEmail(payload).subscribe((res) => {\n                if (!('error' in res)) {\n                    console.log('Admin Email Send Successfully.');\n                } else console.log('Admin Email Send Failed.');\n            })\n        }\n\n        const sendEmailToUser = (vdoUrl) => {\n            let emailBody = `<div>\n            <p>Hi ${loggedInUser.name}, you have recently uploaded a video, ${SelectedVideo.title}</p>. \n            <a href=${vdoUrl} >Clik here to check uploaded video</a>\n            </div>`;\n            let payload = {\n                mailTo: loggedInUser.email,\n                title: 'Video Uploaded',\n                content: emailBody\n            }\n            sendEmail(payload).subscribe((res) => {\n                if (!('error' in res)) {\n                    console.log('User Email Send Successfully.');\n                } else console.log('User Email Send Failed.');\n            })\n        }\n\n        uploadVideo(SelectedVideo.file).subscribe((response) => {\n            dispatch(enableLoading());\n            setShowVdoUploadProgress(true);\n            if (response.donePercentage) {\n                setProgress(response.donePercentage);\n                console.log('Upload is ' + response.donePercentage + '% done');\n            }\n            if (response.downloadURL && !UploadedVdoUrl) {\n                sendEmailToAdmin(response.downloadURL);\n                sendEmailToUser(response.downloadURL);\n                // dispatch(enableLoading());\n                setShowVdoUploadProgress(false);\n                setUploadedVdoUrl(response.downloadURL);\n                const uploadObj = {\n                    title: SelectedVideo.title,\n                    desc: SelectedVideo.desc,\n                    url: response.downloadURL,\n                    userId: loggedInUser.key,\n                    thumbnail: thumbnailImage\n                }\n                saveUploadedVideo(uploadObj).subscribe((response) => {\n                    console.log(\"vedio data saved to db\", response);\n                    dispatch(disableLoading());\n                    const pathName = history?.location?.pathname.split('/')[1];\n                    pathName.includes('profile') && dispatch(setDataRefetchModuleName('user-uploaded-video'));\n                    closeUploaderModal();\n                    if (state.currentLoginFlow == 'competition-uploadvdo') handleVdoUploadResponse(3);\n                    else history.push('/profile');\n                })\n            }\n        })\n        console.log(SelectedVideo);\n        console.log(loggedInUser);\n    }\n\n    const onThumbnailImgSelect = (picture) => {\n        setThumbnailImage(picture);\n    }\n\n    const closeUploaderModal = () => {\n        const pathName = history?.location?.pathname.split('/')[1];\n        if (pathName.includes('register') || pathName.includes('login')) {\n            history.push('/profile');\n        }\n        // else if (state.currentLoginFlow == 'competition-uploadvdo') history.push('/competition');\n        // handleClose();\n        if (typeof (handleVdoUploadResponse) !== 'undefined') {\n            handleVdoUploadResponse();\n        }\n        setOpenVdoUploaderModal(false);\n\n    }\n\n    function CircularProgressWithLabel(props) {\n        return (\n            <Box position=\"relative\" display=\"inline-flex\">\n                <CircularProgress variant=\"determinate\" {...props} />\n                <Box\n                    top={0}\n                    left={0}\n                    bottom={0}\n                    right={0}\n                    position=\"absolute\"\n                    display=\"flex\"\n                    alignItems=\"center\"\n                    justifyContent=\"center\"\n                >\n                    <Typography variant=\"caption\" component=\"div\" color=\"textSecondary\">{`${Math.round(\n                        props.value,\n                    )}%`}</Typography>\n                </Box>\n            </Box>\n        );\n    }\n\n    return (\n        <div>\n            <Modal\n                aria-labelledby=\"transition-modal-title\"\n                aria-describedby=\"transition-modal-description\"\n                className='competition-modal-box'\n                open={openVdoUploaderModal}\n                onClose={() => closeUploaderModal(false)}\n                closeAfterTransition\n                BackdropComponent={Backdrop}\n                BackdropProps={{\n                    timeout: 500,\n                }}\n            >\n                <Fade in={openVdoUploaderModal}>\n                    <div className=\"video-uploader-inner-modal\">\n                        <IconButton className=\"close-modal-btn\" onClick={() => { closeUploaderModal(false); dispatch(disableLoginFlow()); }}>\n                            <CloseIcon />\n                        </IconButton>\n                        <h3>Upload your dance performance video!</h3>\n                        <div className={`uploader-wrap ${SelectedVideo.file ? 'selected-file' : ''}`}>\n                            {\n                                !SelectedVideo.file ?\n                                    <div className=\"upload-input-wrap\">\n                                        <i className=\"upload-icon\"><FaCloudUploadAlt /></i>\n                                        <input id=\"myInput\"\n                                            type=\"file\"\n                                            accept=\"video/mp4,video/x-m4v,video/*\"\n                                            ref={uploaderRef}\n                                            onChange={(e) => onChangeFile(e)}\n                                        />\n                                    </div> : ''\n                            }\n\n                            {!SelectedVideo.file ?\n                                <div className=\"upload-btn-file\">\n                                    <Button\n                                        variant=\"contained\" color=\"primary\"\n                                        onClick={() => { uploaderRef.current.click() }}>Upload Video</Button>\n                                </div> :\n                                <div className=\"video-information-wrap\">\n                                    <video width=\"400\" controls>\n                                        <source src={SelectedVideo.file} />\n                                    </video>\n                                    <div className=\"change-video-btn\">\n                                        <Button\n                                            variant=\"contained\" color=\"primary\"\n                                            onClick={() => { uploaderRef.current.click() }}\n                                        >Change vdo</Button>\n                                    </div>\n                                    <div className=\"input-form-wrap\">\n                                        <div className=\"input-wrap image-uploader-wrap\">\n                                            <ImageUploader\n                                                withIcon={true}\n                                                buttonText='Select image'\n                                                onChange={onThumbnailImgSelect}\n                                                imgExtension={['.jpg', '.gif', '.png', '.gif', '.svg']}\n                                                maxFileSize={5242880}\n                                                accept=\"image/*\"\n                                                withPreview={true}\n                                                singleImage={true}\n                                                label=\"Select thumbnail image\"\n                                            />\n                                        </div>\n                                        <div className=\"text-form-wrapper\">\n                                            <div className=\"input-field-wrap\">\n                                                <TextField className=\"input-field\"\n                                                    required\n                                                    id=\"outlined-required-title\"\n                                                    label=\"Video title\"\n                                                    onChange={handleChange('title')}\n                                                    value={SelectedVideo.title}\n                                                    variant=\"outlined\"\n                                                    autoComplete=\"off\"\n                                                />\n                                            </div>\n                                            <div className=\"input-field-wrap\">\n                                                <TextField className=\"input-field\"\n                                                    required\n                                                    id=\"outlined-required-desc\"\n                                                    label=\"Video description\"\n                                                    onChange={handleChange('desc')}\n                                                    value={SelectedVideo.desc}\n                                                    variant=\"outlined\"\n                                                    autoComplete=\"off\"\n                                                />\n                                            </div>\n                                            <Button variant=\"contained\" color=\"secondary\" onClick={(e) => uploadSelectedVideo(e)}>Upload</Button>\n                                        </div>\n                                    </div>\n                                </div>}\n                        </div>\n                    </div>\n                </Fade>\n            </Modal>\n            {ShowVdoUploadProgress && <div className=\"progress-wrap\">\n                <div className=\"progress-body\">\n                    <CircularProgressWithLabel value={progress} />\n                </div>\n            </div>}\n        </div>\n    )\n}","/Users/danny/Documents/Projects/boogalu/src/Components/Feeds/index.js",["390","391","392","393","394","395","396","397","398","399","400","401","402","403","404","405","406","407","408","409","410"],"import React, { useEffect, useState } from 'react'\nimport { getUploadedVideosList } from \"../../Services/UploadedVideo.service\";\nimport { updateVideoLikes, updateVideoComments } from \"../../Services/UploadedVideo.service\";\nimport { getAllUser } from \"../../Services/User.service\";\nimport FavoriteBorder from '@material-ui/icons/FavoriteBorder';\nimport Favorite from '@material-ui/icons/Favorite';\nimport CommentOutlined from '@material-ui/icons/CommentOutlined';\nimport { useStoreConsumer } from '../../Providers/StateProvider';\nimport VideoDetails from '../VideoDetails'\nimport ProfileImage from \"../ProfileImage\";\nimport Vedio from \"../Vedio/Video\";\nimport { enableLoading, disableLoading } from \"../../Actions/Loader\";\n\nfunction Feeds() {\n\n    const [feedList, setFeedList] = useState([])\n    const [userList, setUserList] = useState([])\n    const [activeVideoObj, setActiveVideoObj] = useState({})\n    const [commentModal, setCommentModal] = useState(false)\n    const { state, dispatch } = useStoreConsumer();\n    const loggedInUser = state.loggedInUser;\n\n    const getAllUserList = () => {\n        return new Promise((res, rej) => {\n            getAllUser().subscribe((users) => {\n                setUserList(users);\n                res(users);\n            });\n        })\n    }\n\n    const getAllUploadedVideos = () => {\n        return new Promise((res, rej) => {\n            getUploadedVideosList().subscribe((videos) => {\n                res(videos);\n            });\n        })\n    }\n\n    const handleLikes = (video, status) => {\n        let videoObj = { ...video }\n        if (status == 'liked') {\n            if (videoObj.likes) {\n                videoObj.likes.push({ value: 1, userId: loggedInUser.key })\n            } else {\n                videoObj.likes = [{ value: 1, userId: loggedInUser.key }]\n            }\n        } else {\n            let likes = videoObj.likes.filter(data => data.userId != loggedInUser.key)\n            videoObj.likes = likes\n        }\n        videoObj.likes.map((likeObj) => { delete likeObj.profileImage; delete likeObj.username; })\n        updateVideoLikes(videoObj.key, videoObj).subscribe(() => {\n            let feedListCopy = [...feedList]\n            feedListCopy.map((feed) => {\n                if (feed.key == videoObj.key) {\n                    feed.likes = videoObj.likes\n                }\n\n                if (feed.likes && feed.likes.length) {\n                    let isAvail = feed.likes.filter(data => data.userId == loggedInUser.key)\n                    isAvail.length > 0 ? feed.isLiked = true : feed.isLiked = false\n                } else {\n                    feed.isLiked = false\n                }\n                addUserDetailsToFeed(feed, userList);\n            })\n            setFeedList(feedListCopy)\n        })\n    }\n\n    const handleComments = (commentString) => {\n        let videoObj = { ...activeVideoObj }\n        if (videoObj.comments) {\n            videoObj.comments.push({ value: commentString, userId: loggedInUser.key })\n        } else {\n            videoObj.comments = [{ value: commentString, userId: loggedInUser.key }]\n        }\n\n        videoObj.comments.map((commentObj) => { delete commentObj.profileImage; delete commentObj.username; })\n        updateVideoComments(videoObj.key, videoObj).subscribe(() => {\n            let feedListCopy = [...feedList]\n            feedListCopy.map((feed) => {\n                if (feed.key == videoObj.key) {\n                    feed.comments = videoObj.comments\n                }\n                addUserDetailsToFeed(feed, userList);\n            })\n            setFeedList(feedListCopy)\n        })\n    }\n\n    const handleCommentClick = (video) => {\n        setCommentModal(true);\n        setActiveVideoObj(video)\n    }\n\n    const addUserDetailsToFeed = (feed, allUser) => {\n        if (feed.likes && feed.likes.length) {\n            feed.likes.map((likeObj) => {\n                let userData = allUser.filter(userObj => userObj.key == likeObj.userId);\n                if (userData.length != 0) {\n                    likeObj.username = userData[0].username;\n                    likeObj.profileImage = userData[0].profileImage;\n                }\n            })\n        }\n        if (feed.comments && feed.comments.length) {\n            feed.comments.map((commentObj) => {\n                let userData = allUser.filter(userObj => userObj.key == commentObj.userId);\n                if (userData.length != 0) {\n                    commentObj.username = userData[0].username;\n                    commentObj.profileImage = userData[0].profileImage;\n                }\n            })\n        }\n    }\n\n    useEffect(() => {\n        dispatch(enableLoading());\n        Promise.all([getAllUserList(), getAllUploadedVideos()]).then((data) => {\n            dispatch(disableLoading());\n            let tempUserList = data[0]\n            let tempFeedList = data[1]\n\n            tempUserList.map((user) => {\n                tempFeedList.map((feed) => {\n                    if (user.key == feed.userId) {\n                        feed.username = user.name;\n                        feed.profileImage = user.profileImage;\n                        user.isAnyVideoSubmitted = true;\n                    }\n                    if (feed.likes && feed.likes.length) {\n                        let isAvail = feed.likes.filter(data => data.userId == loggedInUser.key)\n                        isAvail.length > 0 ? feed.isLiked = true : feed.isLiked = false\n                    } else {\n                        feed.isLiked = false\n                    }\n                    addUserDetailsToFeed(feed, tempUserList);\n                })\n            })\n            setFeedList(tempFeedList)\n            setUserList(tempUserList);\n        })\n    }, [])\n\n    const openUserStory = (user) => {\n        let userVdos = feedList.filter((feed) => user.key == feed.userId);\n        if (userVdos.length) {\n            setActiveVideoObj(userVdos[0]);\n            setCommentModal(true);\n        };\n    }\n\n    return (\n        <div className=\"user-dashboard-wrap\">\n            <div className=\"user-list-wrap\">\n                {userList && userList.map((user) => {\n                    return (user.isAnyVideoSubmitted ? <div key={user.key} className=\"user-icon-wrap\" onClick={() => openUserStory(user)}>\n                        <ProfileImage src={user.profileImage} type=\"large\" />\n                        <div>{user.username}</div>\n                    </div> : null)\n                })}\n            </div>\n            <div className=\"feed-dashboard-wrap\">\n                {/* <div className=\"loggedin-user\">\n                    <div>\n                        <ProfileImage src={loggedInUser.profileImage} />\n                        <div>\n                            <div>{loggedInUser.username}</div>\n                            <div className=\"username\">{loggedInUser.name}</div>\n                        </div>\n                    </div>\n                </div> */}\n                <div className=\"feed-wrap\">\n                    {feedList && feedList.map((feed) => {\n                        return <div key={feed.key} className=\"feed-card\">\n                            <div>\n                                <Vedio vdoObj={feed} />\n                            </div>\n                            <div className=\"username\">\n                                <ProfileImage src={feed.profileImage} />\n                                <span className=\"name\">{feed.username}</span>\n                            </div>\n                            <div className=\"video-title-like-wrap\">\n                                <div className=\"title\">{feed.title}</div>\n                                <div className=\"like-comment\">\n                                    {feed.likes && feed.likes.length > 0 && <div className=\"likes-count\">{feed.likes.length} Likes</div>}\n                                    {!feed.isLiked && <FavoriteBorder title=\"Unlike\" onClick={() => handleLikes(feed, 'liked')} />}\n                                    {feed.isLiked && <Favorite title=\"Like\" onClick={() => handleLikes(feed, 'unliked')} />}\n                                    <CommentOutlined title=\"comment\" onClick={() => handleCommentClick(feed)} />\n                                </div>\n\n                            </div>\n                        </div>\n                    })}\n                </div>\n            </div>\n\n            {commentModal && <VideoDetails handleClose={() => setCommentModal(false)} handleLikes={handleLikes} handleComments={handleComments} videoObj={activeVideoObj} />}\n\n        </div>\n    )\n}\n\nexport default Feeds\n","/Users/danny/Documents/Projects/boogalu/src/Services/Subscription.service.js",[],"/Users/danny/Documents/Projects/boogalu/src/Services/Utils.js",["411","412","413"],"export function formatTime(time) {\n    time = new Date(time);\n    const hour24 = time.getHours();\n    let minutes = (time.getMinutes() === 0) ? '00' : time.getMinutes();\n    minutes = (minutes > 0 && minutes < 10) ? `0${minutes}` : minutes;\n    const ampm = (hour24 >= 12) ? 'PM' : 'AM';\n    let hour = hour24 % 12 || 12;\n    //append zero is hour is single digit\n    if (hour < 10) {\n        hour = `0${hour}`;\n    }\n    return `${hour}:${minutes} ${ampm}`;\n};\n\nexport function formatDate(date, status) {\n    date = new Date(date);\n    var monthNames = [\n        \"January\", \"February\", \"March\",\n        \"April\", \"May\", \"June\", \"July\",\n        \"August\", \"September\", \"October\",\n        \"November\", \"December\"\n    ];\n    let day = date.getDate();\n    let monthIndex = date.getMonth();\n    let year = date.getFullYear();\n    if (status == 3) return day + 'th ' + monthNames[monthIndex] + \" \" + year;\n    if (status == 2) return day + 'th ' + monthNames[monthIndex];\n    if (status == 1) return day;\n};\n\nexport function timeStampToNewDate(timeStamp) {\n    return new Date(timeStamp.seconds * 1000 + Math.round(timeStamp.nanoseconds / 1000000));\n}\n\nexport function toBase64(file) {\n    new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.readAsDataURL(file);\n        reader.onload = () => resolve(reader.result);\n        reader.onerror = error => reject(error);\n    });\n}","/Users/danny/Documents/Projects/boogalu/src/Services/Upload.service.js",["414","415"],"import { Observable } from 'rxjs';\nimport firebase from './firebase';\nconst storageRef = firebase.storage().ref();\n\nconst BASE_PATH = '/uploads';\nvar FILE_NAME = '';\nvar FILE_PATH = '';\n// from ==> competition or user upload\n// type => small or large\nexport function uploadImage(image, from, type) {\n\n    let date = new Date();\n    let id = date.getTime().toString();\n    FILE_NAME = (type ? type : '') + 'pic' + id + '.jpg';\n    FILE_PATH = BASE_PATH + '/' + from + '/' + FILE_NAME;\n\n    let uploadTask = storageRef.child(FILE_PATH).putString(image, 'data_url');\n\n    return new Observable((observer) => {\n        uploadTask.on('state_changed',\n            (snapshot) => {\n                let progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n                console.log('Upload is ' + progress + '% done');\n                switch (snapshot.state) {\n                    case firebase.storage.TaskState.PAUSED: // or 'paused'\n                        console.log('Upload is paused');\n                        break;\n                    case firebase.storage.TaskState.RUNNING: // or 'running'\n                        console.log('Upload is running');\n                        break;\n                }\n            }, (error) => {\n                console.log(error);\n            }, () => {\n                uploadTask.snapshot.ref.getDownloadURL().then(function (downloadURL) {\n                    observer.next(downloadURL);\n                });\n            });\n    });\n}\n\nexport function deleteImage(imageUrl) {\n    storageRef.refFromURL(imageUrl).delete();\n}\n\nexport function uploadVideo(video) {\n\n    let date = new Date();\n    let id = date.getTime().toString();\n    FILE_NAME = 'user' + id + '.mp4';\n    FILE_PATH = BASE_PATH + '/video/' + FILE_NAME;\n\n    let uploadTask = storageRef.child(FILE_PATH).putString(video, 'data_url');\n\n    return new Observable((observer) => {\n        uploadTask.on('state_changed',\n            (snapshot) => {\n                let progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n                // console.log('Upload is ' + progress + '% done');\n                observer.next({ donePercentage: progress });\n                switch (snapshot.state) {\n                    case firebase.storage.TaskState.PAUSED: // or 'paused'\n                        console.log('Upload is paused');\n                        break;\n                    case firebase.storage.TaskState.RUNNING: // or 'running'\n                        console.log('Upload is running');\n                        break;\n                }\n            }, (error) => {\n                console.log(error);\n            }, () => {\n                uploadTask.snapshot.ref.getDownloadURL().then(function (downloadURL) {\n                    observer.next({ downloadURL });\n                });\n            });\n    });\n}\n\nexport function deleteVideo(videoUrl) {\n    storageRef.refFromURL(videoUrl).delete();\n}\n","/Users/danny/Documents/Projects/boogalu/src/Services/Competition.service.js",[],"/Users/danny/Documents/Projects/boogalu/src/Services/User.service.js",[],"/Users/danny/Documents/Projects/boogalu/src/Actions/User/index.js",[],"/Users/danny/Documents/Projects/boogalu/src/Services/EnrollCompetition.service.js",[],"/Users/danny/Documents/Projects/boogalu/src/Components/Vedio/Video.js",[],"/Users/danny/Documents/Projects/boogalu/src/Services/UploadedVideo.service.js",[],"/Users/danny/Documents/Projects/boogalu/src/Services/Email.service.js",[],"/Users/danny/Documents/Projects/boogalu/src/Constants/index.js",[],"/Users/danny/Documents/Projects/boogalu/src/Services/firebase.js",[],"/Users/danny/Documents/Projects/boogalu/src/Actions/Loader/index.js",[],"/Users/danny/Documents/Projects/boogalu/src/Actions/Notification/index.js",[],"/Users/danny/Documents/Projects/boogalu/src/Actions/LoginFlow/index.js",[],"/Users/danny/Documents/Projects/boogalu/src/Components/VideoDetails/index.js",["416","417","418","419"],"import React, { useState, useEffect } from 'react'\nimport Modal from '@material-ui/core/Modal';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport Fade from '@material-ui/core/Fade';\nimport CloseIcon from '@material-ui/icons/Close';\nimport IconButton from '@material-ui/core/IconButton';\nimport FavoriteBorder from '@material-ui/icons/FavoriteBorder';\nimport SendOutlined from '@material-ui/icons/SendOutlined';\nimport Favorite from '@material-ui/icons/Favorite';\nimport TextField from '@material-ui/core/TextField';\nimport Vedio from \"../Vedio/Video\";\nimport ProfileImage from \"../ProfileImage\";\nimport * as $ from 'jquery';\n\n\nfunction Comments({ handleClose, videoObj, handleLikes, handleComments }) {\n\n    const [openDetailsModal, setOpenDetailsModal] = useState(true);\n    const [commentText, setCommentText] = useState('');\n\n\n    const handleCommentClick = () => {\n        if (commentText != '') {\n            handleComments(commentText)\n            setCommentText('')\n        }\n    }\n\n    return (\n        <div className=\"subscription-modal-wrap\">\n            <Modal\n                aria-labelledby=\"transition-modal-title\"\n                aria-describedby=\"transition-modal-description\"\n                className='subscription-modal-box feeds-comment-modal'\n                open={openDetailsModal}\n                onClose={() => handleClose(false)}\n                closeAfterTransition\n                BackdropComponent={Backdrop}\n                BackdropProps={{\n                    timeout: 500,\n                }}\n            >\n                <Fade in={openDetailsModal}>\n                    <div className=\"subscription-inner-modal comment-modal\">\n                        <IconButton className=\"close-modal-btn\" onClick={() => handleClose(false)}>\n                            <CloseIcon />\n                        </IconButton>\n\n                        <div key={videoObj.key} className=\"feed-card\">\n                            <div className=\"username\">\n                                <ProfileImage src={videoObj.profileImage} />\n                                <span>{videoObj.username}</span>\n                            </div>\n                            <div>\n                                <Vedio vdoObj={videoObj} />\n                            </div>\n                            <div className=\"video-title-like-wrap\">\n                                <div className=\"title\">{videoObj.title}</div>\n                                <div className=\"like-comment\">\n                                    {videoObj.likes && videoObj.likes.length > 0 && <div className=\"likes-count\">{videoObj.likes.length} Likes</div>}\n                                    {!videoObj.isLiked && <FavoriteBorder onClick={() => handleLikes(videoObj, 'liked')} />}\n                                    {videoObj.isLiked && <Favorite onClick={() => handleLikes(videoObj, 'unliked')} />}\n                                </div>\n\n                            </div>\n                        </div>\n\n                        {videoObj.comments && videoObj.comments.length > 0 && <div className=\"comments-count\">{videoObj.comments.length} Comments</div>}\n\n                        <div className=\"comment-outer-wrap\">\n                            {videoObj.comments && videoObj.comments.map((comment, index) => {\n                                return <div className=\"comment-wrap\" key={index}>\n                                    <ProfileImage src={comment.profileImage} />\n                                    <span className=\"username\">{comment.username}</span>\n                                    <span>{comment.value}</span>\n                                </div>\n                            })}\n                        </div>\n\n                        <div className=\"commnet-input-wrap\">\n                            <TextField id=\"standard-basic\" label=\"Add Comments\" value={commentText} onChange={(e) => setCommentText(e.target.value)} />\n                            <SendOutlined onClick={() => handleCommentClick(videoObj, 'liked')} />\n                        </div>\n                    </div>\n                </Fade>\n            </Modal>\n        </div>\n    )\n}\n\nexport default Comments\n","/Users/danny/Documents/Projects/boogalu/src/Actions/Utility/index.js",[],"/Users/danny/Documents/Projects/boogalu/src/Actions/Competition/index.js",[],"/Users/danny/Documents/Projects/boogalu/src/Components/CompetitionsDetails/index.js",["420","421","422","423","424","425","426","427","428","429","430","431","432","433","434","435","436","437"],"import React, { useState, useEffect, useRef } from 'react'\nimport Modal from '@material-ui/core/Modal';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport Fade from '@material-ui/core/Fade';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport { FaCloudUploadAlt } from 'react-icons/fa';\nimport { useHistory } from \"react-router-dom\";\nimport { useStoreConsumer } from '../../Providers/StateProvider';\nimport { THUMBNAIL_URL } from '../../Constants';\nimport \"./CompetitionsDetails.scss\";\nimport EnrollCompetition from \"../EnrollCompetition\";\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\nimport { setActiveCompetition } from \"../../Actions/Competition\";\nimport { enableLoginFlow } from \"../../Actions/LoginFlow\";\nimport { getUploadedVideosByUserId } from \"../../Services/UploadedVideo.service\";\nimport { formatDate, formatTime } from \"../../Services/Utils\";\nimport VideoUploader from \"../VideoUploader\";\nimport { enableLoading, disableLoading } from \"../../Actions/Loader\";\nimport { NOTIFICATION_ERROR } from \"../../Constants\";\nimport { displayNotification } from \"../../Actions/Notification\";\n//activestep 1 === Competition details\n//activestep 2 === User submitted competition details if already enrolled\n//activestep 3 === Video selection\n//activestep 4 === final age group and video submission for competition\n\nexport default function CompetitionsDetails({ open, handleClose, initialStep }) {\n\n    const { state, dispatch } = useStoreConsumer();\n    const uploaderRef = useRef(null);\n    const history = useHistory();\n    const competitionDetails = state.activeCompetition;\n    console.log(competitionDetails);\n    const loggedInUser = state.loggedInUser;\n    const [userUploadedVdos, setUserUploadedVideoList] = useState([]);\n    const tncRef = useRef();\n    const [TnC, setTnC] = useState(false);\n    const [isTncAccepted, tncAcceptedValue] = useState(false);\n    const [ActiveStep, setActiveStep] = useState(initialStep || 1);\n    const [isVideoSelected, toggleVideoSelect] = useState(false);\n    const [selectedVideoData, setVideoData] = useState(null);\n    const [disableSubmitVdoButton, setDisableSubmitVdoButton] = useState(false);\n    const [VdoUploadDateLimit, setVdoUploadDateLimit] = useState(null)\n    const [SelectedVideo, setSelectedVideo] = useState({ title: \"\", desc: \"\", file: null });\n\n    useEffect(() => {\n        document.addEventListener('mousedown', handleClickOutside);\n        return () => {\n            document.removeEventListener('mousedown', handleClickOutside);\n        }\n    }, []);\n\n    useEffect(() => {\n        if (competitionDetails) {\n            let vdoUploadUpto = new Date(competitionDetails.startAt);\n            new Date(vdoUploadUpto.setDate(vdoUploadUpto.getDate() + 30));\n            let displayDate = formatDate(vdoUploadUpto, 3) + \" \" + formatTime(vdoUploadUpto)\n            setVdoUploadDateLimit(displayDate);\n        }\n    }, [competitionDetails]);\n\n    useEffect(() => {\n        (loggedInUser.email && loggedInUser.phone && ActiveStep === 3 && userUploadedVdos.length == 0) && getUploadedVideosByUserId(loggedInUser.key).subscribe((vdoList) => {\n            if (vdoList && vdoList.length) {\n                vdoList.map((uploadedVdo) => {\n                    if (competitionDetails.isUserEnrolled) {\n                        if (uploadedVdo.key == competitionDetails.userSubmitedDetails.vdo.key) {\n                            uploadedVdo.isSelected = true;\n                            let updatedCompetition = competitionDetails;\n                            updatedCompetition.selectedVideo = uploadedVdo;\n                            dispatch(setActiveCompetition(updatedCompetition));\n                            setDisableSubmitVdoButton(true);\n                        }\n                    } else if (state.currentLoginFlow === 'profile-competition' && state.activeVideoForCompetition == uploadedVdo.key) {\n                        // if user come from profile page by clicking upload for competition\n                        uploadedVdo.isSelected = true;\n                        let updatedCompetition = competitionDetails;\n                        updatedCompetition.selectedVideo = uploadedVdo;\n                        dispatch(setActiveCompetition(updatedCompetition));\n                        setVideoData(uploadedVdo);\n                        toggleVideoSelect(false);\n                    }\n                })\n                setUserUploadedVideoList(vdoList)\n            } else {\n                // if user not uploaded any video then set upload new tab active\n                setActiveTabInVdoSelection(2);\n            }\n        });\n    }, [ActiveStep]);\n\n    const setActiveTabInVdoSelection = (tab) => {\n        const getCurrentData = 'tab-2';\n        const tabsLinks = Array.from(document.querySelectorAll('.tab-links'));\n        const tabsBoxes = Array.from(document.querySelectorAll('.js-inner-tab-box'));\n        let currentTab = tab == 1 ? 'tab-1' : 'tab-2'\n        tabsBoxes.forEach(item => {\n            if (item.getAttribute('id') === currentTab) {\n                item.classList.add('active');\n            } else {\n                item.classList.remove('active');\n            }\n        });\n        tabsLinks.forEach(item => {\n            if (item?.dataset?.id === currentTab) {\n                item.classList.add('active');\n            } else {\n                item.classList.remove('active');\n            }\n        });\n    }\n\n    function handleClickOutside(event) {\n        if (tncRef && tncRef.current && !tncRef.current.contains(event.target)) {\n            setTnC(false);\n        }\n    }\n\n    const selectVdo = (e, vdo) => {\n        e.preventDefault();\n        e.stopPropagation();\n        if (vdo && vdo?.key && vdo?.key.length) {\n            toggleVideoSelect(false);\n            setVideoData(vdo);\n        }\n        if (competitionDetails.isUserEnrolled && competitionDetails.userSubmitedDetails.vdo.key == vdo.key) {\n            setDisableSubmitVdoButton(true);\n            let updatedCompetition = competitionDetails;\n            delete updatedCompetition.selectedVideo;\n            dispatch(setActiveCompetition(updatedCompetition));\n        }\n        else setDisableSubmitVdoButton(false);\n        let updatedVdos = userUploadedVdos;\n        updatedVdos.map((item) => {\n            if (item.key == vdo.key) {\n                item.isSelected = true;\n                let updatedCompetition = competitionDetails;\n                updatedCompetition.selectedVideo = item;\n                dispatch(setActiveCompetition(updatedCompetition));\n            }\n            else item.isSelected = false;\n        })\n        setUserUploadedVideoList([...updatedVdos]);\n    }\n\n    function toggleTabination(event) {\n        event.stopPropagation();\n\n        const getCurrentData = event.target.getAttribute('data-id');\n\n        const tabsLinks = Array.from(document.querySelectorAll('.tab-links'));\n        const tabsBoxes = Array.from(document.querySelectorAll('.js-inner-tab-box'));\n\n        tabsLinks.forEach(item => {\n            item.classList.remove('active');\n        });\n        event.target.classList.add('active');\n        tabsBoxes.forEach(item => {\n            if (item.getAttribute('id') === getCurrentData) {\n                item.classList.add('active');\n            } else {\n                item.classList.remove('active');\n            }\n        });\n    }\n\n    const proceedForLogin = () => {\n        handleClose();\n        dispatch(enableLoginFlow('competition'));\n        history.push({\n            pathname: '/login',\n            state: null\n        })\n    }\n\n    async function onChangeFile(event) {\n        event.preventDefault();\n        var file = event.target.files[0];\n        console.log(file);\n        if (file) {\n            if (file.size > 52428800) {\n                alert(\"File is too big!\");\n                dispatch(displayNotification({\n                    msg: \"File is too big!\",\n                    type: NOTIFICATION_ERROR,\n                    time: 3000\n                }))\n                setSelectedVideo({ ...SelectedVideo, file: null });\n                uploaderRef.current.click();\n            } else {\n                setSelectedVideo({ ...SelectedVideo, file: null });\n                const reader = new FileReader();\n                reader.readAsDataURL(file);\n                reader.onload = () => {\n                    setSelectedVideo({ ...SelectedVideo, file: reader.result });\n                    dispatch(enableLoginFlow('competition-uploadvdo'));\n                    // handleClose();\n                    // open = false;\n                }\n                reader.onerror = error => console.error(error);\n            }\n        }\n    }\n\n    const handleVdoUploadResponse = (value) => {\n        if (value) {\n            dispatch(enableLoading());\n            getUploadedVideosByUserId(loggedInUser.key).subscribe((vdoList) => {\n                if (vdoList) {\n                    setActiveTabInVdoSelection(1);\n                    vdoList.map((uploadedVdo) => {\n                        if (competitionDetails.isUserEnrolled) {\n                            if (uploadedVdo.key == competitionDetails.userSubmitedDetails.vdo.key) {\n                                uploadedVdo.isSelected = true;\n                                let updatedCompetition = competitionDetails;\n                                updatedCompetition.selectedVideo = uploadedVdo;\n                                dispatch(setActiveCompetition(updatedCompetition));\n                                setDisableSubmitVdoButton(true);\n                            }\n                        }\n                    })\n                    dispatch(disableLoading());\n                    setUserUploadedVideoList(vdoList)\n                }\n            });\n        }\n    }\n\n    function acceptTnC(event) {\n        const isTncChecked = event.target.checked;\n        tncAcceptedValue(isTncChecked);\n    }\n\n    function setActiveVideoActiveStep(step) {\n        if (selectedVideoData?.key && selectedVideoData?.key.length) {\n            toggleVideoSelect(false);\n            setActiveStep(step);\n        } else {\n            toggleVideoSelect(true);\n        }\n    }\n\n    return (\n        <div>\n            <Modal\n                aria-labelledby=\"transition-modal-title\"\n                aria-describedby=\"transition-modal-description\"\n                className='competition-modal-box'\n                open={open}\n                onClose={handleClose}\n                closeAfterTransition\n                BackdropComponent={Backdrop}\n                BackdropProps={{\n                    timeout: 500,\n                }}\n            >\n                <Fade in={open}>\n                    <div className=\"outer-modal-wrap\">\n                        {<div className=\"inner-modal-wrap\">\n                            {(ActiveStep == 1 || ActiveStep === 2) && <IconButton className=\"close-modal-btn\" onClick={() => { handleClose(); (state.activeCompetition && !state.currentLoginFlow) && dispatch(setActiveCompetition(null)) }}>\n                                <CloseIcon />\n                            </IconButton>}\n                            {(ActiveStep == 3 || ActiveStep == 4) && <IconButton className=\"close-modal-btn back-step-btn\" onClick={() => setActiveStep(ActiveStep - 1)}>\n                                <ArrowBackIcon />\n                            </IconButton>}\n                            <h2 id=\"title\">{competitionDetails.name}</h2>\n                            {(ActiveStep == 1 || ActiveStep == 2) && <div>\n                                <div className=\"image-contentWrap\">\n                                    <div className=\"image-wrap\">\n                                        <img src={competitionDetails.img} alt={competitionDetails.name} />\n                                    </div>\n                                    <div className=\"about-competition-wrap\">\n                                        <div className=\"sub-titles\">About Competition</div>\n                                        <p id=\"description\">{competitionDetails.desc}</p>\n\n                                        <div className=\"sub-titles\">Age Category</div>\n                                        <ul>\n                                            <li>Age 4 to 13 years</li>\n                                            <li>Age 14 to 17 years</li>\n                                            <li>Age 18 and above</li>\n                                        </ul>\n\n                                        <div className=\"sub-titles\" id=\"fees\">\n                                            Fees: <span>{competitionDetails.fee}</span>\n                                        </div>\n\n                                        <div className=\"start-at sub-titles\">\n                                            Start At: <span>{competitionDetails.startingDate}</span>\n                                        </div>\n                                        <div className=\"end-at sub-titles\">\n                                            End At: <span>{competitionDetails.endingDate}</span>\n                                        </div>\n\n                                        {competitionDetails && competitionDetails.isUserEnrolled ?\n                                            <div className=\"sub-titles\">\n                                                You can change/modify video till\n                                            <span>{VdoUploadDateLimit}</span></div> :\n                                            <div className=\"sub-titles\">\n                                                Upload video till <span>{VdoUploadDateLimit}</span></div>}\n\n                                        <div className=\"sub-titles\">Winners and Prizes Rule</div>\n                                        <ul>\n                                            <li>Top 3 Winner From Each Category Get Award.</li>\n                                            <li>There will be a three category as mention above.</li>\n                                            <li>Winner will be based on best performance.</li>\n                                        </ul>\n\n                                        <ul className=\"prices\">\n                                            <li className=\"sub-titles price-details\">\n                                                First Price : <span>{competitionDetails.prices[0]}</span>\n                                            </li>\n                                            <li className=\"sub-titles price-details\">\n                                                Second Price : <span>{competitionDetails.prices[1]}</span>\n                                            </li>\n                                            <li className=\"sub-titles price-details\">\n                                                Third Price : <span>{competitionDetails.prices[2]}</span>\n                                            </li>\n                                        </ul>\n\n                                        <div className=\"sub-titles\">Submission And Result</div>\n                                        <ul>\n                                            <li>You Have to submit Your video till 15th June</li>\n                                            <li>Result will be declared on 16th June At 4 Pm On</li>\n                                            <li>Winner will be based on best performance.</li>\n                                        </ul>\n                                        <h4 className=\"before-submit-message\">Time To Express Your Talent on Our Platform during this Lockdown</h4>\n                                    </div>\n                                </div>\n\n                                <div className=\"action-wrap\">\n                                    <div className=\"terms-button\" ref={tncRef} onClick={() => setTnC((TnC ? false : true))}>\n                                        <input type=\"checkbox\"\n                                            checked={isTncAccepted}\n                                            title=\"accept terms and condition\" onClick={(e) => acceptTnC(e)} />\n                                        Terms &amp; Conditions\n                                    {TnC && <div className=\"tool-tip-wrap\">\n                                            <div>You may not be able to attend the live session if you are late.</div>\n                                            <div>You may face interruptions during the course of the live stream due to internet connectivity issues.</div>\n                                            <div>Show details and the artist lineup are subject to change as per the artist’s discretion.</div>\n                                            <div> No refunds on purchased tickets are possible, even in case of any rescheduling.</div>\n                                        </div>}\n                                    </div>\n                                    {/* check for user logged in or not */}\n                                    {loggedInUser.email && loggedInUser.username ?\n                                        <div>\n                                            {!competitionDetails?.isUserEnrolled && <Button variant=\"contained\"\n                                                disabled={!isTncAccepted}\n                                                color=\"primary\"\n                                                onClick={() => setActiveStep(3)}\n                                            >Select Video</Button>}\n                                        </div> :\n                                        <div>\n                                            {/* <div>To upload video you need to login first</div> */}\n                                            <Button variant=\"contained\" color=\"primary\" onClick={() => proceedForLogin()}>Login</Button>\n                                        </div>\n                                    }\n                                    {loggedInUser && true && competitionDetails?.isUserEnrolled && <div className=\"change-video-wrap\">\n                                        <div >\n                                            Submitted details:\n                                        {/* <video width=\"400\" controls>\n                                            <source src={competitionDetails.userSubmitedDetails.vdo.url} />\n                                        </video> */}\n                                            <Button variant=\"contained\" color=\"primary\" onClick={() => setActiveStep(3)}>Change Video</Button>\n                                        </div>\n                                    </div>}\n                                </div>\n                            </div>}\n                            {ActiveStep === 3 && <div className=\"video-submit-section\">\n                                <div className=\"lessons-vdo-wrap\">\n                                    <div className=\"tabination-wrap\">\n                                        <div className=\"tab-btn-section\">\n                                            <button className=\"tab-links active\" data-id=\"tab-1\" onClick={e => toggleTabination(e)}>My video list</button>\n                                            <button className=\"tab-links\" data-id=\"tab-2\" onClick={e => toggleTabination(e)}>Upload new</button>\n                                        </div>\n                                        <div className=\"tab-content-wrap\">\n                                            <div id=\"tab-1\" className=\"inner-box js-inner-tab-box list-box active\">\n                                                {userUploadedVdos.length != 0 && userUploadedVdos.map((item, index) => {\n                                                    return <div className={item.isSelected ? 'vdo-outer selected-vdo' : 'vdo-outer'} key={index} onClick={(e) => selectVdo(e, item)}>\n                                                        <div className=\"vdo-wrap\" >\n                                                            <img src={item.thumbnail ? item.thumbnail : THUMBNAIL_URL} alt=\"video-url\" />\n                                                        </div>\n                                                        <div className=\"video-title\">{item.title}</div>\n                                                    </div>\n                                                })}\n                                            </div>\n                                            <div id=\"tab-2\" className=\"inner-box js-inner-tab-box new-upload-box\">\n                                                <div className=\"input-upload-wrap\">\n                                                    <input\n                                                        accept=\"video/mp4,video/x-m4v,video/*\"\n                                                        ref={uploaderRef}\n                                                        onChange={(e) => onChangeFile(e)}\n                                                        type=\"file\" id=\"video-upload\" title=\"upload video for competition\" />\n                                                    <i className=\"upload-icon\"><FaCloudUploadAlt /></i>\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                                {!disableSubmitVdoButton && <Button variant=\"contained\" color=\"primary\" onClick={() => setActiveVideoActiveStep(4)}>Upload</Button>}\n                                {\n                                    isVideoSelected ?\n                                        <p className=\"error_message\">Please select a video from top list or upload a new</p> : ''\n                                }\n                            </div>}\n\n                            {ActiveStep === 4 && <div>\n                                <EnrollCompetition handleClose={(e) => handleClose(e)} changeSelectedVdo={() => setActiveStep(3)} />\n                            </div>}\n                            {SelectedVideo?.file && <VideoUploader selectedVdo={SelectedVideo} handleVdoUploadResponse={(e) => handleVdoUploadResponse(e)} />}\n                        </div>}\n                    </div>\n                </Fade>\n            </Modal>\n        </div>\n    )\n}","/Users/danny/Documents/Projects/boogalu/src/Data/LessonsCategory.js",[],"/Users/danny/Documents/Projects/boogalu/src/Data/RegistrationStepData.js",[],"/Users/danny/Documents/Projects/boogalu/src/Components/ProfileImage/index.js",["438"],"import React from 'react'\nimport AccountCircleOutlinedIcon from '@material-ui/icons/AccountCircleOutlined';\n\nexport default function ProfileImage({ src, type }) {\n    return (\n        <div className={type == 'large' ? 'profile-image-wrap large-image' : 'profile-image-wrap small-image'}>\n            {src ? <img src={src} alt=\"user profile\" /> : <AccountCircleOutlinedIcon />}\n        </div>\n    )\n}","/Users/danny/Documents/Projects/boogalu/src/Database/index.js",["439"],"import { data } from 'jquery';\nimport firebase from '../Services/firebase';\nconst database = firebase.firestore();\nexport default database;","/Users/danny/Documents/Projects/boogalu/src/Components/BuySubscription/index.js",["440","441","442","443","444","445"],"import React, { useRef, useState, useEffect } from 'react'\nimport Button from '@material-ui/core/Button';\nimport { useStoreConsumer } from '../../Providers/StateProvider';\nimport { useHistory } from \"react-router-dom\";\nimport { formatDate } from \"../../Services/Utils\";\nimport { disableLoginFlow, enableLoginFlow } from \"../../Actions/LoginFlow\";\nimport { saveCompetition } from \"../../Services/EnrollCompetition.service\";\nimport { enableLoading, disableLoading } from \"../../Actions/Loader\";\n// modal imports\nimport Modal from '@material-ui/core/Modal';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport Fade from '@material-ui/core/Fade';\nimport CloseIcon from '@material-ui/icons/Close';\nimport IconButton from '@material-ui/core/IconButton';\n\nexport default function BuySubsription({ handleClose, activeStep, alreadySubscribed }) {\n    const history = useHistory();\n    const { state, dispatch } = useStoreConsumer();\n    const loggedInUser = state.loggedInUser;\n    const [openDetailsModal, setOpenDetailsModal] = useState(true);\n    const subscriptionDetails = state.activeSubscription;\n    const [subsciptionValidity, setsubsciptionValidity] = useState(null);\n    const competitionDetails = state.activeCompetition;\n\n    useEffect(() => {\n        let validUpto = new Date();\n        new Date(validUpto.setDate(validUpto.getDate() + 30));\n        let displayDate = formatDate(validUpto, 3);\n        setsubsciptionValidity(displayDate);\n    }, [subscriptionDetails])\n\n    const handleModalClose = () => {\n        setOpenDetailsModal(false);\n        dispatch(disableLoginFlow());\n        handleClose();\n    }\n\n    const submitForCompetition = () => {\n        dispatch(enableLoading());\n        const competitionObj = {\n            compId: competitionDetails.key,\n            compName: competitionDetails.name,\n            compImg: competitionDetails.img,\n            userId: loggedInUser.key,\n            vdo: {\n                key: competitionDetails.selectedVideo.key,\n                title: competitionDetails.selectedVideo.title,\n                thumbnail: competitionDetails.selectedVideo.thumbnail,\n                url: competitionDetails.selectedVideo.url,\n                desc: competitionDetails.selectedVideo.desc,\n            },\n            ageGroup: competitionDetails.ageGroup,\n            status: 'Submited'\n        }\n        console.log(competitionObj)\n        saveCompetition(competitionObj).subscribe((response) => {\n            dispatch(disableLoading());\n            console.log('vdo uploaded for competition suceess');\n            dispatch(enableLoginFlow('profile-competition'));\n            history.push('/profile');\n        })\n    }\n\n    const proceedForCompetition = () => {\n        if (state.currentLoginFlow == 'competition-subscription') {\n            submitForCompetition();\n        } else history.push('/competition');\n    }\n    const proceedForPayment = () => {\n        var params = \"?phone=\" + loggedInUser.phone + \"&orderId=\" + subscriptionDetails.key + \"&amount=\" + subscriptionDetails.amount + \"&uId=\" + loggedInUser.uId + \"&email=\" + loggedInUser.email;\n        // window.open('http://localhost:5001/boogalusite/us-central1/payment' + params, '_self');\n        window.open('https://us-central1-boogalusite.cloudfunctions.net/payment' + params, '_self');\n    }\n\n    return (\n        <div className=\"subscription-modal-wrap\">\n            <Modal\n                aria-labelledby=\"transition-modal-title\"\n                aria-describedby=\"transition-modal-description\"\n                className='subscription-modal-box'\n                open={openDetailsModal}\n                onClose={() => handleModalClose(false)}\n                closeAfterTransition\n                BackdropComponent={Backdrop}\n                BackdropProps={{\n                    timeout: 500,\n                }}\n            >\n                <Fade in={openDetailsModal}>\n                    <div className=\"subscription-inner-modal\">\n                        <IconButton className=\"close-modal-btn\" onClick={() => handleModalClose(false)}>\n                            <CloseIcon />\n                        </IconButton>\n                        <h3>Boogalu Subscription</h3>\n                        {activeStep == 1 && <div>\n                            <div className=\"subs-details-wrap\">\n                                <p>\n                                    Welcome, we are glad to see you. Now, you can subscribe to our application, and\n                                    get a chance to participate in any competition for one month.\n                                </p>\n                                <p> Just {subscriptionDetails.amount}/{subscriptionDetails.plans}</p>\n                                {/* <div>{subscriptionDetails.name}</div> */}\n                                {/* <div>{subscriptionDetails.desc}</div> */}\n                                {/* <div>{subscriptionDetails.amount} / {subscriptionDetails.plans}</div> */}\n                                {/* <div>Valid Upto- {subsciptionValidity}</div> */}\n                            </div>\n                            {alreadySubscribed ? <Button variant=\"contained\" color=\"secondary\" onClick={(e) => proceedForCompetition()}>Continue</Button> : <Button variant=\"contained\" color=\"secondary\" onClick={(e) => proceedForPayment(e)}>Subscribe</Button>}\n                        </div>}\n                        {activeStep == 2 && <div>\n                            <h3>Subscription Payment Recieved Successfully</h3>\n                            <Button variant=\"contained\" color=\"secondary\" onClick={(e) => proceedForCompetition()}>Continue to competition</Button>\n                        </div>}\n                        {activeStep == 3 && <div>\n                            <h3>Subscription Payment Fail</h3>\n                            <Button variant=\"contained\" color=\"secondary\" onClick={(e) => proceedForPayment(e)}>Retry</Button>\n                        </div>}\n                    </div>\n                </Fade>\n            </Modal>\n        </div>\n    )\n}","/Users/danny/Documents/Projects/boogalu/src/Actions/Subscription/index.js",[],"/Users/danny/Documents/Projects/boogalu/src/Components/EnrollCompetition/index.js",["446","447"],"import React, { useState, useEffect } from 'react'\nimport ArrowRightSharpIcon from '@material-ui/icons/ArrowRightSharp';\nimport Button from '@material-ui/core/Button';\nimport { useHistory } from \"react-router-dom\";\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { THUMBNAIL_URL } from '../../Constants';\nimport { useStoreConsumer } from '../../Providers/StateProvider';\nimport { saveCompetition, updateCompetition } from \"../../Services/EnrollCompetition.service\";\nimport { enableLoginFlow } from \"../../Actions/LoginFlow\";\nimport { setActiveCompetition } from \"../../Actions/Competition\";\nimport { enableLoading, disableLoading } from \"../../Actions/Loader\";\nimport { NOTIFICATION_ERROR, ADMIN_EMAIL_STAGING } from \"../../Constants\";\nimport { displayNotification } from \"../../Actions/Notification\";\nimport { sendEmail } from \"../../Services/Email.service\";\nimport { formatDate, formatTime } from \"../../Services/Utils\";\n\nfunction EnrollCompetition({ handleClose, changeSelectedVdo }) {\n\n    const history = useHistory();\n    const { state, dispatch } = useStoreConsumer();\n    const loggedInUser = state.loggedInUser;\n    const competitionDetails = state.activeCompetition;\n    const SelectedVdo = competitionDetails.selectedVideo;\n    const [IsUserSubscribed, setIsUserSubscribed] = useState(null);\n\n    useEffect(() => {\n        if (loggedInUser.subscriptions) {\n            let isSubscribed = loggedInUser.subscriptions.filter((data) => data.type === 'competition-enrollment');\n            if (isSubscribed.length) setIsUserSubscribed(true);\n            else setIsUserSubscribed(false);\n        } else setIsUserSubscribed(false);\n    }, [])\n\n    const onAgeGroupChange = (groupValue) => {\n        let compData = { ...competitionDetails };\n        compData.ageGroup = groupValue;\n        dispatch(setActiveCompetition(compData));\n    }\n\n    const sendEmailToAdmin = () => {\n        let emailBody = `<div>\n            <h6 style=\"font-size: 17px;margin-bottom: 26px;\">New Video Uploaded for competition ${competitionDetails.name}</h6>\n            <h4>User details -</h4>\n            <h6>${loggedInUser.name}</h6>\n            <h6>${loggedInUser.email}</h6>\n            <h6>${loggedInUser.phone}</h6>\n            <a href=${competitionDetails.selectedVideo.url} >Clik here to check uploaded video</a>\n            </div>`;\n        let payload = {\n            mailTo: ADMIN_EMAIL_STAGING,\n            title: 'New video submited for competition',\n            content: emailBody\n        }\n        sendEmail(payload).subscribe((res) => {\n            if (!('error' in res)) {\n                console.log('Admin Email Send Successfully.');\n            } else console.log('Admin Email Send Failed.');\n        })\n    }\n\n    const sendEmailToUser = () => {\n        let vdoUploadUpto = new Date(competitionDetails.startAt);\n        new Date(vdoUploadUpto.setDate(vdoUploadUpto.getDate() + 30));\n        let displayDate = formatDate(vdoUploadUpto, 3) + \" \" + formatTime(vdoUploadUpto);\n\n        let emailBody = `<div>\n        <p>Hi ${loggedInUser.name} you have enrolled in our  ${competitionDetails.name}, now you can upload/change videos till ${displayDate}. </p>\n        <h4> Upload your best performance video and be ready for exciting prizes</h4>\n        <a href=${competitionDetails.selectedVideo.url} >Clik here to check uploaded video</a>\n            </div>`;\n        let payload = {\n            mailTo: loggedInUser.email,\n            title: 'Your video submited for competition',\n            content: emailBody\n        }\n        sendEmail(payload).subscribe((res) => {\n            if (!('error' in res)) {\n                console.log('User Email Send Successfully.');\n            } else console.log('User Email Send Failed.');\n        })\n    }\n\n    const submitForCompetition = () => {\n        dispatch(enableLoading());\n        const competitionObj = {\n            compId: competitionDetails.key,\n            compName: competitionDetails.name,\n            compImg: competitionDetails.img,\n            userId: loggedInUser.key,\n            vdo: {\n                key: competitionDetails.selectedVideo.key,\n                title: competitionDetails.selectedVideo.title,\n                thumbnail: competitionDetails.selectedVideo.thumbnail,\n                url: competitionDetails.selectedVideo.url,\n                desc: competitionDetails.selectedVideo.desc,\n            },\n            ageGroup: competitionDetails.ageGroup,\n            status: 'Submited'\n        }\n        console.log(competitionObj)\n        if (competitionDetails.isUserEnrolled) {\n            updateCompetition(competitionDetails.userSubmitedDetails.key, competitionObj).subscribe((response) => {\n                dispatch(disableLoading());\n                console.log('vdo updated for competition suceess');\n                history.push('/profile');\n            })\n        } else {\n            saveCompetition(competitionObj).subscribe((response) => {\n                dispatch(disableLoading());\n                sendEmailToAdmin();\n                sendEmailToUser();\n                console.log('vdo uploaded for competition suceess');\n                history.push('/profile');\n            })\n        }\n\n        // handleClose();\n    }\n\n    const proceedForSubscription = () => {\n        if (competitionDetails.ageGroup) {\n            handleClose();\n            dispatch(enableLoginFlow('competition-subscription'));\n            history.push({\n                pathname: '/subscription',\n                state: null\n            })\n        } else {\n            dispatch(displayNotification({\n                msg: \"Please the age group!\",\n                type: NOTIFICATION_ERROR,\n                time: 3000\n            }))\n        }\n    }\n\n    return (\n        <div className=\"final-enrollment-wrap\">\n            <h2 id=\"title\">Basic Details for Enrollment</h2>\n            {/* <img src={competitionDetails.img} alt={competitionDetails.name} style={{ width: '20%' }} /> */}\n            {/* <p id=\"description\">{competitionDetails.desc}</p> */}\n            <div className=\"userdata\">\n                <div className=\"user-info\"><label>Name:</label><span>{loggedInUser.name}</span></div>\n                <div className=\"user-info\"><label>Phone:</label><span>{loggedInUser.phone}</span></div>\n                <div className=\"user-info\"><label>Email:</label><span>{loggedInUser.email}</span></div>\n                <div className=\"user-info\"><label>Gender:</label><span>{loggedInUser.gender}</span></div>\n            </div>\n            {!competitionDetails?.isUserEnrolled ? <div className=\"age-group-dropdown\">\n                <FormControl variant=\"outlined\" className=\"input-field\">\n                    <InputLabel id=\"select-outlined-label\">Select Age Group</InputLabel>\n                    <Select\n                        labelId=\"select-outlined-label\"\n                        id=\"select-outlined\"\n                        value={competitionDetails.ageGroup}\n                        onChange={(e) => onAgeGroupChange(e.target.value)}\n                        label=\"Select Age Group\"\n                    >\n                        <MenuItem value=\"Age 4 to 13 years\">Age 4 to 13 years</MenuItem>\n                        <MenuItem value=\"Age 14 to 17 years\">Age 14 to 17 years</MenuItem>\n                        <MenuItem value=\"Age 18 and above\">Age 18 and above</MenuItem>\n                    </Select>\n                </FormControl>\n            </div>\n                :\n                <div>Submited age group - {competitionDetails.userSubmitedDetails.ageGroup}</div>\n            }\n            {SelectedVdo && <div className=\"selected-vdo\">\n                <div className=\"sub-title\">Selected video for competition</div>\n                <div className=\"change-link\" onClick={() => changeSelectedVdo()}>Change</div>\n                <div className=\"vdo-wrap\" >\n                    <img src={SelectedVdo.thumbnail ? SelectedVdo.thumbnail : THUMBNAIL_URL} style={{ width: \"50%\" }} />\n                    <div>{SelectedVdo.title}</div>\n                </div>\n            </div>}\n            {/* check for user subscribed or not */}\n            {IsUserSubscribed ?\n                <div>\n                    {!competitionDetails?.isUserEnrolled ? <Button variant=\"contained\" color=\"primary\" onClick={() => submitForCompetition()}>Complete Enrollment <ArrowRightSharpIcon /></Button>\n                        : <Button variant=\"contained\" color=\"primary\" onClick={() => submitForCompetition()}>Update Competition<ArrowRightSharpIcon /></Button>\n                    }\n                </div> :\n                <div>\n                    {/* <div>To upload video you need to subscribe</div> */}\n                    <Button variant=\"contained\" color=\"primary\" onClick={() => proceedForSubscription()}>Continue</Button>\n                </div>\n            }\n        </div>\n    )\n}\n\nexport default EnrollCompetition\n","/Users/danny/Documents/Projects/boogalu/src/Services/Other.service.js",[],"/Users/danny/Documents/Projects/boogalu/src/Components/LessonVideoComponent/index.js",["448","449","450","451","452","453","454","455","456","457","458","459","460","461","462","463","464","465","466","467","468"],"/Users/danny/Documents/Projects/boogalu/src/Data/Dummy.js",[],{"ruleId":"469","replacedBy":"470"},{"ruleId":"471","replacedBy":"472"},{"ruleId":"473","severity":1,"message":"474","line":2,"column":50,"nodeType":"475","messageId":"476","endLine":2,"endColumn":54},{"ruleId":"473","severity":1,"message":"477","line":5,"column":7,"nodeType":"475","messageId":"476","endLine":5,"endColumn":24},{"ruleId":"473","severity":1,"message":"478","line":1,"column":17,"nodeType":"475","messageId":"476","endLine":1,"endColumn":25},{"ruleId":"479","severity":1,"message":"480","line":26,"column":8,"nodeType":"481","endLine":26,"endColumn":10,"suggestions":"482"},{"ruleId":"483","severity":1,"message":"484","line":61,"column":66,"nodeType":"485","endLine":61,"endColumn":81},{"ruleId":"486","severity":1,"message":"487","line":78,"column":29,"nodeType":"488","endLine":78,"endColumn":83},{"ruleId":"483","severity":1,"message":"484","line":84,"column":114,"nodeType":"485","endLine":84,"endColumn":129},{"ruleId":"483","severity":1,"message":"484","line":90,"column":110,"nodeType":"485","endLine":90,"endColumn":125},{"ruleId":"483","severity":1,"message":"484","line":96,"column":109,"nodeType":"485","endLine":96,"endColumn":124},{"ruleId":"473","severity":1,"message":"489","line":9,"column":8,"nodeType":"475","messageId":"476","endLine":9,"endColumn":21},{"ruleId":"473","severity":1,"message":"490","line":59,"column":11,"nodeType":"475","messageId":"476","endLine":59,"endColumn":24},{"ruleId":"473","severity":1,"message":"491","line":13,"column":10,"nodeType":"475","messageId":"476","endLine":13,"endColumn":18},{"ruleId":"473","severity":1,"message":"492","line":22,"column":10,"nodeType":"475","messageId":"476","endLine":22,"endColumn":31},{"ruleId":"473","severity":1,"message":"493","line":22,"column":33,"nodeType":"475","messageId":"476","endLine":22,"endColumn":51},{"ruleId":"473","severity":1,"message":"494","line":22,"column":81,"nodeType":"475","messageId":"476","endLine":22,"endColumn":109},{"ruleId":"495","severity":1,"message":"496","line":31,"column":66,"nodeType":"497","messageId":"498","endLine":31,"endColumn":68},{"ruleId":"495","severity":1,"message":"496","line":31,"column":113,"nodeType":"497","messageId":"498","endLine":31,"endColumn":115},{"ruleId":"479","severity":1,"message":"499","line":62,"column":8,"nodeType":"481","endLine":62,"endColumn":10,"suggestions":"500"},{"ruleId":"495","severity":1,"message":"501","line":65,"column":34,"nodeType":"497","messageId":"498","endLine":65,"endColumn":36},{"ruleId":"502","severity":1,"message":"503","line":121,"column":25,"nodeType":"488","endLine":121,"endColumn":111},{"ruleId":"473","severity":1,"message":"504","line":18,"column":21,"nodeType":"475","messageId":"476","endLine":18,"endColumn":31},{"ruleId":"473","severity":1,"message":"493","line":23,"column":33,"nodeType":"475","messageId":"476","endLine":23,"endColumn":51},{"ruleId":"479","severity":1,"message":"505","line":37,"column":8,"nodeType":"481","endLine":37,"endColumn":28,"suggestions":"506"},{"ruleId":"495","severity":1,"message":"501","line":65,"column":28,"nodeType":"497","messageId":"498","endLine":65,"endColumn":30},{"ruleId":"507","severity":1,"message":"508","line":159,"column":9,"nodeType":"509","messageId":"510","endLine":232,"endColumn":10},{"ruleId":"495","severity":1,"message":"496","line":182,"column":52,"nodeType":"497","messageId":"498","endLine":182,"endColumn":54},{"ruleId":"495","severity":1,"message":"496","line":183,"column":57,"nodeType":"497","messageId":"498","endLine":183,"endColumn":59},{"ruleId":"495","severity":1,"message":"496","line":184,"column":57,"nodeType":"497","messageId":"498","endLine":184,"endColumn":59},{"ruleId":"495","severity":1,"message":"496","line":215,"column":52,"nodeType":"497","messageId":"498","endLine":215,"endColumn":54},{"ruleId":"495","severity":1,"message":"496","line":216,"column":57,"nodeType":"497","messageId":"498","endLine":216,"endColumn":59},{"ruleId":"495","severity":1,"message":"496","line":217,"column":57,"nodeType":"497","messageId":"498","endLine":217,"endColumn":59},{"ruleId":"502","severity":1,"message":"503","line":328,"column":17,"nodeType":"488","endLine":328,"endColumn":36},{"ruleId":"473","severity":1,"message":"511","line":2,"column":60,"nodeType":"475","messageId":"476","endLine":2,"endColumn":72},{"ruleId":"473","severity":1,"message":"493","line":11,"column":33,"nodeType":"475","messageId":"476","endLine":11,"endColumn":51},{"ruleId":"473","severity":1,"message":"512","line":29,"column":25,"nodeType":"475","messageId":"476","endLine":29,"endColumn":39},{"ruleId":"479","severity":1,"message":"480","line":85,"column":8,"nodeType":"481","endLine":85,"endColumn":18,"suggestions":"513"},{"ruleId":"473","severity":1,"message":"514","line":88,"column":15,"nodeType":"475","messageId":"476","endLine":88,"endColumn":32},{"ruleId":"495","severity":1,"message":"496","line":95,"column":40,"nodeType":"497","messageId":"498","endLine":95,"endColumn":42},{"ruleId":"515","severity":1,"message":"516","line":95,"column":58,"nodeType":"517","messageId":"518","endLine":95,"endColumn":60},{"ruleId":"515","severity":1,"message":"516","line":95,"column":95,"nodeType":"517","messageId":"518","endLine":95,"endColumn":97},{"ruleId":"486","severity":1,"message":"519","line":220,"column":45,"nodeType":"488","endLine":220,"endColumn":86},{"ruleId":"502","severity":1,"message":"503","line":233,"column":33,"nodeType":"488","endLine":233,"endColumn":141},{"ruleId":"486","severity":1,"message":"519","line":246,"column":25,"nodeType":"488","endLine":246,"endColumn":89},{"ruleId":"495","severity":1,"message":"496","line":255,"column":130,"nodeType":"497","messageId":"498","endLine":255,"endColumn":132},{"ruleId":"495","severity":1,"message":"496","line":263,"column":121,"nodeType":"497","messageId":"498","endLine":263,"endColumn":123},{"ruleId":"495","severity":1,"message":"496","line":269,"column":121,"nodeType":"497","messageId":"498","endLine":269,"endColumn":123},{"ruleId":"495","severity":1,"message":"496","line":275,"column":125,"nodeType":"497","messageId":"498","endLine":275,"endColumn":127},{"ruleId":"473","severity":1,"message":"520","line":6,"column":8,"nodeType":"475","messageId":"476","endLine":6,"endColumn":34},{"ruleId":"473","severity":1,"message":"521","line":15,"column":8,"nodeType":"475","messageId":"476","endLine":15,"endColumn":23},{"ruleId":"473","severity":1,"message":"522","line":16,"column":8,"nodeType":"475","messageId":"476","endLine":16,"endColumn":24},{"ruleId":"473","severity":1,"message":"523","line":17,"column":8,"nodeType":"475","messageId":"476","endLine":17,"endColumn":23},{"ruleId":"495","severity":1,"message":"496","line":96,"column":36,"nodeType":"497","messageId":"498","endLine":96,"endColumn":38},{"ruleId":"479","severity":1,"message":"524","line":106,"column":8,"nodeType":"481","endLine":106,"endColumn":10,"suggestions":"525"},{"ruleId":"495","severity":1,"message":"501","line":126,"column":29,"nodeType":"497","messageId":"498","endLine":126,"endColumn":31},{"ruleId":"526","severity":1,"message":"527","line":131,"column":46,"nodeType":"528","messageId":"529","endLine":131,"endColumn":48},{"ruleId":"526","severity":1,"message":"527","line":133,"column":56,"nodeType":"528","messageId":"529","endLine":133,"endColumn":58},{"ruleId":"495","severity":1,"message":"496","line":134,"column":87,"nodeType":"497","messageId":"498","endLine":134,"endColumn":89},{"ruleId":"495","severity":1,"message":"501","line":135,"column":53,"nodeType":"497","messageId":"498","endLine":135,"endColumn":55},{"ruleId":"526","severity":1,"message":"527","line":142,"column":62,"nodeType":"528","messageId":"529","endLine":142,"endColumn":64},{"ruleId":"495","severity":1,"message":"496","line":143,"column":87,"nodeType":"497","messageId":"498","endLine":143,"endColumn":89},{"ruleId":"495","severity":1,"message":"501","line":144,"column":53,"nodeType":"497","messageId":"498","endLine":144,"endColumn":55},{"ruleId":"479","severity":1,"message":"530","line":157,"column":8,"nodeType":"481","endLine":157,"endColumn":10,"suggestions":"531"},{"ruleId":"495","severity":1,"message":"496","line":160,"column":37,"nodeType":"497","messageId":"498","endLine":160,"endColumn":39},{"ruleId":"479","severity":1,"message":"530","line":163,"column":8,"nodeType":"481","endLine":163,"endColumn":15,"suggestions":"532"},{"ruleId":"495","severity":1,"message":"496","line":201,"column":22,"nodeType":"497","messageId":"498","endLine":201,"endColumn":24},{"ruleId":"495","severity":1,"message":"496","line":201,"column":56,"nodeType":"497","messageId":"498","endLine":201,"endColumn":58},{"ruleId":"526","severity":1,"message":"527","line":206,"column":38,"nodeType":"528","messageId":"529","endLine":206,"endColumn":40},{"ruleId":"495","severity":1,"message":"496","line":208,"column":81,"nodeType":"497","messageId":"498","endLine":208,"endColumn":83},{"ruleId":"495","severity":1,"message":"501","line":209,"column":48,"nodeType":"497","messageId":"498","endLine":209,"endColumn":50},{"ruleId":"495","severity":1,"message":"496","line":225,"column":72,"nodeType":"497","messageId":"498","endLine":225,"endColumn":74},{"ruleId":"526","severity":1,"message":"527","line":239,"column":38,"nodeType":"528","messageId":"529","endLine":239,"endColumn":40},{"ruleId":"495","severity":1,"message":"496","line":240,"column":70,"nodeType":"497","messageId":"498","endLine":240,"endColumn":72},{"ruleId":"495","severity":1,"message":"501","line":241,"column":37,"nodeType":"497","messageId":"498","endLine":241,"endColumn":39},{"ruleId":"526","severity":1,"message":"527","line":248,"column":44,"nodeType":"528","messageId":"529","endLine":248,"endColumn":46},{"ruleId":"495","severity":1,"message":"496","line":249,"column":70,"nodeType":"497","messageId":"498","endLine":249,"endColumn":72},{"ruleId":"495","severity":1,"message":"501","line":250,"column":37,"nodeType":"497","messageId":"498","endLine":250,"endColumn":39},{"ruleId":"495","severity":1,"message":"496","line":260,"column":20,"nodeType":"497","messageId":"498","endLine":260,"endColumn":22},{"ruleId":"495","severity":1,"message":"501","line":267,"column":67,"nodeType":"497","messageId":"498","endLine":267,"endColumn":69},{"ruleId":"526","severity":1,"message":"527","line":270,"column":38,"nodeType":"528","messageId":"529","endLine":270,"endColumn":40},{"ruleId":"526","severity":1,"message":"527","line":273,"column":37,"nodeType":"528","messageId":"529","endLine":273,"endColumn":39},{"ruleId":"495","severity":1,"message":"496","line":274,"column":30,"nodeType":"497","messageId":"498","endLine":274,"endColumn":32},{"ruleId":"495","severity":1,"message":"496","line":279,"column":73,"nodeType":"497","messageId":"498","endLine":279,"endColumn":75},{"ruleId":"526","severity":1,"message":"527","line":298,"column":44,"nodeType":"528","messageId":"529","endLine":298,"endColumn":46},{"ruleId":"526","severity":1,"message":"527","line":301,"column":37,"nodeType":"528","messageId":"529","endLine":301,"endColumn":39},{"ruleId":"495","severity":1,"message":"496","line":302,"column":30,"nodeType":"497","messageId":"498","endLine":302,"endColumn":32},{"ruleId":"502","severity":1,"message":"503","line":352,"column":29,"nodeType":"488","endLine":352,"endColumn":68},{"ruleId":"495","severity":1,"message":"496","line":442,"column":91,"nodeType":"497","messageId":"498","endLine":442,"endColumn":93},{"ruleId":"502","severity":1,"message":"503","line":490,"column":41,"nodeType":"488","endLine":490,"endColumn":74},{"ruleId":"473","severity":1,"message":"533","line":1,"column":27,"nodeType":"475","messageId":"476","endLine":1,"endColumn":33},{"ruleId":"473","severity":1,"message":"534","line":1,"column":35,"nodeType":"475","messageId":"476","endLine":1,"endColumn":44},{"ruleId":"473","severity":1,"message":"535","line":2,"column":8,"nodeType":"475","messageId":"476","endLine":2,"endColumn":13},{"ruleId":"473","severity":1,"message":"536","line":7,"column":28,"nodeType":"475","messageId":"476","endLine":7,"endColumn":45},{"ruleId":"495","severity":1,"message":"496","line":69,"column":31,"nodeType":"497","messageId":"498","endLine":69,"endColumn":33},{"ruleId":"495","severity":1,"message":"496","line":101,"column":44,"nodeType":"497","messageId":"498","endLine":101,"endColumn":46},{"ruleId":"495","severity":1,"message":"496","line":109,"column":40,"nodeType":"497","messageId":"498","endLine":109,"endColumn":42},{"ruleId":"479","severity":1,"message":"537","line":114,"column":8,"nodeType":"481","endLine":114,"endColumn":10,"suggestions":"538"},{"ruleId":"479","severity":1,"message":"539","line":119,"column":8,"nodeType":"481","endLine":119,"endColumn":28,"suggestions":"540"},{"ruleId":"526","severity":1,"message":"527","line":22,"column":51,"nodeType":"528","messageId":"529","endLine":22,"endColumn":53},{"ruleId":"495","severity":1,"message":"496","line":23,"column":104,"nodeType":"497","messageId":"498","endLine":23,"endColumn":106},{"ruleId":"495","severity":1,"message":"496","line":61,"column":36,"nodeType":"497","messageId":"498","endLine":61,"endColumn":38},{"ruleId":"479","severity":1,"message":"541","line":80,"column":8,"nodeType":"481","endLine":80,"endColumn":10,"suggestions":"542"},{"ruleId":"473","severity":1,"message":"543","line":24,"column":20,"nodeType":"475","messageId":"476","endLine":24,"endColumn":28},{"ruleId":"479","severity":1,"message":"544","line":31,"column":29,"nodeType":"545","endLine":38,"endColumn":14},{"ruleId":"479","severity":1,"message":"546","line":20,"column":8,"nodeType":"481","endLine":20,"endColumn":15,"suggestions":"547"},{"ruleId":"473","severity":1,"message":"493","line":24,"column":33,"nodeType":"475","messageId":"476","endLine":24,"endColumn":51},{"ruleId":"473","severity":1,"message":"494","line":24,"column":81,"nodeType":"475","messageId":"476","endLine":24,"endColumn":109},{"ruleId":"479","severity":1,"message":"499","line":73,"column":8,"nodeType":"481","endLine":73,"endColumn":10,"suggestions":"548"},{"ruleId":"495","severity":1,"message":"501","line":78,"column":38,"nodeType":"497","messageId":"498","endLine":78,"endColumn":40},{"ruleId":"526","severity":1,"message":"527","line":82,"column":69,"nodeType":"528","messageId":"529","endLine":82,"endColumn":71},{"ruleId":"526","severity":1,"message":"527","line":83,"column":51,"nodeType":"528","messageId":"529","endLine":83,"endColumn":53},{"ruleId":"495","severity":1,"message":"501","line":86,"column":52,"nodeType":"497","messageId":"498","endLine":86,"endColumn":54},{"ruleId":"495","severity":1,"message":"501","line":88,"column":46,"nodeType":"497","messageId":"498","endLine":88,"endColumn":48},{"ruleId":"526","severity":1,"message":"527","line":89,"column":60,"nodeType":"528","messageId":"529","endLine":89,"endColumn":62},{"ruleId":"479","severity":1,"message":"549","line":99,"column":8,"nodeType":"481","endLine":99,"endColumn":20,"suggestions":"550"},{"ruleId":"495","severity":1,"message":"501","line":104,"column":42,"nodeType":"497","messageId":"498","endLine":104,"endColumn":44},{"ruleId":"495","severity":1,"message":"496","line":156,"column":36,"nodeType":"497","messageId":"498","endLine":156,"endColumn":38},{"ruleId":"495","severity":1,"message":"496","line":157,"column":41,"nodeType":"497","messageId":"498","endLine":157,"endColumn":43},{"ruleId":"495","severity":1,"message":"496","line":158,"column":36,"nodeType":"497","messageId":"498","endLine":158,"endColumn":38},{"ruleId":"495","severity":1,"message":"501","line":167,"column":34,"nodeType":"497","messageId":"498","endLine":167,"endColumn":36},{"ruleId":"507","severity":1,"message":"508","line":198,"column":9,"nodeType":"509","messageId":"510","endLine":204,"endColumn":10},{"ruleId":"507","severity":1,"message":"508","line":208,"column":9,"nodeType":"509","messageId":"510","endLine":214,"endColumn":10},{"ruleId":"526","severity":1,"message":"527","line":221,"column":45,"nodeType":"528","messageId":"529","endLine":221,"endColumn":47},{"ruleId":"495","severity":1,"message":"501","line":225,"column":28,"nodeType":"497","messageId":"498","endLine":225,"endColumn":30},{"ruleId":"526","severity":1,"message":"527","line":232,"column":69,"nodeType":"528","messageId":"529","endLine":232,"endColumn":71},{"ruleId":"526","severity":1,"message":"527","line":233,"column":47,"nodeType":"528","messageId":"529","endLine":233,"endColumn":49},{"ruleId":"495","severity":1,"message":"501","line":236,"column":48,"nodeType":"497","messageId":"498","endLine":236,"endColumn":50},{"ruleId":"495","severity":1,"message":"501","line":238,"column":42,"nodeType":"497","messageId":"498","endLine":238,"endColumn":44},{"ruleId":"526","severity":1,"message":"527","line":239,"column":56,"nodeType":"528","messageId":"529","endLine":239,"endColumn":58},{"ruleId":"495","severity":1,"message":"501","line":249,"column":34,"nodeType":"497","messageId":"498","endLine":249,"endColumn":36},{"ruleId":"495","severity":1,"message":"501","line":273,"column":25,"nodeType":"497","messageId":"498","endLine":273,"endColumn":27},{"ruleId":"495","severity":1,"message":"501","line":395,"column":64,"nodeType":"497","messageId":"498","endLine":395,"endColumn":66},{"ruleId":"495","severity":1,"message":"501","line":416,"column":29,"nodeType":"497","messageId":"498","endLine":416,"endColumn":31},{"ruleId":"495","severity":1,"message":"501","line":429,"column":69,"nodeType":"497","messageId":"498","endLine":429,"endColumn":71},{"ruleId":"495","severity":1,"message":"501","line":430,"column":37,"nodeType":"497","messageId":"498","endLine":430,"endColumn":39},{"ruleId":"495","severity":1,"message":"501","line":434,"column":37,"nodeType":"497","messageId":"498","endLine":434,"endColumn":39},{"ruleId":"495","severity":1,"message":"496","line":438,"column":25,"nodeType":"497","messageId":"498","endLine":438,"endColumn":27},{"ruleId":"502","severity":1,"message":"503","line":448,"column":25,"nodeType":"488","endLine":448,"endColumn":111},{"ruleId":"473","severity":1,"message":"551","line":3,"column":8,"nodeType":"475","messageId":"476","endLine":3,"endColumn":13},{"ruleId":"473","severity":1,"message":"552","line":8,"column":13,"nodeType":"475","messageId":"476","endLine":8,"endColumn":14},{"ruleId":"473","severity":1,"message":"543","line":12,"column":20,"nodeType":"475","messageId":"476","endLine":12,"endColumn":28},{"ruleId":"473","severity":1,"message":"553","line":14,"column":12,"nodeType":"475","messageId":"476","endLine":14,"endColumn":34},{"ruleId":"473","severity":1,"message":"554","line":16,"column":12,"nodeType":"475","messageId":"476","endLine":16,"endColumn":20},{"ruleId":"479","severity":1,"message":"546","line":52,"column":8,"nodeType":"481","endLine":52,"endColumn":10,"suggestions":"555"},{"ruleId":"473","severity":1,"message":"556","line":67,"column":11,"nodeType":"475","messageId":"476","endLine":67,"endColumn":18},{"ruleId":"495","severity":1,"message":"496","line":186,"column":48,"nodeType":"497","messageId":"498","endLine":186,"endColumn":50},{"ruleId":"495","severity":1,"message":"496","line":42,"column":20,"nodeType":"497","messageId":"498","endLine":42,"endColumn":22},{"ruleId":"495","severity":1,"message":"501","line":49,"column":67,"nodeType":"497","messageId":"498","endLine":49,"endColumn":69},{"ruleId":"526","severity":1,"message":"527","line":52,"column":38,"nodeType":"528","messageId":"529","endLine":52,"endColumn":40},{"ruleId":"526","severity":1,"message":"527","line":55,"column":37,"nodeType":"528","messageId":"529","endLine":55,"endColumn":39},{"ruleId":"495","severity":1,"message":"496","line":56,"column":30,"nodeType":"497","messageId":"498","endLine":56,"endColumn":32},{"ruleId":"495","severity":1,"message":"496","line":61,"column":73,"nodeType":"497","messageId":"498","endLine":61,"endColumn":75},{"ruleId":"526","severity":1,"message":"527","line":80,"column":44,"nodeType":"528","messageId":"529","endLine":80,"endColumn":46},{"ruleId":"526","severity":1,"message":"527","line":83,"column":37,"nodeType":"528","messageId":"529","endLine":83,"endColumn":39},{"ruleId":"495","severity":1,"message":"496","line":84,"column":30,"nodeType":"497","messageId":"498","endLine":84,"endColumn":32},{"ruleId":"526","severity":1,"message":"527","line":100,"column":38,"nodeType":"528","messageId":"529","endLine":100,"endColumn":40},{"ruleId":"495","severity":1,"message":"496","line":101,"column":70,"nodeType":"497","messageId":"498","endLine":101,"endColumn":72},{"ruleId":"495","severity":1,"message":"501","line":102,"column":37,"nodeType":"497","messageId":"498","endLine":102,"endColumn":39},{"ruleId":"526","severity":1,"message":"527","line":109,"column":44,"nodeType":"528","messageId":"529","endLine":109,"endColumn":46},{"ruleId":"495","severity":1,"message":"496","line":110,"column":70,"nodeType":"497","messageId":"498","endLine":110,"endColumn":72},{"ruleId":"495","severity":1,"message":"501","line":111,"column":37,"nodeType":"497","messageId":"498","endLine":111,"endColumn":39},{"ruleId":"526","severity":1,"message":"527","line":126,"column":37,"nodeType":"528","messageId":"529","endLine":126,"endColumn":39},{"ruleId":"526","severity":1,"message":"527","line":127,"column":41,"nodeType":"528","messageId":"529","endLine":127,"endColumn":43},{"ruleId":"495","severity":1,"message":"496","line":128,"column":34,"nodeType":"497","messageId":"498","endLine":128,"endColumn":36},{"ruleId":"495","severity":1,"message":"496","line":134,"column":77,"nodeType":"497","messageId":"498","endLine":134,"endColumn":79},{"ruleId":"479","severity":1,"message":"530","line":145,"column":8,"nodeType":"481","endLine":145,"endColumn":10,"suggestions":"557"},{"ruleId":"495","severity":1,"message":"496","line":148,"column":59,"nodeType":"497","messageId":"498","endLine":148,"endColumn":61},{"ruleId":"495","severity":1,"message":"496","line":26,"column":16,"nodeType":"497","messageId":"498","endLine":26,"endColumn":18},{"ruleId":"495","severity":1,"message":"496","line":27,"column":16,"nodeType":"497","messageId":"498","endLine":27,"endColumn":18},{"ruleId":"495","severity":1,"message":"496","line":28,"column":16,"nodeType":"497","messageId":"498","endLine":28,"endColumn":18},{"ruleId":"507","severity":1,"message":"508","line":24,"column":17,"nodeType":"509","messageId":"510","endLine":31,"endColumn":18},{"ruleId":"507","severity":1,"message":"508","line":61,"column":17,"nodeType":"509","messageId":"510","endLine":68,"endColumn":18},{"ruleId":"473","severity":1,"message":"534","line":1,"column":27,"nodeType":"475","messageId":"476","endLine":1,"endColumn":36},{"ruleId":"473","severity":1,"message":"552","line":13,"column":13,"nodeType":"475","messageId":"476","endLine":13,"endColumn":14},{"ruleId":"473","severity":1,"message":"558","line":18,"column":30,"nodeType":"475","messageId":"476","endLine":18,"endColumn":49},{"ruleId":"495","severity":1,"message":"501","line":23,"column":25,"nodeType":"497","messageId":"498","endLine":23,"endColumn":27},{"ruleId":"495","severity":1,"message":"496","line":64,"column":98,"nodeType":"497","messageId":"498","endLine":64,"endColumn":100},{"ruleId":"526","severity":1,"message":"527","line":66,"column":43,"nodeType":"528","messageId":"529","endLine":66,"endColumn":45},{"ruleId":"495","severity":1,"message":"496","line":68,"column":45,"nodeType":"497","messageId":"498","endLine":68,"endColumn":47},{"ruleId":"495","severity":1,"message":"496","line":75,"column":116,"nodeType":"497","messageId":"498","endLine":75,"endColumn":118},{"ruleId":"479","severity":1,"message":"559","line":91,"column":8,"nodeType":"481","endLine":91,"endColumn":20,"suggestions":"560"},{"ruleId":"473","severity":1,"message":"561","line":94,"column":15,"nodeType":"475","messageId":"476","endLine":94,"endColumn":29},{"ruleId":"495","severity":1,"message":"496","line":97,"column":30,"nodeType":"497","messageId":"498","endLine":97,"endColumn":32},{"ruleId":"495","severity":1,"message":"496","line":127,"column":97,"nodeType":"497","messageId":"498","endLine":127,"endColumn":99},{"ruleId":"526","severity":1,"message":"527","line":135,"column":32,"nodeType":"528","messageId":"529","endLine":135,"endColumn":34},{"ruleId":"495","severity":1,"message":"496","line":136,"column":26,"nodeType":"497","messageId":"498","endLine":136,"endColumn":28},{"ruleId":"526","severity":1,"message":"527","line":212,"column":47,"nodeType":"528","messageId":"529","endLine":212,"endColumn":49},{"ruleId":"495","severity":1,"message":"496","line":214,"column":49,"nodeType":"497","messageId":"498","endLine":214,"endColumn":51},{"ruleId":"495","severity":1,"message":"496","line":261,"column":42,"nodeType":"497","messageId":"498","endLine":261,"endColumn":44},{"ruleId":"495","severity":1,"message":"496","line":264,"column":42,"nodeType":"497","messageId":"498","endLine":264,"endColumn":44},{"ruleId":"495","severity":1,"message":"496","line":264,"column":61,"nodeType":"497","messageId":"498","endLine":264,"endColumn":63},{"ruleId":"495","severity":1,"message":"496","line":268,"column":42,"nodeType":"497","messageId":"498","endLine":268,"endColumn":44},{"ruleId":"495","severity":1,"message":"496","line":268,"column":61,"nodeType":"497","messageId":"498","endLine":268,"endColumn":63},{"ruleId":"495","severity":1,"message":"501","line":378,"column":74,"nodeType":"497","messageId":"498","endLine":378,"endColumn":76},{"ruleId":"495","severity":1,"message":"496","line":6,"column":30,"nodeType":"497","messageId":"498","endLine":6,"endColumn":32},{"ruleId":"473","severity":1,"message":"562","line":1,"column":10,"nodeType":"475","messageId":"476","endLine":1,"endColumn":14},{"ruleId":"473","severity":1,"message":"533","line":1,"column":17,"nodeType":"475","messageId":"476","endLine":1,"endColumn":23},{"ruleId":"473","severity":1,"message":"563","line":22,"column":12,"nodeType":"475","messageId":"476","endLine":22,"endColumn":31},{"ruleId":"495","severity":1,"message":"496","line":65,"column":36,"nodeType":"497","messageId":"498","endLine":65,"endColumn":38},{"ruleId":"495","severity":1,"message":"496","line":95,"column":37,"nodeType":"497","messageId":"498","endLine":95,"endColumn":39},{"ruleId":"495","severity":1,"message":"496","line":109,"column":37,"nodeType":"497","messageId":"498","endLine":109,"endColumn":39},{"ruleId":"495","severity":1,"message":"496","line":113,"column":37,"nodeType":"497","messageId":"498","endLine":113,"endColumn":39},{"ruleId":"479","severity":1,"message":"564","line":35,"column":8,"nodeType":"481","endLine":35,"endColumn":10,"suggestions":"565"},{"ruleId":"502","severity":1,"message":"503","line":174,"column":21,"nodeType":"488","endLine":174,"endColumn":121},{"ruleId":"473","severity":1,"message":"533","line":1,"column":27,"nodeType":"475","messageId":"476","endLine":1,"endColumn":33},{"ruleId":"479","severity":1,"message":"566","line":24,"column":8,"nodeType":"481","endLine":24,"endColumn":10,"suggestions":"567"},{"ruleId":"495","severity":1,"message":"496","line":49,"column":31,"nodeType":"497","messageId":"498","endLine":49,"endColumn":33},{"ruleId":"495","severity":1,"message":"496","line":53,"column":38,"nodeType":"497","messageId":"498","endLine":53,"endColumn":40},{"ruleId":"495","severity":1,"message":"496","line":57,"column":38,"nodeType":"497","messageId":"498","endLine":57,"endColumn":40},{"ruleId":"495","severity":1,"message":"496","line":73,"column":30,"nodeType":"497","messageId":"498","endLine":73,"endColumn":32},{"ruleId":"495","severity":1,"message":"496","line":77,"column":37,"nodeType":"497","messageId":"498","endLine":77,"endColumn":39},{"ruleId":"495","severity":1,"message":"496","line":81,"column":37,"nodeType":"497","messageId":"498","endLine":81,"endColumn":39},{"ruleId":"495","severity":1,"message":"496","line":97,"column":30,"nodeType":"497","messageId":"498","endLine":97,"endColumn":32},{"ruleId":"495","severity":1,"message":"496","line":97,"column":61,"nodeType":"497","messageId":"498","endLine":97,"endColumn":63},{"ruleId":"495","severity":1,"message":"496","line":117,"column":30,"nodeType":"497","messageId":"498","endLine":117,"endColumn":32},{"ruleId":"495","severity":1,"message":"496","line":123,"column":37,"nodeType":"497","messageId":"498","endLine":123,"endColumn":39},{"ruleId":"495","severity":1,"message":"496","line":129,"column":37,"nodeType":"497","messageId":"498","endLine":129,"endColumn":39},{"ruleId":"495","severity":1,"message":"496","line":146,"column":30,"nodeType":"497","messageId":"498","endLine":146,"endColumn":32},{"ruleId":"495","severity":1,"message":"496","line":151,"column":34,"nodeType":"497","messageId":"498","endLine":151,"endColumn":36},{"ruleId":"495","severity":1,"message":"496","line":155,"column":41,"nodeType":"497","messageId":"498","endLine":155,"endColumn":43},{"ruleId":"495","severity":1,"message":"496","line":159,"column":41,"nodeType":"497","messageId":"498","endLine":159,"endColumn":43},{"ruleId":"495","severity":1,"message":"496","line":185,"column":80,"nodeType":"497","messageId":"498","endLine":185,"endColumn":82},{"ruleId":"495","severity":1,"message":"496","line":188,"column":81,"nodeType":"497","messageId":"498","endLine":188,"endColumn":83},{"ruleId":"495","severity":1,"message":"496","line":191,"column":80,"nodeType":"497","messageId":"498","endLine":191,"endColumn":82},{"ruleId":"495","severity":1,"message":"496","line":194,"column":81,"nodeType":"497","messageId":"498","endLine":194,"endColumn":83},"no-native-reassign",["568"],"no-negated-in-lhs",["569"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'loggedInUserState' is assigned a value but never used.","'useState' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'history?.location?.pathname'. Either include it or remove the dependency array.","ArrayExpression",["570"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'ImageUploader' is defined but never used.","'onimageUpload' is assigned a value but never used.","'toBase64' is defined but never used.","'NOTIFICATION_SUCCCESS' is defined but never used.","'NOTIFICATION_ERROR' is defined but never used.","'FEMALE_PROFILE_DEFAULT_IMAGE' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has a missing dependency: 'userDetails'. Either include it or remove the dependency array. You can also do a functional update 'setUserDetails(u => ...)' if you only need 'userDetails' in the 'setUserDetails' call.",["571"],"Expected '!==' and instead saw '!='.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'signupUser' is defined but never used.","React Hook useEffect has a missing dependency: 'signinUser'. Either include it or remove the dependency array.",["572"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'FaStaylinked' is defined but never used.","'setActiveRoute' is assigned a value but never used.",["573"],"'listenRouteChange' is assigned a value but never used.","no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'FavoriteBorderOutlinedIcon' is defined but never used.","'firstPrizeBadge' is defined but never used.","'secondPrizeBadge' is defined but never used.","'thirdPrizeBadge' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch', 'history', 'loggedInUser', 'onWindowScroll', and 'state.currentLoginFlow'. Either include them or remove the dependency array.",["574"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has missing dependencies: 'dispatch' and 'loggedInUser.key'. Either include them or remove the dependency array.",["575"],["576"],"'useRef' is defined but never used.","'useEffect' is defined but never used.","'Video' is defined but never used.","'setActiveCategory' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dispatch', 'history', 'loggedInUser', 'sendEmailToAdmin', 'sendEmailToUser', 'state.activeSubscription.key', 'state.activeSubscription.type', and 'state.currentLoginFlow'. Either include them or remove the dependency array.",["577"],"React Hook useEffect has a missing dependency: 'loggedInUser?.subscriptions'. Either include it or remove the dependency array.",["578"],"React Hook useEffect has missing dependencies: 'dispatch', 'loggedInUser.email', 'loggedInUser.phone', 'loggedInUser.subscriptions', 'prepareUserCompData', and 'state.currentLoginFlow'. Either include them or remove the dependency array.",["579"],"'dispatch' is assigned a value but never used.","Assignments to the 'initialFields' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","ObjectExpression","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["580"],["581"],"React Hook useEffect has a missing dependency: 'stepData'. Either include it or remove the dependency array.",["582"],"'bgImg' is defined but never used.","'$' is defined but never used.","'danceImageVisibleClass' is assigned a value but never used.","'isMobile' is assigned a value but never used.",["583"],"'classes' is assigned a value but never used.",["584"],"'setOpenDetailsModal' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'competitionDetails', 'dispatch', 'loggedInUser.email', 'loggedInUser.key', 'loggedInUser.phone', 'state.activeVideoForCompetition', 'state.currentLoginFlow', and 'userUploadedVdos.length'. Either include them or remove the dependency array.",["585"],"'getCurrentData' is assigned a value but never used.","'data' is defined but never used.","'subsciptionValidity' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'loggedInUser.subscriptions'. Either include it or remove the dependency array.",["586"],"React Hook useEffect has a missing dependency: 'activeVideosList'. Either include it or remove the dependency array.",["587"],"no-global-assign","no-unsafe-negation",{"desc":"588","fix":"589"},{"desc":"590","fix":"591"},{"desc":"592","fix":"593"},{"desc":"594","fix":"595"},{"desc":"596","fix":"597"},{"desc":"598","fix":"599"},{"desc":"600","fix":"601"},{"desc":"602","fix":"603"},{"desc":"604","fix":"605"},{"desc":"606","fix":"607"},{"desc":"608","fix":"609"},{"desc":"590","fix":"610"},{"desc":"611","fix":"612"},{"desc":"613","fix":"614"},{"desc":"598","fix":"615"},{"desc":"616","fix":"617"},{"desc":"618","fix":"619"},{"desc":"620","fix":"621"},"Update the dependencies array to be: [history?.location?.pathname]",{"range":"622","text":"623"},"Update the dependencies array to be: [userDetails]",{"range":"624","text":"625"},"Update the dependencies array to be: [signinUser, thirdPartyResponse]",{"range":"626","text":"627"},"Update the dependencies array to be: [history?.location?.pathname, isMobile]",{"range":"628","text":"629"},"Update the dependencies array to be: [dispatch, history, loggedInUser, onWindowScroll, state.currentLoginFlow]",{"range":"630","text":"631"},"Update the dependencies array to be: [dispatch, loggedInUser.key]",{"range":"632","text":"633"},"Update the dependencies array to be: [dispatch, loggedInUser.key, state]",{"range":"634","text":"635"},"Update the dependencies array to be: [dispatch, history, loggedInUser, sendEmailToAdmin, sendEmailToUser, state.activeSubscription.key, state.activeSubscription.type, state.currentLoginFlow]",{"range":"636","text":"637"},"Update the dependencies array to be: [loggedInUser?.subscriptions, state.loggedInUser]",{"range":"638","text":"639"},"Update the dependencies array to be: [dispatch, loggedInUser.email, loggedInUser.phone, loggedInUser.subscriptions, prepareUserCompData, state.currentLoginFlow]",{"range":"640","text":"641"},"Update the dependencies array to be: [dispatch, state]",{"range":"642","text":"643"},{"range":"644","text":"625"},"Update the dependencies array to be: [activeStep, stepData]",{"range":"645","text":"646"},"Update the dependencies array to be: [dispatch]",{"range":"647","text":"648"},{"range":"649","text":"633"},"Update the dependencies array to be: [ActiveStep, competitionDetails, dispatch, loggedInUser.email, loggedInUser.key, loggedInUser.phone, state.activeVideoForCompetition, state.currentLoginFlow, userUploadedVdos.length]",{"range":"650","text":"651"},"Update the dependencies array to be: [loggedInUser.subscriptions]",{"range":"652","text":"653"},"Update the dependencies array to be: [activeVideosList]",{"range":"654","text":"655"},[925,927],"[history?.location?.pathname]",[3079,3081],"[userDetails]",[2030,2050],"[signinUser, thirdPartyResponse]",[3444,3454],"[history?.location?.pathname, isMobile]",[4797,4799],"[dispatch, history, loggedInUser, onWindowScroll, state.currentLoginFlow]",[6989,6991],"[dispatch, loggedInUser.key]",[7251,7258],"[dispatch, loggedInUser.key, state]",[5480,5482],"[dispatch, history, loggedInUser, sendEmailToAdmin, sendEmailToUser, state.activeSubscription.key, state.activeSubscription.type, state.currentLoginFlow]",[5705,5725],"[loggedInUser?.subscriptions, state.loggedInUser]",[3888,3890],"[dispatch, loggedInUser.email, loggedInUser.phone, loggedInUser.subscriptions, prepareUserCompData, state.currentLoginFlow]",[851,858],"[dispatch, state]",[3591,3593],[4915,4927],"[activeStep, stepData]",[2512,2514],"[dispatch]",[5724,5726],[4724,4736],"[ActiveStep, competitionDetails, dispatch, loggedInUser.email, loggedInUser.key, loggedInUser.phone, state.activeVideoForCompetition, state.currentLoginFlow, userUploadedVdos.length]",[1812,1814],"[loggedInUser.subscriptions]",[1249,1251],"[activeVideosList]"]