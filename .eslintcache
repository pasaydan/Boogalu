[{"/Users/danny/Documents/Projects/boogalu/src/index.js":"1","/Users/danny/Documents/Projects/boogalu/src/reportWebVitals.js":"2","/Users/danny/Documents/Projects/boogalu/src/Providers/StateProvider.js":"3","/Users/danny/Documents/Projects/boogalu/src/App.js":"4","/Users/danny/Documents/Projects/boogalu/src/Services/LocalstorageCache.js":"5","/Users/danny/Documents/Projects/boogalu/src/Components/Footer/index.js":"6","/Users/danny/Documents/Projects/boogalu/src/Components/Login/Login.js":"7","/Users/danny/Documents/Projects/boogalu/src/Components/Navigation/index.js":"8","/Users/danny/Documents/Projects/boogalu/src/Components/Admin/Subscription.js":"9","/Users/danny/Documents/Projects/boogalu/src/Components/Profile/Profile.js":"10","/Users/danny/Documents/Projects/boogalu/src/Components/Admin/Competition.js":"11","/Users/danny/Documents/Projects/boogalu/src/Components/EditProfile/EditProfile.js":"12","/Users/danny/Documents/Projects/boogalu/src/Reducers/index.js":"13","/Users/danny/Documents/Projects/boogalu/src/Components/Competitions/index.js":"14","/Users/danny/Documents/Projects/boogalu/src/Components/Upcoming/index.js":"15","/Users/danny/Documents/Projects/boogalu/src/Components/Splash/index.js":"16","/Users/danny/Documents/Projects/boogalu/src/Components/Subscriptions/index.js":"17","/Users/danny/Documents/Projects/boogalu/src/Components/Signup/index.js":"18","/Users/danny/Documents/Projects/boogalu/src/Components/Contactus/index.js":"19","/Users/danny/Documents/Projects/boogalu/src/Components/Homepage/index.js":"20","/Users/danny/Documents/Projects/boogalu/src/Components/VideoUploader/index.js":"21","/Users/danny/Documents/Projects/boogalu/src/Components/Page404/index.js":"22","/Users/danny/Documents/Projects/boogalu/src/Services/User.service.js":"23","/Users/danny/Documents/Projects/boogalu/src/Services/Upload.service.js":"24","/Users/danny/Documents/Projects/boogalu/src/Services/UploadedVideo.service.js":"25","/Users/danny/Documents/Projects/boogalu/src/Services/Competition.service.js":"26","/Users/danny/Documents/Projects/boogalu/src/Services/Subscription.service.js":"27","/Users/danny/Documents/Projects/boogalu/src/Services/EnrollCompetition.service.js":"28","/Users/danny/Documents/Projects/boogalu/src/Components/Vedio/Video.js":"29","/Users/danny/Documents/Projects/boogalu/src/Actions/User/index.js":"30","/Users/danny/Documents/Projects/boogalu/src/Services/Utils.js":"31","/Users/danny/Documents/Projects/boogalu/src/Data/RegistrationStepData.js":"32","/Users/danny/Documents/Projects/boogalu/src/Actions/LoginFlow/index.js":"33","/Users/danny/Documents/Projects/boogalu/src/Actions/Competition/index.js":"34","/Users/danny/Documents/Projects/boogalu/src/Services/firebase.js":"35","/Users/danny/Documents/Projects/boogalu/src/Components/CompetitionsDetails/index.js":"36","/Users/danny/Documents/Projects/boogalu/src/Constants/index.js":"37","/Users/danny/Documents/Projects/boogalu/src/Data/LessonsCategory.js":"38","/Users/danny/Documents/Projects/boogalu/src/Database/index.js":"39","/Users/danny/Documents/Projects/boogalu/src/Actions/Subscription/index.js":"40","/Users/danny/Documents/Projects/boogalu/src/Components/BuySubscription/index.js":"41","/Users/danny/Documents/Projects/boogalu/src/Components/EnrollCompetition/index.js":"42","/Users/danny/Documents/Projects/boogalu/src/Components/Loader/index.js":"43","/Users/danny/Documents/Projects/boogalu/src/Actions/Loader/index.js":"44"},{"size":714,"mtime":1607871183480,"results":"45","hashOfConfig":"46"},{"size":362,"mtime":1607448783643,"results":"47","hashOfConfig":"46"},{"size":987,"mtime":1612100632203,"results":"48","hashOfConfig":"46"},{"size":3715,"mtime":1612101108922,"results":"49","hashOfConfig":"46"},{"size":244,"mtime":1608092665797,"results":"50","hashOfConfig":"46"},{"size":4454,"mtime":1611990120104,"results":"51","hashOfConfig":"46"},{"size":14100,"mtime":1612004526602,"results":"52","hashOfConfig":"46"},{"size":11497,"mtime":1612095977538,"results":"53","hashOfConfig":"46"},{"size":7040,"mtime":1612089803597,"results":"54","hashOfConfig":"46"},{"size":10581,"mtime":1612089803602,"results":"55","hashOfConfig":"46"},{"size":8261,"mtime":1612089803596,"results":"56","hashOfConfig":"46"},{"size":12749,"mtime":1611657873315,"results":"57","hashOfConfig":"46"},{"size":1258,"mtime":1612101391708,"results":"58","hashOfConfig":"46"},{"size":4528,"mtime":1612101023282,"results":"59","hashOfConfig":"46"},{"size":1144,"mtime":1611500144741,"results":"60","hashOfConfig":"46"},{"size":337,"mtime":1610252476571,"results":"61","hashOfConfig":"46"},{"size":5756,"mtime":1612098279868,"results":"62","hashOfConfig":"46"},{"size":29119,"mtime":1612007242849,"results":"63","hashOfConfig":"46"},{"size":2054,"mtime":1611682060478,"results":"64","hashOfConfig":"46"},{"size":4885,"mtime":1612089803599,"results":"65","hashOfConfig":"46"},{"size":10515,"mtime":1612089803604,"results":"66","hashOfConfig":"46"},{"size":454,"mtime":1612089803600,"results":"67","hashOfConfig":"46"},{"size":2106,"mtime":1612005451251,"results":"68","hashOfConfig":"46"},{"size":2925,"mtime":1611659867189,"results":"69","hashOfConfig":"46"},{"size":1519,"mtime":1611658357929,"results":"70","hashOfConfig":"46"},{"size":3029,"mtime":1611657725425,"results":"71","hashOfConfig":"46"},{"size":2579,"mtime":1611998841256,"results":"72","hashOfConfig":"46"},{"size":3292,"mtime":1611776438217,"results":"73","hashOfConfig":"46"},{"size":616,"mtime":1611500501935,"results":"74","hashOfConfig":"46"},{"size":382,"mtime":1607543824191,"results":"75","hashOfConfig":"46"},{"size":1406,"mtime":1611638880845,"results":"76","hashOfConfig":"46"},{"size":7490,"mtime":1608453248853,"results":"77","hashOfConfig":"46"},{"size":306,"mtime":1611686954131,"results":"78","hashOfConfig":"46"},{"size":186,"mtime":1611686954131,"results":"79","hashOfConfig":"46"},{"size":984,"mtime":1611418181345,"results":"80","hashOfConfig":"46"},{"size":19440,"mtime":1612093027140,"results":"81","hashOfConfig":"46"},{"size":1149,"mtime":1612100758043,"results":"82","hashOfConfig":"46"},{"size":11937,"mtime":1610252476574,"results":"83","hashOfConfig":"46"},{"size":139,"mtime":1611420039353,"results":"84","hashOfConfig":"46"},{"size":189,"mtime":1612003974266,"results":"85","hashOfConfig":"46"},{"size":5574,"mtime":1612098683522,"results":"86","hashOfConfig":"46"},{"size":6336,"mtime":1612096189425,"results":"87","hashOfConfig":"46"},{"size":338,"mtime":1612100323181,"results":"88","hashOfConfig":"46"},{"size":286,"mtime":1612101381270,"results":"89","hashOfConfig":"46"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},"1gp1tlp",{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"92"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"92"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"92"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"92"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"92"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"92"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"92"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"124","messages":"125","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"126","messages":"127","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"92"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"92"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":28,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"92"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"92"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"92"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"92"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"92"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"92"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"92"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189","usedDeprecatedRules":"92"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192","usedDeprecatedRules":"92"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/danny/Documents/Projects/boogalu/src/index.js",[],["197","198"],"/Users/danny/Documents/Projects/boogalu/src/reportWebVitals.js",[],"/Users/danny/Documents/Projects/boogalu/src/Providers/StateProvider.js",["199"],"/Users/danny/Documents/Projects/boogalu/src/App.js",["200"],"/Users/danny/Documents/Projects/boogalu/src/Services/LocalstorageCache.js",[],"/Users/danny/Documents/Projects/boogalu/src/Components/Footer/index.js",["201","202","203","204","205","206","207"],"import React, { useState, useEffect } from 'react';\nimport { useHistory } from \"react-router-dom\";\nimport boogaluLogo from '../../Images/Boogalu-logo.svg';\nimport { FaInstagramSquare, FaYoutube, FaFacebookSquare } from 'react-icons/fa';\nimport * as $ from 'jquery';\n\nfunction Footer() {\n    const history = useHistory();\n    \n    useEffect(() => {\n        setTimeout(() => {\n            const pathName = history?.location?.pathname.split('/')[1];\n            const footerLinks = document.querySelectorAll('.js-page-links li');\n\n            if (footerLinks && footerLinks.length) {\n                footerLinks.forEach((ele) => {\n                    const getData = ele.getAttribute('data-name').toLocaleLowerCase();\n                    if (pathName?.length && getData.includes(pathName)) {\n                        ele.classList.add('active');\n                    }\n                });\n            }\n\n        }, 1000);\n\n    }, []);\n\n    function navigatePageLinks(event, path) {\n        const footerLinks = document.querySelectorAll('.js-page-links li');\n        if (footerLinks && footerLinks.length) {\n            footerLinks.forEach((ele) => {\n                const getData = ele.getAttribute('data-name').toLocaleLowerCase();\n                if (path?.length && getData.includes(path)) {\n                    ele.classList.add('active');\n                } else {\n                    if (ele.classList.contains('active')) {\n                        ele.classList.remove('active');    \n                    }\n                }\n            });\n        }\n        history.push(`/${path}`);\n        if (path) {\n            setTimeout(() => {\n                $('html,body').animate({\n                    scrollTop: 0\n                }, 700);\n            }, 100);\n        }\n    }\n\n    return (\n        <div>\n            <footer className=\"flex-container-VC\">\n                <div className=\"flex-1 copyright-wrap\">\n                    <div className=\"footer-logo-wrap\">\n                        <img src={boogaluLogo} alt=\"Logo\" className=\"image-7\" />\n                    </div>\n                    <div className=\"copyright-inner\">\n                        &#169; 2021 &nbsp;  \n                        <a href=\"https://www.choreoculture.com/\" target=\"_blank\">\n                            CHOREOCULTURE STUDIO.\n                        </a>\n                        <div>ALL RIGHTS RESERVED.</div>\n                    </div>\n                </div>\n                <div className=\"flex-1\">\n                    <div className=\"footer-tagline\" >Get the latest dance content &amp; ChoreoCulture news</div>\n                    <div className=\"email-input-inner\">\n                        <input type=\"email\" placeholder=\"Email\" />\n                    </div>\n                    <button className=\"subscribe\" >Subscribe</button>\n                </div>\n                <div className=\"footer-menus flex-1\">\n                    <ul className=\"menu-lists js-page-links flex-1\">\n                        <li data-name=\"career\">Careers</li>\n                        <li data-name=\"contactus\">\n                            <a onClick={(e) => navigatePageLinks(e, 'contactus')}>Contact us</a>\n                        </li>\n                        <li data-name=\"terms\">Terms</li>\n                    </ul>\n                    <ul className=\"menu-lists menu-lists-2 flex-1\">\n                        <li>\n                            <a href=\"https://www.instagram.com/choreo_culture/?hl=en\" title=\"Follow us on Insta\" target=\"_blank\">\n                                <i><FaInstagramSquare /></i>\n                                <span>Instagram</span>\n                            </a>\n                        </li>\n                        <li>\n                            <a href=\"https://www.youtube.com/user/anjanevents\" title=\"Subscribe our channel\" target=\"_blank\">\n                                <i><FaYoutube /></i>\n                                <span>Youtube</span>\n                            </a>\n                        </li>\n                        <li>\n                            <a href=\"https://www.facebook.com/choreocultureindia/\" title=\"Like our FB page\" target=\"_blank\">\n                                <i><FaFacebookSquare /></i>\n                                <span>Facebook</span>\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </footer>\n        </div>\n    )\n}\n\nexport default Footer\n","/Users/danny/Documents/Projects/boogalu/src/Components/Login/Login.js",["208","209","210","211","212","213","214","215","216","217","218"],"import React, { useState, useEffect } from 'react';\nimport { useHistory } from \"react-router-dom\";\nimport { useStoreConsumer } from '../../Providers/StateProvider';\nimport { GoogleLogin } from 'react-google-login';\nimport FacebookLogin from 'react-facebook-login';\nimport FacebookIcon from '@material-ui/icons/Facebook';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport FormControl from '@material-ui/core/FormControl';\nimport TextField from '@material-ui/core/TextField';\nimport Visibility from '@material-ui/icons/Visibility';\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\nimport ArrowRightSharpIcon from '@material-ui/icons/ArrowRightSharp';\nimport bgImg from '../../Images/bg1.svg';\nimport { loginUser, signupUser } from '../../Actions/User/index';\nimport { getUserByEmail, getUserByPhone } from \"../../Services/User.service\";\nimport VideoUploader from \"../VideoUploader\";\nimport * as $ from 'jquery';\n\nexport default function Login() {\n    const { state, dispatch } = useStoreConsumer();\n    const history = useHistory();\n    const [loginCred, setloginCred] = useState({ username: \"\", password: \"\", showPassWord: false })\n    const [LoginError, setLoginError] = useState(null);\n    const [thirdPartyResponse, setThirdPartyResponse] = useState({ isLogginSuccess: false, data: null, source: '' })\n    const [openVdoUploadModal, setOpenVdoUploadModal] = useState(false)\n\n    useEffect(() => {\n        if (thirdPartyResponse.source === 'Facebook') signinUser('', 'Facebook');\n        if (thirdPartyResponse.source === 'Google') signinUser('', 'Google');\n    }, [thirdPartyResponse]);\n\n    useEffect(() => {\n        $('html,body').animate({\n            scrollTop: 0\n        }, 500);\n    }, [])\n\n    const setLoginResponseToServer = () => {\n        // notify server that user is loggedin\n        console.log('Save loggin user to db')\n\n    }\n    const successResponseGoogle = function (response) {\n        console.log(response);\n        let loginResponse = {\n            data: {\n                name: response.profileObj.name,\n                email: response.profileObj.email,\n                token: response.googleId,\n                profileImage: response.profileObj.imageUrl,\n            },\n            source: 'Google'\n        }\n        setThirdPartyResponse(loginResponse);\n    }\n\n    const failureResponseGoogle = function (response) {\n        if (response.error != \"idpiframe_initialization_failed\") {\n            setLoginError('Sorry there was a problem with your google login request.')\n        }\n    }\n\n    const responseFacebook = (response) => {\n        console.log(response);\n        if (response && response.userID) {\n            let loginResponse = {\n                isLogginSuccess: true,\n                data: response,\n                source: 'Facebook'\n            }\n            setThirdPartyResponse(loginResponse);\n        } else {\n            setLoginError('Sorry there was a problem with your facebook login request.')\n            console.log(\"facebook login error\", response);\n        }\n    }\n\n    const handleMouseDownPassword = (event) => {\n        event.preventDefault();\n    };\n\n    const handleChange = (prop) => (event) => {\n        setLoginError(null);\n        setloginCred({ ...loginCred, [prop]: event.target.value });\n    };\n\n    const showPassword = () => {\n        setloginCred({ ...loginCred, showPassWord: (loginCred.showPassWord ? false : true) })\n    }\n\n    const checkForUserPhone = (phone) => {\n        return new Promise((res, rej) => {\n            getUserByPhone(phone).subscribe((data) => {\n                if (data && data.length) res(data);\n                else res(null);\n            })\n        })\n    }\n\n    const checkForUserEmail = (email) => {\n        return new Promise((res, rej) => {\n            getUserByEmail(email).subscribe((data) => {\n                if (data && data.length) res(data);\n                else res(null);\n            })\n        })\n    }\n\n    const getUserLoginData = (userData) => {\n        return new Promise((res, rej) => {\n            if (thirdPartyResponse.data && thirdPartyResponse.data.email) {\n                // with gmail or fb flow\n                getUserByEmail(userData.email).subscribe((isRegisteredUser) => {\n                    if (isRegisteredUser.length) {\n                        res(isRegisteredUser[0]);\n                    } else {\n                        setLoginError('Please enter correct credentials.')\n                        rej({ ...userData, isRegistered: false });\n                    }\n                })\n            } else {\n                // without gmail fb flow\n                checkForUserEmail(userData.emailOrPhone).then((isRegisteredUser) => {\n                    if (isRegisteredUser && isRegisteredUser.length) {\n                        if (isRegisteredUser[0].password === userData.password) res(isRegisteredUser[0]);\n                        else {\n                            setLoginError('Please enter correct credentials.')\n                            rej();\n                        }\n                    } else {\n                        checkForUserPhone(userData.emailOrPhone).then((isRegisteredUser) => {\n                            if (isRegisteredUser && isRegisteredUser.length) {\n                                if (isRegisteredUser[0].password === userData.password) res(isRegisteredUser[0]);\n                                else {\n                                    setLoginError('Please enter correct credentials.')\n                                    rej();\n                                }\n                            } else {\n                                setLoginError('Please enter correct credentials.')\n                                rej();\n                            }\n                        })\n                    }\n                })\n            }\n        })\n    }\n    const signinUser = (e, status) => {\n        setLoginError(null);\n        let userData = {};\n        switch (status) {\n            case 'cred':\n                setThirdPartyResponse({ isLogginSuccess: false, data: null, source: '' })\n                e.preventDefault();\n                e.stopPropagation();\n                userData = {\n                    ...loginCred,\n                    phone: loginCred.username,\n                    email: loginCred.username,\n                    emailOrPhone: loginCred.username\n                }\n                getUserLoginData(userData)\n                    .then((data) => {\n                        //user is registered\n                        setLoginResponseToServer();\n                        data.source = 'Website';\n                        dispatch(loginUser(data));\n                        if (state.currentLoginFlow == 'competition') history.push('/competitions');\n                        else if (state.currentLoginFlow == 'subscription') history.push('/subscription');\n                        else if (state.currentLoginFlow == 'upload-video') setOpenVdoUploadModal(true);\n                        else history.push('/')\n                    })\n                    .catch((data) => {\n                        if (data) {\n                            //user not registered\n                            history.push({\n                                pathname: '/register',\n                                state: data\n                            })\n                        }\n                    })\n                break;\n            case 'Google': case 'Facebook':\n                userData = {\n                    name: thirdPartyResponse.data.name,\n                    email: thirdPartyResponse.data.email,\n                }\n                getUserLoginData(userData)\n                    .then((data) => {\n                        //user is registered\n                        setLoginResponseToServer();\n                        data.source = thirdPartyResponse.source;\n                        dispatch(loginUser(data));\n                        if (state.currentLoginFlow == 'competition') history.push('/competitions');\n                        else if (state.currentLoginFlow == 'subscription') history.push('/subscription');\n                        else if (state.currentLoginFlow == 'upload-video') setOpenVdoUploadModal(true);\n                        else history.push('/')\n                    })\n                    .catch((data) => {\n                        if (data) {\n                            data.source = thirdPartyResponse.source;\n                            //user not registered\n                            history.push({\n                                pathname: '/register',\n                                state: data\n                            })\n                        }\n                    })\n                break;\n        }\n    }\n\n    return (\n        <div className=\"login-wrap clearfix\">\n            <form className=\"form-wrap clearfix\" onSubmit={(e) => signinUser(e, 'cred')}>\n                <div className=\"heading-outer\">\n                    <div className=\"heading1\">Welcome Back!</div>\n                    <div className=\"heading2\">Login to your existant account of Choreoculture.</div>\n                </div>\n                <div className=\"form-outer clearfix\">\n                    <div className=\"input-wrap\">\n                        <TextField className=\"input-field\"\n                            required\n                            id=\"outlined-required-username\"\n                            label=\"Username / Email / Phone\"\n                            onChange={handleChange('username')}\n                            value={loginCred.username}\n                            variant=\"outlined\"\n                        />\n                    </div>\n                    <div className=\"input-wrap\">\n                        <FormControl className=\"\" variant=\"outlined\" style={{ width: '100%' }}>\n                            <InputLabel htmlFor=\"outlined-adornment-password\">Password</InputLabel>\n                            <OutlinedInput\n                                required\n                                id=\"outlined-adornment-password\"\n                                type={loginCred.showPassWord ? 'text' : 'password'}\n                                value={loginCred.password}\n                                onChange={handleChange('password')}\n                                endAdornment={\n                                    <InputAdornment position=\"end\">\n                                        <IconButton\n                                            aria-label=\"toggle password visibility\"\n                                            onClick={showPassword}\n                                            onMouseDown={handleMouseDownPassword}\n                                            edge=\"end\"\n                                        >\n                                            {loginCred.showPassWord ? <Visibility /> : <VisibilityOff />}\n                                        </IconButton>\n                                    </InputAdornment>\n                                }\n                                labelWidth={70}\n                            />\n                        </FormControl>\n                    </div>\n                    <div className=\"action-wrap\">\n                        {LoginError && <div className=\"login-error\">\n                            {LoginError}\n                        </div>}\n                        <div className=\"submit-btn clearfix\">\n                            <Button variant=\"contained\" type=\"submit\" color=\"primary\">Sign In\n                            <ArrowRightSharpIcon />\n                            </Button>\n                        </div>\n                        <div className=\"forgot-password clearfix\">\n                            <div>Forgot Password ?</div>\n                        </div>\n                    </div>\n                    <div className=\"or-seprator clearfix\">\n                        <span></span>\n                        <div>OR</div>\n                        <span></span>\n                    </div>\n                    <div className=\"login-with\">\n                        <p className=\"loginWithTitle\">Login with</p>\n                        <div className=\"login-with-google\">\n                            <GoogleLogin\n                                className=\"google-login-btn\"\n                                clientId=\"417866547364-mesv7a9cn6bj4n3ge45s8b6hhl1vdam0.apps.googleusercontent.com\"\n                                buttonText=\"Login with Google\"\n                                onSuccess={successResponseGoogle}\n                                onFailure={failureResponseGoogle} >\n                            </GoogleLogin>\n                        </div>\n                        <div className=\"login-with-fb\">\n                            <div className=\"login-with-fb\">\n                                <FacebookLogin\n                                    appId=\"813330422546108\"\n                                    autoLoad={false}\n                                    fields=\"name,email,picture\"\n                                    callback={responseFacebook}\n                                    cssClass=\"facebook-login-btn\"\n                                    icon={<FacebookIcon />}\n                                />\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"already-login-wrap\">\n                        <div className=\"text-wrap\">New to Choreoculture?</div>\n                        <Button color=\"primary\" onClick={() => history.push('/register')}>SIGN UP</Button>\n                    </div>\n                </div>\n            </form>\n\n            <div className=\"img-wrap\">\n                <img src={bgImg} />\n            </div>\n            {openVdoUploadModal && <VideoUploader handleClose={() => setOpenVdoUploadModal(false)} />}\n        </div>\n    );\n}","/Users/danny/Documents/Projects/boogalu/src/Components/Navigation/index.js",["219","220","221"],"import React, { useState, useEffect, useRef } from 'react';\nimport { FaHome, FaBookReader, FaCloudUploadAlt, FaTrophy, FaStaylinked } from 'react-icons/fa';\nimport boogaluLogo from '../../Images/Boogalu-logo.svg';\nimport { useHistory } from \"react-router-dom\";\nimport { useStoreConsumer } from '../../Providers/StateProvider';\nimport { logoutUser } from '../../Actions/User';\nimport AccountCircleOutlinedIcon from '@material-ui/icons/AccountCircleOutlined';\nimport { enableLoginFlow } from \"../../Actions/LoginFlow\";\nimport { disableLoginFlow } from \"../../Actions/LoginFlow\";\nimport VideoUploader from \"../VideoUploader\";\nimport * as $ from 'jquery';\nconst SCROLL_TOP_LIMIT = 200;\n\nfunction Navigation() {\n    const [goingUpClass, setGoingUpClass] = useState('');\n    const [hideVdoUploadBtn, setHideVdoUploadBtn] = useState(false);\n    const [didMount, setDidMount] = useState(false);\n    const [isMobile, toggleMobile] = useState(false);\n    const [goingDownClass, setGoingDownClass] = useState('');\n    const [showProfileTab, setShowProfileTab] = useState(false);\n    const ref = useRef();\n    const mobilHomelinkRef = useRef();\n    const history = useHistory();\n    const { state, dispatch } = useStoreConsumer();\n    const [openVdoUploadModal, setOpenVdoUploadModal] = useState(false)\n    useOnClickOutside(ref, () => setShowProfileTab(false));\n\n    useEffect(() => {\n        setDidMount(true);\n        setHideVdoUploadBtn(false);\n        let windowViewPortWidth = window.innerWidth;\n        if (windowViewPortWidth > 1023) {\n            toggleMobile(false);\n        } else {\n            toggleMobile(true);\n        }\n\n        const handleScroll = () => {\n            const currentScrollY = window.scrollY;\n            if (currentScrollY < SCROLL_TOP_LIMIT) {\n                setGoingUpClass('');\n                setGoingDownClass('');\n            } else {\n                setGoingUpClass('scrolled-up');\n                setTimeout(() => {\n                    setGoingDownClass('scrolled-down');\n                }, 200);\n            }\n        };\n\n        const windowResize = () => {\n            windowViewPortWidth = window.innerWidth;\n            if (windowViewPortWidth > 1023) {\n                toggleMobile(false);\n            } else {\n                toggleMobile(true);\n            }\n        }\n\n\n        setTimeout(() => {\n            const pathName = history?.location?.pathname.split('/')[1];\n            const navLinks = document.querySelectorAll('.nav-ul a');\n            if (pathName.includes('register') || pathName.includes('login') || pathName.includes('upload-video') || pathName.includes('admin') || pathName.includes('admin')) {\n                setHideVdoUploadBtn(true);\n            }\n            if (navLinks && navLinks.length) {\n                navLinks.forEach((ele) => {\n                    const getHref = ele.getAttribute('href').toLocaleLowerCase();\n                    if (pathName?.length && getHref.includes(pathName)) {\n                        ele.classList.add('active');\n                    }\n                });\n            }\n        }, 1000);\n\n        window.addEventListener(\"resize\", windowResize, { passive: true });\n        window.addEventListener(\"scroll\", handleScroll, { passive: true });\n        return () => setDidMount(false);\n    }, [isMobile]);\n\n    useEffect(() => {\n        const listenRouteChange = history.listen((location, action) => {\n            const pathName = location?.pathname.split('/')[1];\n            if (pathName.includes('register') || pathName.includes('login') || pathName.includes('upload-video') || pathName.includes('admin') || pathName.includes('admin')) setHideVdoUploadBtn(true);\n            else setHideVdoUploadBtn(false);\n            if ((!pathName || pathName.includes('lessons') || (pathName.includes('subscription') && state.currentLoginFlow !== 'competition-subscription' && state.currentLoginFlow !== 'competition') || pathName.includes('contactus') || pathName.includes('home')) && state.currentLoginFlow) {\n                dispatch(disableLoginFlow());\n            }\n        });\n    })\n\n    const logout = () => {\n        console.log('logout success');\n        dispatch(logoutUser());\n        setShowProfileTab(false)\n        history.push(`/login`);\n    }\n\n    const onClickNav = (e, route) => {\n        e.preventDefault();\n        const navLinks = document.querySelectorAll('.nav-ul a');\n\n        setTimeout(() => {\n            const pathName = history?.location?.pathname.split('/')[1];\n            if (pathName.includes('register') || pathName.includes('login') || pathName.includes('upload-video') || pathName.includes('admin')) setHideVdoUploadBtn(true);\n            else setHideVdoUploadBtn(false);\n        });\n\n        if (navLinks && navLinks.length) {\n            navLinks.forEach((ele) => {\n                if (ele.classList.contains('active')) {\n                    ele.classList.remove('active');\n                }\n            });\n        }\n        if (route) {\n            history.push(`/${route}`);\n            e.target.classList.add('active');\n            setTimeout(() => {\n                let target = $(`.${route}`);\n                if (target && target.offset()) {\n                    $('html,body').animate({\n                        scrollTop: target.offset().top - 200\n                    }, 700);\n                }\n            }, 100);\n        } else {\n            history.push(`/`);\n            setTimeout(() => {\n                let target = $(`.homepage`);\n                if (target.length) {\n                    $('html,body').animate({\n                        scrollTop: target.offset().top - 200\n                    }, 700);\n                }\n            }, 100);\n        }\n    }\n    // Hook\n    function useOnClickOutside(ref, handler) {\n        useEffect(\n            () => {\n                const listener = event => {\n                    if (!ref.current || ref.current.contains(event.target)) {\n                        return;\n                    }\n\n                    handler(event);\n                };\n                document.addEventListener('mousedown', listener);\n                document.addEventListener('touchstart', listener);\n                return () => {\n                    document.removeEventListener('mousedown', listener);\n                    document.removeEventListener('touchstart', listener);\n                };\n            },\n            [ref, handler]\n        );\n    }\n\n    function navigateToUserRegistrationLogin(path) {\n        setHideVdoUploadBtn(true);\n        history.push(`/${path}`)\n    }\n\n    if (!didMount) {\n        return null;\n    }\n\n    const uploadVdo = (e) => {\n        setHideVdoUploadBtn(true);\n        e.preventDefault();\n        if (state.loggedInUser && state.loggedInUser.email && state.loggedInUser.phone) {\n            // history.push({\n            //     pathname: '/upload-video',\n            //     state: null\n            // })\n            setOpenVdoUploadModal(true);\n        } else {\n            dispatch(enableLoginFlow('upload-video'));\n            history.push({\n                pathname: '/login',\n                state: null\n            })\n        }\n    }\n\n    return (\n        <>\n            <nav className={`navigation-wrap ${goingUpClass} ${goingDownClass}`}>\n                <div className=\"flex-container desktop-navigation\">\n                    <h1 title=\"home\" >\n                        <a href=\"/\" onClick={(e) => onClickNav(e, '')}>\n                            <img src={boogaluLogo} alt=\"Boogalu\" />\n                        </a>\n                    </h1>\n                    {\n                        !isMobile ?\n                            <ul className=\"flex-1 nav-ul\">\n                                <li><a href=\"#Lessons\" onClick={(e) => onClickNav(e, 'lessons')}>Lessons</a></li>\n                                <li><a href=\"#Competitions\" onClick={(e) => onClickNav(e, 'competitions')}>Competitions</a></li>\n                                <li><a href=\"#Subscription\" onClick={(e) => onClickNav(e, 'subscription')}>Subscription</a></li>\n                            </ul> : ''\n                    }\n                    {(!state.loggedInUser || !state.loggedInUser.phone) && <div className=\"flex-2 signup-wrap\" >\n                        <button className=\"btn primary-light login\" onClick={() => navigateToUserRegistrationLogin('login')}>Login</button>\n                        <button className=\"btn primary-dark signup\" onClick={() => navigateToUserRegistrationLogin('register')}>Sign Up</button>\n                    </div>}\n\n                    {state.loggedInUser && state.loggedInUser.phone && <div className=\"flex-2 signup-wrap\" >\n                        <div className=\"profile\" ref={ref}>\n                            <AccountCircleOutlinedIcon onClick={() => setShowProfileTab(true)} style={{ fontSize: '35px', paddingRight: '20px' }} />\n                            {showProfileTab && <div className=\"profile-tab-wrap\">\n                                <div className=\"profile\" onClick={() => { history.push('/profile'); setShowProfileTab(false) }}>Profile</div>\n                                <div className=\"logout\" onClick={() => logout()}>Logout</div>\n                            </div>}\n                        </div>\n                        {/* <button className=\"signup\" onClick={() => logout()}>Logout</button> */}\n                    </div>}\n                </div>\n                {\n                    !hideVdoUploadBtn ?\n                        <a href=\"\" className=\"upload-btn\" onClick={(e) => uploadVdo(e)}>\n                            <i><FaCloudUploadAlt /></i>\n                        </a> : ''\n                }\n                {\n                    isMobile ?\n                        <div className=\"sticky-mobile-menu\">\n                            <ul className=\"flex-1 nav-ul\">\n                                <li>\n                                    <a href=\"/\" ref={mobilHomelinkRef} onClick={(e) => onClickNav(e, '')}>\n                                        <i>\n                                            <FaHome />\n                                        </i>\n                                        <span>Home</span>\n                                    </a>\n                                </li>\n                                <li>\n                                    <a href=\"#Lessons\" onClick={(e) => onClickNav(e, 'lessons')}>\n                                        <i><FaBookReader /></i>\n                                        <span>Lessons</span>\n                                    </a>\n                                </li>\n                                <li>\n                                    <a href=\"#upload\" onClick={(e) => onClickNav(e, 'competitions')}>\n                                        <i><FaTrophy /></i>\n                                        <span>Competition</span>\n                                    </a>\n                                </li>\n                                <li>\n                                    <a href=\"#Subscription\" onClick={(e) => onClickNav(e, 'subscription')}>\n                                        <i><FaStaylinked /></i>\n                                        <span>Subscription</span>\n                                    </a>\n                                </li>\n                            </ul>\n                        </div>\n                        : ''\n                }\n                {openVdoUploadModal && <VideoUploader />}\n            </nav>\n        </>\n    )\n}\nexport default Navigation","/Users/danny/Documents/Projects/boogalu/src/Components/Admin/Subscription.js",["222","223"],"import React, { useState } from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport ImageUploader from 'react-images-upload';\nimport Button from '@material-ui/core/Button';\nimport { uploadImage } from \"../../Services/Upload.service\";\nimport { saveSubscription } from \"../../Services/Subscription.service\";\n\nexport default function Subscription() {\n    const initialSubscriptionData = {\n        name: \"\",\n        desc: \"\",\n        active: true,\n        type: \"\",\n        amount: \"\",\n        img: \"\",\n        startAt: \"\",\n        endAt: \"\",\n        plans: \"\",\n    }\n    const [Subscription, setSubscription] = useState(initialSubscriptionData);\n\n    const handleChange = (prop, index) => (event) => {\n        let value = event.target.value;\n        if (prop === 'active') value = event.target.checked;\n        if (prop === 'prices') {\n            Subscription.prices[index] = event.target.value;\n            value = Subscription.prices;\n        }\n        setSubscription({ ...Subscription, [prop]: value });\n    };\n\n    const onimageUpload = (picture) => {\n        setSubscription({ ...Subscription, img: picture });\n    }\n\n    async function saveDetails(e) {\n        console.log(Subscription)\n        // upload Subscription image to bucket\n        if (Subscription.img[0]) {\n            const reader = new FileReader();\n            reader.readAsDataURL(Subscription.img[0]);\n            reader.onload = () => {\n                uploadImage(reader.result, 'subscription', 'small').subscribe((downloadableUrl) => {\n                    Subscription.img = downloadableUrl;\n                    // save Subscription data to db with imag url\n                    saveSubscription(Subscription).subscribe((response) => {\n                        console.log('Subscription success', response);\n                        setSubscription(initialSubscriptionData);\n                    })\n                })\n            }\n        } else {\n            saveSubscription(Subscription).subscribe((response) => {\n                console.log('Subscription success', response);\n                setSubscription(initialSubscriptionData);\n            })\n        }\n    }\n    return (\n        <div className=\"subscription-bo-wrap clearfix\">\n            <h1>Create a new Subscription</h1>\n            <div className=\"inner-form-wrap\">\n                <div className=\"input-wrap\">\n                    <TextField className=\"input-field\"\n                        required\n                        id=\"outlined-required-name\"\n                        label=\"Name\"\n                        onChange={handleChange('name')}\n                        value={Subscription.name}\n                        variant=\"outlined\"\n                    />\n                </div>\n                <div className=\"input-wrap\">\n                    <TextField className=\"input-field\"\n                        id=\"outlined-required-desc\"\n                        label=\"Description\"\n                        onChange={handleChange('desc')}\n                        value={Subscription.desc}\n                        variant=\"outlined\"\n                    />\n                </div>\n                <div className=\"input-wrap\">\n                    <TextField className=\"input-field\"\n                        id=\"outlined-required-amount\"\n                        label=\"Amount\"\n                        type=\"number\"\n                        onChange={handleChange('amount')}\n                        value={Subscription.amount}\n                        variant=\"outlined\"\n                    />\n                </div>\n                <div className=\"input-wrap\">\n                    <FormControl variant=\"outlined\" className=\"input-field\">\n                        <InputLabel id=\"select-outlined-label\">Plans</InputLabel>\n                        <Select\n                            labelId=\"select-outlined-label\"\n                            id=\"select-outlined\"\n                            value={Subscription.plans}\n                            onChange={handleChange('plans')}\n                        >\n                            <MenuItem value=\"monthly\">Monthly</MenuItem>\n                            <MenuItem value=\"annual\">Annual</MenuItem>\n                        </Select>\n                    </FormControl>\n                </div>\n                <div className=\"input-wrap data-time-wrap\">\n                    <TextField\n                        id=\"datetime-local-start\"\n                        label=\"Start Date & Time\"\n                        type=\"datetime-local\"\n                        value={Subscription.startAt}\n                        onChange={handleChange('startAt')}\n                        InputLabelProps={{\n                            shrink: true,\n                        }}\n                    />\n                    <TextField\n                        id=\"datetime-local-end\"\n                        label=\"End Date & Time\"\n                        type=\"datetime-local\"\n                        value={Subscription.endAt}\n                        onChange={handleChange('endAt')}\n                        InputLabelProps={{\n                            shrink: true,\n                        }}\n                    />\n                </div>\n                {/* <div className=\"input-wrap\">\n                    <ImageUploader\n                        withIcon={true}\n                        buttonText='Upload image'\n                        onChange={onimageUpload}\n                        imgExtension={['.jpg', '.gif', '.png', '.gif', '.svg']}\n                        maxFileSize={5242880}\n                        accept=\"image/*\"\n                        withPreview={true}\n                        singleImage={true}\n                        label=\"Select subscription image\"\n                    />\n                </div> */}\n                <div className=\"input-wrap action-wrap\">\n                    <Button variant=\"contained\" color=\"primary\">Cancel</Button>\n                    <Button variant=\"contained\" color=\"secondary\" onClick={(e) => saveDetails(e)}>Save</Button>\n                    <FormControlLabel\n                        control={\n                            <Checkbox\n                                required\n                                color=\"primary\"\n                                className=\"selected-item-checkbox\"\n                                checked={Subscription.active}\n                                onChange={handleChange('active')}\n                                inputProps={{ 'aria-label': 'secondary checkbox' }}\n                            />\n                        }\n                        label=\"Active Subscription\"\n                    />\n                </div>\n            </div>\n        </div>\n    )\n}\n","/Users/danny/Documents/Projects/boogalu/src/Components/Profile/Profile.js",["224","225","226","227","228"],"import React, { useState, useEffect, useRef } from 'react'\nimport { useHistory } from \"react-router-dom\";\nimport { useStoreConsumer } from '../../Providers/StateProvider';\nimport AccountCircleOutlinedIcon from '@material-ui/icons/AccountCircleOutlined';\nimport LoyaltyOutlinedIcon from '@material-ui/icons/LoyaltyOutlined';\nimport FavoriteBorderOutlinedIcon from '@material-ui/icons/FavoriteBorderOutlined';\nimport CollectionsOutlinedIcon from '@material-ui/icons/CollectionsOutlined';\nimport PropTypes from 'prop-types';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport SwipeableViews from 'react-swipeable-views';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport * as $ from 'jquery';\nimport { getUploadedVideosByUserId } from \"../../Services/UploadedVideo.service\";\nimport { getCompetitionByUserId } from \"../../Services/EnrollCompetition.service\";\nimport CompetitionsDetails from \"../CompetitionsDetails\";\nimport { getCompetitionsList } from \"../../Services/Competition.service\";\nimport { setActiveCompetition } from \"../../Actions/Competition\";\nimport Vedio from \"../Vedio/Video\";\n\nfunction TabPanel(props) {\n    const { children, value, index, ...other } = props;\n\n    return (\n        <div\n            role=\"tabpanel\"\n            hidden={value !== index}\n            id={`full-width-tabpanel-${index}`}\n            aria-labelledby={`full-width-tab-${index}`}\n            {...other}\n        >\n            {value === index && (\n                <Box p={3}>\n                    <Typography>{children}</Typography>\n                </Box>\n            )}\n        </div>\n    );\n}\n\nTabPanel.propTypes = {\n    children: PropTypes.node,\n    index: PropTypes.any.isRequired,\n    value: PropTypes.any.isRequired,\n};\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        backgroundColor: theme.palette.background.paper,\n        width: 500,\n    },\n}));\n\nfunction a11yProps(index) {\n    return {\n        id: `full-width-tab-${index}`,\n        'aria-controls': `full-width-tabpanel-${index}`,\n    };\n}\nfunction Profile() {\n    const classes = useStyles();\n    const history = useHistory();\n    const theme = useTheme();\n    const { state, dispatch } = useStoreConsumer();\n    const [value, setValue] = useState(0);\n    const loggedInUser = state.loggedInUser;\n    const [UserUploadedVideoList, setUserUploadedVideoList] = useState([]);\n    const [UserCompetitionsList, setUserCompetitionsList] = useState([]);\n    const [UserLikedVideoList, setUserLikedVideoList] = useState([]);\n    const [openUserEnrolledCompDetailsModal, setOpenUserEnrolledCompDetailsModal] = useState(false);\n    const [initialStep, setInitialStep] = useState(1);\n    const profileOuterRef = useRef();\n    const userTabsRef = useRef();\n\n    useEffect(() => {\n        $('html,body').animate({\n            scrollTop: 0\n        }, 500);\n\n        document.addEventListener('scroll', onWindowScroll);\n\n        getUploadedVideosByUserId(loggedInUser.key).subscribe((list) => setUserUploadedVideoList(list));\n        getCompetitionByUserId(loggedInUser.key).subscribe((list) => setUserCompetitionsList(list));\n        // getCompetitionByUserId(loggedInUser.key).subscribe((list) => UserLikedVideoList(list));\n    }, []);\n\n    function onWindowScroll(event) {\n        if (window.outerWidth > 1023) {\n            if (window.scrollY >= 302) {\n                toggleStickyHeader('add');\n            } else {\n                toggleStickyHeader('remove');\n            }\n        } else {\n            if (window.scrollY >= 294) {\n                toggleStickyHeader('add');\n            } else {\n                toggleStickyHeader('remove');\n            }\n        }\n    }\n\n    function toggleStickyHeader(toggleValue) {\n        if (toggleValue === 'add') {\n            if (userTabsRef.current) {\n                userTabsRef.current.classList.add('sticky');\n            }\n            if (profileOuterRef.current) {\n                profileOuterRef.current.classList.add('sticky');\n            }\n        } else {\n            if (userTabsRef.current) {\n                userTabsRef.current.classList.remove('sticky');\n            }\n            if (profileOuterRef.current) {\n                profileOuterRef.current.classList.remove('sticky');\n            }\n        }\n    }\n\n    const handleChange = (event, newValue) => {\n        setValue(newValue);\n    };\n\n    const handleChangeIndex = (index) => {\n        setValue(index);\n    };\n\n    const openCompetitionDetailsModal = (competition) => {\n        getCompetitionsList().subscribe(allCompList => {\n            let isUserEnrolled = allCompList.filter((data) => data.key == competition.compId);\n            if (isUserEnrolled.length) {\n                isUserEnrolled[0].isUserEnrolled = true;\n                isUserEnrolled[0].userSubmitedDetails = competition;\n                setInitialStep(2);\n                dispatch(setActiveCompetition(isUserEnrolled[0]));\n                setOpenUserEnrolledCompDetailsModal(true);\n            }\n        });\n    }\n\n    return (\n        <div className=\"profile-outer\"  ref={profileOuterRef}>\n            <div className=\"profile-details-wrap clearfix\">\n                <div className=\"profile-img\">\n                    <AccountCircleOutlinedIcon />\n                </div>\n                <div className=\"profile-details clearfix\">\n                    <div className=\"username-wrap clearfix\">\n                        <div className=\"username\">\n                            {loggedInUser.username}\n                        </div>\n                        <div className=\"edit-profile\" onClick={() => history.push('/profile/edit')}>\n                            Edit Profile\n                        </div>\n                    </div>\n                    <div className=\"followers-wrap clearfix\">\n                        <div className=\"posts\">\n                            <span>999</span> Posts\n                        </div>\n                        <div className=\"followers\">\n                            <span>999</span> Followers\n                        </div>\n                        <div className=\"following\">\n                            <span>999</span> Followings\n                        </div>\n                    </div>\n                    <div className=\"bio-wrap\">\n                        <div className=\"fullname\">\n                            {loggedInUser.name}\n                        </div>\n                        {loggedInUser.bio ? <div className=\"bio\">\n                            {loggedInUser.bio}\n                        </div> : <div className=\"bio\">\n                                Older dancers (especially from the SoCal dance community) – even if you can appreciate and welcome the ways dance has evolved, you’ll still feel pangs of nostalgia when going through this list.\n                        </div>}\n                    </div>\n                </div>\n            </div>\n            <div className=\"profile-content-wrap\">\n                <div className=\"headers-wrap\">\n                    <div className=\"user-tabs-wrap\" ref={userTabsRef}>\n                        <Tabs\n                            value={value}\n                            onChange={handleChange}\n                            indicatorColor=\"primary\"\n                            textColor=\"primary\"\n                            variant=\"fullWidth\"\n                            aria-label=\"full width tabs example\"\n                        >\n                            <Tab label=\"Posts\" icon={<CollectionsOutlinedIcon />} {...a11yProps(0)} />\n                            <Tab label=\"Liked\" icon={<FavoriteBorderOutlinedIcon />}{...a11yProps(1)} />\n                            <Tab label=\"Competitions\" icon={<LoyaltyOutlinedIcon />} {...a11yProps(2)} />\n                        </Tabs>\n                    </div>\n                    <SwipeableViews\n                        axis={theme.direction === 'rtl' ? 'x-reverse' : 'x'}\n                        index={value}\n                        onChangeIndex={handleChangeIndex}>\n                        <TabPanel value={value} index={0} dir={theme.direction}>\n                            <div className=\"flex-container\" >\n                                {UserUploadedVideoList.length !== 0 ? UserUploadedVideoList.map((vdoObj) => {\n                                    return <div className=\"flex-basis-3\" style={{ marginRight: '30px' }} key={vdoObj.key}>\n                                        <Vedio vdoObj={vdoObj} />\n                                    </div>\n                                }) :\n                                    <div>No video posted yet !</div>}\n                            </div>\n                        </TabPanel>\n                        <TabPanel value={value} index={1} dir={theme.direction}>\n                            <div className=\"flex-container\" >\n                                {UserLikedVideoList.length !== 0 ? UserLikedVideoList.map((vdoObj) => {\n                                    return <div className=\"flex-basis-3\" style={{ marginRight: '30px' }} key={vdoObj.key}>\n                                        <Vedio vdoObj={vdoObj} />\n                                    </div>\n                                }) :\n                                    <div>No video liked yet !</div>}\n                            </div>\n                        </TabPanel>\n                        <TabPanel value={value} index={2} dir={theme.direction}>\n                            <div className=\"flex-container\" >\n                                {UserCompetitionsList.length !== 0 ? UserCompetitionsList.map((competition) => {\n                                    return <div className=\"flex-basis-3\" style={{ marginRight: '30px' }} key={competition.key} onClick={() => openCompetitionDetailsModal(competition)}>\n                                        <div>{competition.compName}</div>\n                                        <img src={competition.compImg} />\n                                    </div>\n                                }) :\n                                    <div>No competition enrolled yet !</div>}\n                            </div>\n                        </TabPanel>\n                    </SwipeableViews>\n                </div>\n            </div>\n            {openUserEnrolledCompDetailsModal && <CompetitionsDetails open={openUserEnrolledCompDetailsModal} handleClose={() => setOpenUserEnrolledCompDetailsModal(false)} initialStep={initialStep} />}\n        </div>\n    )\n}\n\nexport default Profile\n","/Users/danny/Documents/Projects/boogalu/src/Components/Admin/Competition.js",["229"],"import React, { useState } from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport ImageUploader from 'react-images-upload';\nimport Button from '@material-ui/core/Button';\nimport { saveCompetition } from \"../../Services/Competition.service\";\nimport { uploadImage } from \"../../Services/Upload.service\";\nimport { toBase64 } from \"../../Services/Utils\";\n\nexport default function Competition() {\n    const initialCompetitionData = {\n        name: \"\",\n        type: \"\",\n        desc: \"\",\n        active: true,\n        fee: \"\",\n        img: \"\",\n        startAt: \"\",\n        endAt: \"\",\n        prices: [],\n    }\n    const [CompetitionData, setCompetitionData] = useState(initialCompetitionData);\n\n    const handleChange = (prop, index) => (event) => {\n        let value = event.target.value;\n        if (prop === 'active') value = event.target.checked;\n        if (prop === 'prices') {\n            CompetitionData.prices[index] = event.target.value;\n            value = CompetitionData.prices;\n        }\n        setCompetitionData({ ...CompetitionData, [prop]: value });\n    };\n\n    const onimageUpload = (picture) => {\n        setCompetitionData({ ...CompetitionData, img: picture });\n    }\n\n    async function saveDetails(e) {\n        console.log(CompetitionData)\n        // upload competition image to bucket\n        if (CompetitionData.img[0]) {\n            const reader = new FileReader();\n            reader.readAsDataURL(CompetitionData.img[0]);\n            reader.onload = () => {\n                uploadImage(reader.result, 'competition', 'small').subscribe((downloadableUrl) => {\n                    CompetitionData.img = downloadableUrl;\n                    // save competition data to db with imag url\n                    saveCompetition(CompetitionData).subscribe((response) => {\n                        console.log('competition success', response);\n                        setCompetitionData(initialCompetitionData);\n                    })\n                })\n            }\n        }\n    }\n    return (\n        <div className=\"competition-bo-wrap clearfix\">\n            <h1>Launch a new competition</h1>\n            <div className=\"inner-form-wrap\">\n                <div className=\"input-wrap\">\n                    <TextField className=\"input-field\"\n                        required\n                        id=\"outlined-required-name\"\n                        label=\"Name\"\n                        onChange={handleChange('name')}\n                        value={CompetitionData.name}\n                        variant=\"outlined\"\n                    />\n                </div>\n                <div className=\"input-wrap\">\n                    <TextField className=\"input-field\"\n                        id=\"outlined-required-desc\"\n                        label=\"Description\"\n                        onChange={handleChange('desc')}\n                        value={CompetitionData.desc}\n                        variant=\"outlined\"\n                    />\n                </div>\n                <div className=\"input-wrap\">\n                    <TextField className=\"input-field\"\n                        id=\"outlined-required-fee\"\n                        label=\"Fee\"\n                        type=\"number\"\n                        onChange={handleChange('fee')}\n                        value={CompetitionData.fee}\n                        variant=\"outlined\"\n                    />\n                </div>\n                <div className=\"input-wrap\">\n                    <FormControl variant=\"outlined\" className=\"input-field\">\n                        <InputLabel id=\"select-outlined-label\">Type</InputLabel>\n                        <Select\n                            labelId=\"select-outlined-label\"\n                            id=\"select-outlined\"\n                            value={CompetitionData.type}\n                            onChange={handleChange('type')}\n                            label=\"Type\"\n                        >\n                            <MenuItem value=\"running\">Currently Running</MenuItem>\n                            <MenuItem value=\"upcomming\">Up-Comming</MenuItem>\n                        </Select>\n                    </FormControl>\n                </div>\n                <div className=\"input-wrap data-time-wrap\">\n                    <TextField\n                        id=\"datetime-local-start\"\n                        label=\"Start Date & Time\"\n                        type=\"datetime-local\"\n                        value={CompetitionData.startAt}\n                        onChange={handleChange('startAt')}\n                        InputLabelProps={{\n                            shrink: true,\n                        }}\n                    />\n                     <TextField\n                        id=\"datetime-local-end\"\n                        label=\"End Date & Time\"\n                        type=\"datetime-local\"\n                        value={CompetitionData.endAt}\n                        onChange={handleChange('endAt')}\n                        InputLabelProps={{\n                            shrink: true,\n                        }}\n                    />\n                </div>\n                <div className=\"input-wrap\">\n                    <TextField className=\"input-field\"\n                        required\n                        id=\"outlined-required-name\"\n                        label=\"First Price\"\n                        onChange={handleChange('prices', 0)}\n                        value={CompetitionData.prices[0]}\n                        variant=\"outlined\"\n                    />\n                </div>\n                <div className=\"input-wrap\">\n                    <TextField className=\"input-field\"\n                        required\n                        id=\"outlined-required-name\"\n                        label=\"Second Price\"\n                        onChange={handleChange('prices', 1)}\n                        value={CompetitionData.prices[1]}\n                        variant=\"outlined\"\n                    />\n                </div>\n                <div className=\"input-wrap\">\n                    <TextField className=\"input-field\"\n                        required\n                        id=\"outlined-required-name\"\n                        label=\"Third Price\"\n                        onChange={handleChange('prices', 2)}\n                        value={CompetitionData.prices[2]}\n                        variant=\"outlined\"\n                    />\n                </div>\n                <div className=\"input-wrap\">\n                    <ImageUploader\n                        withIcon={true}\n                        buttonText='Upload image'\n                        onChange={onimageUpload}\n                        imgExtension={['.jpg', '.gif', '.png', '.gif', '.svg']}\n                        maxFileSize={5242880}\n                        accept=\"image/*\"\n                        withPreview={true}\n                        singleImage={true}\n                        label=\"Select competition image\"\n                    />\n                </div>\n                <div className=\"input-wrap action-wrap\">\n                    <Button variant=\"contained\" color=\"primary\">Cancel</Button>\n                    <Button variant=\"contained\" color=\"secondary\" onClick={(e) => saveDetails(e)}>Save</Button>\n                    <FormControlLabel\n                        control={\n                            <Checkbox\n                                required\n                                color=\"primary\"\n                                className=\"selected-item-checkbox\"\n                                checked={CompetitionData.active}\n                                onChange={handleChange('active')}\n                                inputProps={{ 'aria-label': 'secondary checkbox' }}\n                            />\n                        }\n                        label=\"Active Competition\"\n                    />\n                </div>\n            </div>\n        </div>\n    )\n}\n","/Users/danny/Documents/Projects/boogalu/src/Components/EditProfile/EditProfile.js",["230","231","232"],"import React, { useState, useEffect } from 'react';\nimport { useHistory } from \"react-router-dom\";\nimport { useStoreConsumer } from '../../Providers/StateProvider';\nimport { signupUser } from '../../Actions/User';\nimport bgImg from '../../Images/bg1.svg';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport FormControl from '@material-ui/core/FormControl';\nimport TextField from '@material-ui/core/TextField';\nimport Visibility from '@material-ui/icons/Visibility';\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport ArrowRightSharpIcon from '@material-ui/icons/ArrowRightSharp';\nimport * as $ from 'jquery';\nimport { updateUser } from \"../../Services/User.service\";\n\nexport default function EditProfile() {\n    const { state, dispatch } = useStoreConsumer();\n    const history = useHistory();\n    let loggedInUser = state.loggedInUser;\n    // get data from history props if redirected through google or facebook login\n    if (history.location.state && (history.location.state.source == 'Facebook' || history.location.state.source == 'Google')) {\n        loggedInUser.email = history.location.state.email;\n        loggedInUser.name = history.location.state.name;\n        // setNeedToRegisterError('You are not registered yet, Please register with Choreoculture.')\n    }\n    const [userDetails, setUserDetails] = useState(loggedInUser);\n    const [SignUpError, setSignUpError] = useState(null);\n    const [showHidePassword, setShowHidePassword] = useState({ showPassword: false, showConfirmPassword: false });\n\n    const handleChange = (prop) => (event) => {\n        setUserDetails({ ...userDetails, [prop]: event.target.value });\n        console.log(userDetails)\n    };\n\n    const handleClickShowPassword = (prop) => {\n        setShowHidePassword({ ...showHidePassword, [prop]: !showHidePassword[prop] });\n    };\n\n    const handleMouseDownPassword = (event) => {\n        event.preventDefault();\n    };\n\n    useEffect(() => {\n        $('html,body').animate({\n            scrollTop: 0\n        }, 500);\n    }, [])\n\n    const setSignupUserCred = (e) => {\n        if (userDetails.password != userDetails.confirmPassword) {\n            setSignUpError('Password dose not match.');\n            return;\n        }\n\n        updateUser(userDetails.key, userDetails).subscribe(() => {\n            dispatch(signupUser(userDetails));\n            history.push(({\n                pathname: '/profile',\n                state: null\n            }));\n        })\n        e.preventDefault();\n    }\n\n    return (\n        <div className=\"logout-wrap clearfix\">\n            <form className=\"form-wrap clearfix\" onSubmit={setSignupUserCred}>\n                <div className=\"heading-outer\">\n                    <div className=\"heading1\">Update Profile</div>\n                </div>\n                <div className=\"form-outer clearfix\">\n                    <div className=\"input-wrap\">\n                        <TextField className=\"input-field\"\n                            required\n                            id=\"outlined-required-Name\"\n                            label=\"Name\"\n                            onChange={handleChange('name')}\n                            value={userDetails.name}\n                            variant=\"outlined\"\n                        />\n                    </div>\n                    <div className=\"input-wrap\">\n                        <TextField className=\"input-field\"\n                            required\n                            id=\"outlined-required-Username\"\n                            label=\"Username\"\n                            onChange={handleChange('username')}\n                            value={userDetails.username}\n                            variant=\"outlined\"\n                        />\n                    </div>\n                    <div className=\"input-wrap\">\n                        <TextField className=\"input-field\"\n                            required\n                            type=\"tel\"\n                            id=\"outlined-required-phone\"\n                            label=\"Phone\"\n                            onChange={handleChange('phone')}\n                            value={userDetails.phone}\n                            variant=\"outlined\"\n                            InputProps={{ readOnly: true }}\n                        />\n                    </div>\n                    <div className=\"input-wrap\">\n                        <TextField className=\"input-field\"\n                            required\n                            id=\"outlined-required-email\"\n                            label=\"Email\"\n                            type=\"email\"\n                            onChange={handleChange('email')}\n                            value={userDetails.email}\n                            variant=\"outlined\"\n                            InputProps={{ readOnly: true }}\n                        />\n                    </div>\n                    <div className=\"input-wrap\">\n                        <TextField className=\"input-field\"\n                            required\n                            id=\"outlined-required-country\"\n                            label=\"Country\"\n                            onChange={handleChange('country')}\n                            value={userDetails.country}\n                            variant=\"outlined\"\n                        />\n                    </div>\n                    <div className=\"input-wrap\">\n                        <TextField className=\"input-field\"\n                            required\n                            id=\"outlined-required-state\"\n                            label=\"State\"\n                            onChange={handleChange('state')}\n                            value={userDetails.state}\n                            variant=\"outlined\"\n                        />\n                    </div>\n                    <div className=\"input-wrap\">\n                        <FormControl className=\"\" variant=\"outlined\" style={{ width: '100%' }}>\n                            <InputLabel htmlFor=\"outlined-adornment-password\">Password</InputLabel>\n                            <OutlinedInput\n                                required\n                                id=\"outlined-adornment-password\"\n                                type={showHidePassword.showPassword ? 'text' : 'password'}\n                                value={userDetails.password}\n                                onChange={handleChange('password')}\n                                endAdornment={\n                                    <InputAdornment position=\"end\">\n                                        <IconButton\n                                            aria-label=\"toggle password visibility\"\n                                            onClick={() => handleClickShowPassword('showPassword')}\n                                            onMouseDown={handleMouseDownPassword}\n                                            edge=\"end\"\n                                        >\n                                            {showHidePassword.showPassword ? <Visibility /> : <VisibilityOff />}\n                                        </IconButton>\n                                    </InputAdornment>\n                                }\n                                labelWidth={70}\n                            />\n                        </FormControl>\n                    </div>\n                    <div className=\"input-wrap\">\n                        <FormControl className=\"\" variant=\"outlined\" style={{ width: '100%' }}>\n                            <InputLabel htmlFor=\"outlined-adornment-confirm-password\">Confirm Password</InputLabel>\n                            <OutlinedInput\n                                required\n                                id=\"outlined-adornment-confirm-password\"\n                                type={showHidePassword.showConfirmPassword ? 'text' : 'password'}\n                                value={userDetails.confirmPassword}\n                                onChange={handleChange('confirmPassword')}\n                                endAdornment={\n                                    <InputAdornment position=\"end\">\n                                        <IconButton\n                                            aria-label=\"toggle confirm password visibility\"\n                                            onClick={() => handleClickShowPassword('showConfirmPassword')}\n                                            onMouseDown={handleMouseDownPassword}\n                                            edge=\"end\"\n                                        >\n                                            {showHidePassword.showConfirmPassword ? <Visibility /> : <VisibilityOff />}\n                                        </IconButton>\n                                    </InputAdornment>\n                                }\n                                labelWidth={70}\n                            />\n                        </FormControl>\n                    </div>\n                    <div className=\"input-wrap\">\n                        <div className=\"dob-wrap\">\n                            <TextField className=\"input-field\"\n                                id=\"date\"\n                                label=\"Birthday\"\n                                type=\"date\"\n                                style={{ width: '100%' }}\n                                onChange={handleChange('dob')}\n                                value={userDetails.dob}\n                                InputLabelProps={{\n                                    shrink: true,\n                                }}\n                            />\n                        </div>\n                    </div>\n                    <div className=\"input-wrap\">\n                        <FormControl variant=\"outlined\" className=\"input-field\">\n                            <InputLabel id=\"select-outlined-label\">Gender</InputLabel>\n                            <Select\n                                labelId=\"select-outlined-label\"\n                                id=\"select-outlined\"\n                                value={userDetails.gender}\n                                onChange={handleChange('gender')}\n                                label=\"Gender\"\n                            >\n                                <MenuItem value=\"Male\">Male</MenuItem>\n                                <MenuItem value=\"Female\">Female</MenuItem>\n                                <MenuItem value=\"Other\">Other</MenuItem>\n                            </Select>\n                        </FormControl>\n                    </div>\n                    <div className=\"input-wrap\" style={{ width: '93%' }}>\n                        <TextField className=\"input-field bio-input\"\n                            id=\"outlined-required-bio\"\n                            label=\"Bio\"\n                            value={userDetails.bio}\n                            onChange={handleChange('bio')}\n                            variant=\"outlined\"\n                        />\n                    </div>\n                    <div className=\"tnc-wrap\">\n                        <div className=\"tnc-content clearfix\">\n                            <div className=\"checkbox-wrap\">\n                                <Checkbox\n                                    required\n                                    color=\"primary\"\n                                    checked={userDetails.tnc}\n                                    onChange={(e) => setUserDetails({ ...userDetails, tnc: e.target.checked })}\n                                    inputProps={{ 'aria-label': 'secondary checkbox' }}\n                                />\n                            </div>\n                            <div className=\"note-wrap\">Yes, I agree to the terms and conditions </div>\n                        </div>\n                    </div>\n                    {SignUpError && <div className=\"login-error\">\n                        {SignUpError}\n                    </div>}\n                    <div className=\"submit-btn clearfix\">\n                        <Button variant=\"contained\" type=\"submit\" color=\"primary\" >Update\n                         <ArrowRightSharpIcon />\n                        </Button>\n                    </div>\n                </div>\n            </form>\n            <div className=\"img-wrap\">\n                <img src={bgImg} alt=\"bg1\" />\n            </div>\n        </div>\n    );\n}","/Users/danny/Documents/Projects/boogalu/src/Reducers/index.js",[],"/Users/danny/Documents/Projects/boogalu/src/Components/Competitions/index.js",["233","234","235","236"],"/Users/danny/Documents/Projects/boogalu/src/Components/Upcoming/index.js",["237","238","239"],"import React, { useState, useRef, useEffect } from 'react'\nimport LessonsCategories from '../../Data/LessonsCategory';\nimport Video from \"../Vedio/Video\";\n\nfunction Upcoming () {\n    const [activeCategory, setActiveCategory] = useState(LessonsCategories[0]);\n    return (\n        <div className=\"lessons lessons-wrap\" id=\"upcomingLessons\">\n            <div className=\"inner-page\">\n                <h1>Learn from the Experts</h1>\n                <p>\n                    Lessons for all users from our expert faculty members.\n                    From Hip-Hop to Bharatnatyam. You'll get all learning videos\n                    at one place.\n                </p>\n                <p className=\"launching-soon\">Videos launching soon! Stay connected!</p>\n                <p className=\"from-our-expert-title\">Few sample lessons</p>\n                <div className=\"lessons-vdo-wrap\">\n                    {activeCategory.upcoming.map((item, index) => {\n                        return <Video key={'upcoming-'+index} vdoObj={item}></Video>\n                    })}\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Upcoming;\n","/Users/danny/Documents/Projects/boogalu/src/Components/Splash/index.js",[],"/Users/danny/Documents/Projects/boogalu/src/Components/Subscriptions/index.js",["240","241","242","243","244","245"],"import React, { useState, useEffect } from 'react'\nimport { useHistory } from \"react-router-dom\";\nimport { useStoreConsumer } from '../../Providers/StateProvider';\nimport { getActiveSubscriptionsList } from \"../../Services/Subscription.service\";\nimport { setActiveSubscription } from \"../../Actions/Subscription\";\nimport BuySubscription from \"../BuySubscription\";\nimport { enableLoginFlow, disableLoginFlow } from \"../../Actions/LoginFlow\";\nimport { saveUserSubscription } from \"../../Services/User.service\";\nimport { loginUser } from \"../../Actions/User\";\nimport { SUBSCRIPTION_ACTIVE_STATUS, SUBSCRIPTION_ENDED_STATUS } from \"../../Constants\";\n\nfunction Subscriptions() {\n    const { state, dispatch } = useStoreConsumer();\n    const history = useHistory();\n    const loggedInUser = state.loggedInUser;\n    const [AvailableSubscriptions, setAvailableSubscriptions] = useState([]);\n    const [showSubscriptionDetails, setShowSubscriptionDetails] = useState(false);\n    const [activeStep, setActiveStep] = useState(1);\n    const [alreadySubscribed, setAlreadySubscribed] = useState(false)\n\n    // check for payment status if user is in payment flow\n    useEffect(() => {\n        if (history.location.search && history.location.search.includes('status')) {\n            getActiveSubscriptionsList().subscribe((subscriptionsList) => {\n                setAvailableSubscriptions(subscriptionsList);\n                console.log(subscriptionsList);\n            })\n            let paymentStatus = history.location.search.split('status=')[1];\n            if (paymentStatus == 'success') {\n                const subscriptionSuccessObj = {\n                    subId: state.activeSubscription.key,\n                    type: state.activeSubscription.type,\n                    status: SUBSCRIPTION_ACTIVE_STATUS, // current subscription status Active or Ended\n                    subscribedAt: new Date()\n                }\n                let loggedInUserData = { ...loggedInUser };\n                if (loggedInUserData.subscriptions) loggedInUserData.subscriptions.push(subscriptionSuccessObj)\n                else (loggedInUserData.subscriptions = [subscriptionSuccessObj]);\n\n                saveUserSubscription(state.activeSubscription.key, loggedInUserData).subscribe((response) => {\n                    dispatch(loginUser(loggedInUserData));\n                    setShowSubscriptionDetails(true);\n                    setActiveStep(2);\n                });\n            } else {\n                // payment failure\n                setShowSubscriptionDetails(true);\n                setActiveStep(3)\n            }\n            history.push('/subscription');\n        } else {\n            getActiveSubscriptionsList().subscribe((subscriptionsList) => {\n                setAvailableSubscriptions(subscriptionsList);\n                console.log(subscriptionsList);\n                //if user come from competition details \n                if (state.currentLoginFlow == 'competition-subscription') {\n                    let subscriptionForCompetition = subscriptionsList.filter((data) => data.type === 'competition-enrollment');\n                    dispatch(setActiveSubscription(subscriptionForCompetition[0]));\n                    setActiveStep(1);\n                    setShowSubscriptionDetails(true);\n                }\n            })\n            //is user go to login flow from itself(current page)\n            if (state.currentLoginFlow == 'subscription') {\n                dispatch(disableLoginFlow());\n                setShowSubscriptionDetails(true);\n            }\n        }\n    }, [])\n\n    useEffect(() => {\n        let isSubscribed = loggedInUser?.subscriptions?.filter((data) => data.type === 'competition-enrollment');\n        if (isSubscribed && isSubscribed.length) setAlreadySubscribed(true);\n    }, [state.loggedInUser])\n\n    const setSubscription = (subscription) => {\n        dispatch(setActiveSubscription(subscription));\n        setActiveStep(1);\n        if (loggedInUser.name && loggedInUser.phone && loggedInUser.username) {\n            setShowSubscriptionDetails(true);\n        } else {\n            dispatch(enableLoginFlow('subscription'));\n            history.push({\n                pathname: '/login',\n                state: null\n            })\n        }\n    }\n\n    return (\n        <div className=\"subscription subscription-outer charcoal-bg\">\n            <div id=\"Subscription\" className=\"charcoal-bg\">\n                <div className=\"flex-container-VC subscription-wrap charcoal-bg\">\n                    <div className=\"flex-3 heading-content\">\n                        <h1>Unlimited Classes For The Price Of One</h1>\n                        <div className=\"line1\">Dance to the music that makes YOU want to move at any skill level.</div>\n                    </div>\n                    <div className=\"inner-plans-wrap\">\n                        {AvailableSubscriptions && AvailableSubscriptions.map((subscription) => {\n                            return <div className=\"flex-2 plan\" onClick={() => setSubscription(subscription)} key={subscription.key}>\n                                <div className=\"plan_tag\">{subscription.name}</div>\n                                <div className=\"plan_price\">@{subscription.amount}<span>{subscription.plans}</span></div>\n                                <div className=\"plan_tag\">{subscription.desc}</div>\n                                {alreadySubscribed && <div>Alredy subscribed</div>}\n                            </div>\n                        })}\n                    </div>\n                </div>\n            </div>\n            {showSubscriptionDetails && <BuySubscription handleClose={() => setShowSubscriptionDetails(false)} activeStep={activeStep} />}\n        </div>\n    )\n}\n\nexport default Subscriptions\n","/Users/danny/Documents/Projects/boogalu/src/Components/Signup/index.js",["246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267","268","269","270","271","272","273"],"import React, { useState, useEffect } from 'react';\nimport { useHistory } from \"react-router-dom\";\nimport { useStoreConsumer } from '../../Providers/StateProvider';\nimport { signupUser } from '../../Actions/User';\nimport bgImg from '../../Images/bg1.svg';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport TextField from '@material-ui/core/TextField';\nimport Visibility from '@material-ui/icons/Visibility';\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport stepListData from '../../Data/RegistrationStepData'\nimport ArrowRightSharpIcon from '@material-ui/icons/ArrowRightSharp';\nimport { registerUser, getUserByEmail, getUserByPhone } from \"../../Services/User.service\";\nimport * as $ from 'jquery';\n\nexport default function Signup() {\n    const { state, dispatch } = useStoreConsumer();\n    const history = useHistory();\n    let loggedInUser = state.loggedInUser;\n    // if user already login then redirect to home\n    if (loggedInUser.name && loggedInUser.phone && loggedInUser.email && loggedInUser.username) history.push({\n        pathname: '/',\n        state: null\n    })\n    // get data from history props if redirected through google or facebook login\n    if (history.location.state && (history.location.state.source === 'Facebook' || history.location.state.source === 'Google')) {\n        loggedInUser.email = history.location.state.email;\n        loggedInUser.name = history.location.state.name;\n        // setNeedToRegisterError('You are not registered yet, Please register with Choreoculture.')\n    }\n    const [userDetails, setUserDetails] = useState(loggedInUser);\n    const [SignUpError, setSignUpError] = useState(null);\n    const [showHidePassword, setShowHidePassword] = useState({ showPassword: false, showConfirmPassword: false });\n\n    const [activeStep, setActiveStep] = useState('stepOne');\n    const [showNextButton, setShowNextButton] = useState(false);\n    const [stepData, setStepListData] = useState(stepListData);\n    const [selectedOptionsList, setSelectedOptionsList] = useState([]);\n\n    const handleChange = (prop) => (event) => {\n        setUserDetails({ ...userDetails, [prop]: event.target.value });\n    };\n\n    const handleClickShowPassword = (prop) => {\n        setShowHidePassword({ ...showHidePassword, [prop]: !showHidePassword[prop] });\n    };\n\n    const handleMouseDownPassword = (event) => {\n        event.preventDefault();\n    };\n\n    useEffect(() => {\n        $('html,body').animate({\n            scrollTop: 0\n        }, 500);\n    }, [])\n\n    useEffect(() => {\n        if (stepData[activeStep]) {\n            let isAnySelected = stepData[activeStep].filter((data) => data.isSelected);\n            if (isAnySelected.length != 0) setShowNextButton(true);\n            else setShowNextButton(false);\n            // set selected options\n            let selectedOptions = [];\n            Object.entries(stepData).map(([parentKey, parentValue]) => {\n                parentValue.map((parentValueItem) => {\n                    if (parentValueItem.isSelected) {\n                        let selectionObj = { value: [parentValueItem.title], key: parentKey, heading: parentValueItem.heading };\n                        if (selectedOptions.length != 0) {\n                            let isAvl = selectedOptions.filter((data) => data.key === parentKey);\n                            if (isAvl.length != 0) {\n                                selectedOptions.map((item) => {\n                                    if (item.key === parentKey) item.value.push(parentValueItem.title);\n                                })\n                            } else selectedOptions.push(selectionObj);\n                        } else selectedOptions.push(selectionObj);\n                    }\n                })\n            })\n            setSelectedOptionsList(selectedOptions);\n        }\n    }, [activeStep])\n\n    const saveUserRegistrationDetails = () => {\n        return new Promise((res, rej) => {\n            registerUser(userDetails).subscribe((data) => {\n                console.log('user registered success', data);\n                res();\n            })\n        })\n    }\n\n    const checkForUsedPhone = () => {\n        return new Promise((res, rej) => {\n            getUserByPhone(userDetails.phone).subscribe((data) => {\n                if (data && data.length) {\n                    setSignUpError('Phone already registered.');\n                    rej(false);\n                } else {\n                    res(true);\n                }\n            })\n        })\n    }\n\n    const checkForUsedEmail = () => {\n        return new Promise((res, rej) => {\n            getUserByEmail(userDetails.email).subscribe((data) => {\n                if (data && data.length) {\n                    setSignUpError('Email already registered.');\n                    rej(false);\n                } else {\n                    res(true);\n                }\n            })\n        })\n    }\n\n    const setSignupUserCred = (e) => {\n        if (userDetails.password != userDetails.confirmPassword) {\n            setSignUpError('Password dose not match.');\n            return;\n        }\n\n        Promise.all([checkForUsedEmail(), checkForUsedPhone()]).then(() => {\n            saveUserRegistrationDetails()\n                .then(() => {\n                    dispatch(signupUser(userDetails));\n                    if (state.currentLoginFlow == 'competition') history.push('/competitions');\n                    else if (state.currentLoginFlow == 'subscription') history.push('/subscription');\n                    if (state.currentLoginFlow == 'upload-video') history.push('/upload-video');\n                    else history.push(({\n                        pathname: '/',\n                        state: null\n                    }));\n                })\n                .catch((error) => {\n                    // error in user registration\n                    if (error) {\n\n                    }\n                })\n        }).catch(error => {\n            console.error(error)\n        });\n        e.preventDefault();\n    }\n\n    const setNextStep = () => {\n        switch (activeStep) {\n            case 'stepOne': setActiveStep('stepTwo'); break;\n            case 'stepTwo': setActiveStep('stepThree'); break;\n            case 'stepThree': setActiveStep('stepFour'); break;\n            case 'stepFour': setActiveStep('stepFive'); break;\n            case 'stepFive': setActiveStep(6); break;\n        }\n    }\n\n    const setPrevStep = () => {\n        switch (activeStep) {\n            case 'stepTwo': setActiveStep('stepOne'); break;\n            case 'stepThree': setActiveStep('stepTwo'); break;\n            case 'stepFour': setActiveStep('stepThree'); break;\n            case 'stepFive': setActiveStep('stepFour'); break;\n            case 6: setActiveStep('stepFive'); break;\n        }\n    }\n\n    const setStepListItemData = (e, activeItem, status) => {\n        e.preventDefault();\n        e.stopPropagation();\n        const stepDataList = Object.assign({}, stepData);\n        stepDataList[activeStep].map((item) => {\n            if (item.title === activeItem.title) {\n                item.isSelected = item.isSelected ? false : true;\n            } else {\n                if (status != 'multi-select') {\n                    item.isSelected = false;\n                }\n            }\n        })\n        // set selected options\n        let selectedOptions = [];\n        Object.entries(stepDataList).map(([parentKey, parentValue]) => {\n            parentValue.map((parentValueItem) => {\n                if (parentValueItem.isSelected) {\n                    let selectionObj = { value: [parentValueItem.title], key: parentKey, heading: parentValueItem.heading };\n                    if (selectedOptions.length != 0) {\n                        let isAvl = selectedOptions.filter((data) => data.key === parentKey);\n                        if (isAvl.length != 0) {\n                            selectedOptions.map((item) => {\n                                if (item.key === parentKey) item.value.push(parentValueItem.title);\n                            })\n                        } else selectedOptions.push(selectionObj);\n                    } else selectedOptions.push(selectionObj);\n                }\n            })\n        })\n        setSelectedOptionsList(selectedOptions);\n        let isAnySelected = stepDataList[activeStep].filter((data) => data.isSelected);\n        if (isAnySelected.length != 0) setShowNextButton(true);\n        else setShowNextButton(false);\n        setStepListData(stepDataList);\n    }\n\n    return (\n        <div className=\"logout-wrap clearfix\">\n            {activeStep != 6 && <div className=\"step-wrap\">\n                <div className=\"heading1\">Let's Get Started!</div>\n                {activeStep === 'stepOne' && <>\n                    <div className=\"list-content\">\n                        <div className=\"list-heading-wrap\">\n                            <div className=\"heading2\">What’s your experience with dancing?</div>\n                            <div className=\"heading3\">Select One Option</div>\n                        </div>\n                        <div className=\"list\">\n                            {stepData.stepOne.map((item, i) => {\n                                return (\n                                    <div key={i} className={item.isSelected ? 'list-item selected-item' : 'list-item'} onClick={(e) => setStepListItemData(e, item)}>\n                                        <div className=\"title\">{item.title}</div>\n                                        <div className=\"desc\">{item.desc}</div>\n                                        <Checkbox\n                                            required\n                                            color=\"primary\"\n                                            className=\"selected-item-checkbox\"\n                                            checked={item.isSelected}\n                                            onChange={(e) => setStepListItemData(e, item)}\n                                            inputProps={{ 'aria-label': 'secondary checkbox' }}\n                                        />\n                                    </div>\n                                )\n                            })}\n                        </div>\n                    </div>\n                </>}\n                {activeStep === 'stepTwo' && <>\n                    <div className=\"list-content\">\n                        <div className=\"list-heading-wrap\">\n                            <div className=\"heading2\">What is your first goal that you want to work on?</div>\n                            <div className=\"heading3\">Select One Option</div>\n                        </div>\n                        <div className=\"list\">\n                            {stepData.stepTwo.map((item, i) => {\n                                return (\n                                    <div key={i} className={item.isSelected ? 'list-item selected-item' : 'list-item'} onClick={(e) => setStepListItemData(e, item)}>\n                                        <div className=\"title\">{item.title}</div>\n                                        <div className=\"desc\">{item.desc}</div>\n                                        <Checkbox\n                                            required\n                                            color=\"primary\"\n                                            className=\"selected-item-checkbox\"\n                                            checked={item.isSelected}\n                                            onChange={(e) => setStepListItemData(e, item)}\n                                            inputProps={{ 'aria-label': 'secondary checkbox' }}\n                                        />\n                                    </div>\n                                )\n                            })}\n                        </div>\n                    </div>\n                </>}\n                {activeStep === 'stepThree' && <>\n                    <div className=\"list-content\">\n                        <div className=\"list-heading-wrap\">\n                            <div className=\"heading2\">What are you interested in?</div>\n                            <div className=\"heading3\">Select all that apply</div>\n                        </div>\n                        <div className=\"list\">\n                            {stepData.stepThree.map((item, i) => {\n                                return (\n                                    <div key={i} className={item.isSelected ? 'list-item selected-item' : 'list-item'} onClick={(e) => setStepListItemData(e, item, 'multi-select')}>\n                                        <div className=\"title\">{item.title}</div>\n                                        <div className=\"desc\" style={{ paddingRight: '25px' }}>{item.desc}</div>\n                                        <Checkbox\n                                            required\n                                            color=\"primary\"\n                                            className=\"selected-item-checkbox\"\n                                            checked={item.isSelected}\n                                            onChange={(e) => setStepListItemData(e, item, 'multi-select')}\n                                            inputProps={{ 'aria-label': 'secondary checkbox' }}\n                                        />\n                                    </div>\n                                )\n                            })}\n                        </div>\n                    </div>\n                </>}\n                {activeStep === 'stepFour' && <>\n                    <div className=\"list-content\">\n                        <div className=\"list-heading-wrap\">\n                            <div className=\"heading2\">How long would you like your dance sessions to be?</div>\n                            <div className=\"heading3\">Select One Option</div>\n                        </div>\n                        <div className=\"list\">\n                            {stepData.stepFour.map((item, i) => {\n                                return (\n                                    <div key={i} className={item.isSelected ? 'list-item selected-item' : 'list-item'} onClick={(e) => setStepListItemData(e, item)}>\n                                        <div className=\"title\">{item.title}</div>\n                                        <div className=\"desc\">{item.desc}</div>\n                                        <Checkbox\n                                            required\n                                            color=\"primary\"\n                                            className=\"selected-item-checkbox\"\n                                            checked={item.isSelected}\n                                            onChange={(e) => setStepListItemData(e, item)}\n                                            inputProps={{ 'aria-label': 'secondary checkbox' }}\n                                        />\n                                    </div>\n                                )\n                            })}\n                        </div>\n                    </div>\n                </>}\n                {activeStep === 'stepFive' && <>\n                    <div className=\"list-content\">\n                        <div className=\"list-heading-wrap\">\n                            <div style={{ paddingBottom: 0 }} className=\"heading2\">Your Personal Schedule & Recommendations</div>\n                        </div>\n                        <div className=\"list\">\n                            {selectedOptionsList.map((item, i) => {\n                                return (\n                                    <div key={i} className=\"list-item selected-item\" onClick={() => setActiveStep(item.key)}>\n                                        <div className=\"title\">{item.heading}</div>\n                                        <div className=\"desc\">\n                                            {item.value.length === 1 &&\n                                                item.value.map((listValue, j) => {\n                                                    return <span key={j}>{listValue} </span>\n                                                })\n                                            }\n                                            {item.value.length != 1 &&\n                                                item.value.map((listValue, j) => {\n                                                    return <span key={j}>{listValue}, </span>\n                                                })\n                                            }\n\n                                        </div>\n                                        {/* <Checkbox\n                                            required\n                                            color=\"primary\"\n                                            className=\"selected-item-checkbox\"\n                                            checked={true}\n                                            disabled={true}\n                                            inputProps={{ 'aria-label': 'secondary checkbox' }}\n                                        /> */}\n                                    </div>\n                                )\n                            })}\n                        </div>\n                    </div>\n                </>}\n                {activeStep != 6 && <div className=\"step-already-login-wrap clearfix\">\n                    <div className=\"text-wrap\">Already have an account?</div>\n                    <Button color=\"primary\" onClick={() => history.push({\n                        pathname: '/login',\n                        state: null\n                    })}>SIGN IN</Button>\n                    {\n                        showNextButton ?\n                            <div className={`next-prev-actions ${activeStep != 'stepOne' ? 'next-step-active' : ''} `}>\n                                {activeStep != 'stepOne' && <Button color=\"primary\" variant=\"contained\" className=\"next-btn previous\" onClick={() => setPrevStep()}>Prev</Button>}\n                                {showNextButton && <Button color=\"primary\" variant=\"contained\" className=\"next-btn\" onClick={() => setNextStep()}>Next</Button>}\n                            </div> : ''\n                    }\n                </div>}\n            </div>}\n            {activeStep == 6 && <form className=\"form-wrap final-registration-block clearfix\" onSubmit={setSignupUserCred}>\n                <div className=\"heading-outer\">\n                    <div className=\"heading1\">Let's Get Started!</div>\n                    <div className=\"heading2\">Create an account to Choreoculture to get all features.</div>\n                </div>\n                {/* {NeedToRegisterError && <div className=\"login-error\">\n                    {NeedToRegisterError}\n                </div>} */}\n                <div className=\"form-outer clearfix\">\n                    <div className=\"input-wrap\">\n                        <TextField className=\"input-field\"\n                            required\n                            id=\"outlined-required-Name\"\n                            label=\"Name\"\n                            onChange={handleChange('name')}\n                            value={userDetails.name}\n                            variant=\"outlined\"\n                        />\n                    </div>\n                    <div className=\"input-wrap\">\n                        <TextField className=\"input-field\"\n                            required\n                            id=\"outlined-required-Username\"\n                            label=\"Username\"\n                            onChange={handleChange('username')}\n                            value={userDetails.username}\n                            variant=\"outlined\"\n                        />\n                    </div>\n                    <div className=\"input-wrap\">\n                        <TextField className=\"input-field\"\n                            required\n                            type=\"tel\"\n                            id=\"outlined-required-phone\"\n                            label=\"Phone\"\n                            onChange={handleChange('phone')}\n                            value={userDetails.phone}\n                            variant=\"outlined\"\n                        />\n                    </div>\n                    <div className=\"input-wrap\">\n                        <TextField className=\"input-field\"\n                            required\n                            id=\"outlined-required-email\"\n                            label=\"Email\"\n                            type=\"email\"\n                            onChange={handleChange('email')}\n                            value={userDetails.email}\n                            variant=\"outlined\"\n                        />\n                    </div>\n                    <div className=\"input-wrap\">\n                        <TextField className=\"input-field\"\n                            required\n                            id=\"outlined-required-country\"\n                            label=\"Country\"\n                            onChange={handleChange('country')}\n                            value={userDetails.country}\n                            variant=\"outlined\"\n                        />\n                    </div>\n                    <div className=\"input-wrap\">\n                        <TextField className=\"input-field\"\n                            required\n                            id=\"outlined-required-state\"\n                            label=\"State\"\n                            onChange={handleChange('state')}\n                            value={userDetails.state}\n                            variant=\"outlined\"\n                        />\n                    </div>\n                    <div className=\"input-wrap\">\n                        <FormControl className=\"\" variant=\"outlined\">\n                            <InputLabel htmlFor=\"outlined-adornment-password\">Password</InputLabel>\n                            <OutlinedInput\n                                required\n                                id=\"outlined-adornment-password\"\n                                type={showHidePassword.showPassword ? 'text' : 'password'}\n                                value={userDetails.password}\n                                onChange={handleChange('password')}\n                                endAdornment={\n                                    <InputAdornment position=\"end\">\n                                        <IconButton\n                                            aria-label=\"toggle password visibility\"\n                                            onClick={() => handleClickShowPassword('showPassword')}\n                                            onMouseDown={handleMouseDownPassword}\n                                            edge=\"end\"\n                                        >\n                                            {showHidePassword.showPassword ? <Visibility /> : <VisibilityOff />}\n                                        </IconButton>\n                                    </InputAdornment>\n                                }\n                                labelWidth={70}\n                            />\n                        </FormControl>\n                    </div>\n                    <div className=\"input-wrap\">\n                        <FormControl className=\"\" variant=\"outlined\">\n                            <InputLabel htmlFor=\"outlined-adornment-confirm-password\">Confirm Password</InputLabel>\n                            <OutlinedInput\n                                required\n                                id=\"outlined-adornment-confirm-password\"\n                                type={showHidePassword.showConfirmPassword ? 'text' : 'password'}\n                                value={userDetails.confirmPassword}\n                                onChange={handleChange('confirmPassword')}\n                                endAdornment={\n                                    <InputAdornment position=\"end\">\n                                        <IconButton\n                                            aria-label=\"toggle confirm password visibility\"\n                                            onClick={() => handleClickShowPassword('showConfirmPassword')}\n                                            onMouseDown={handleMouseDownPassword}\n                                            edge=\"end\"\n                                        >\n                                            {showHidePassword.showConfirmPassword ? <Visibility /> : <VisibilityOff />}\n                                        </IconButton>\n                                    </InputAdornment>\n                                }\n                                labelWidth={70}\n                            />\n                        </FormControl>\n                    </div>\n                    <div className=\"input-wrap\">\n                        <div className=\"dob-wrap\">\n                            <TextField className=\"input-field\"\n                                id=\"date\"\n                                label=\"Birthday\"\n                                type=\"date\"\n                                onChange={handleChange('dob')}\n                                value={userDetails.dob}\n                                InputLabelProps={{\n                                    shrink: true,\n                                }}\n                            />\n                        </div>\n                    </div>\n                    <div className=\"input-wrap\">\n                        <FormControl variant=\"outlined\" className=\"input-field\">\n                            <InputLabel id=\"select-outlined-label\">Gender</InputLabel>\n                            <Select\n                                labelId=\"select-outlined-label\"\n                                id=\"select-outlined\"\n                                value={userDetails.gender}\n                                onChange={handleChange('gender')}\n                                label=\"Gender\"\n                            >\n                                <MenuItem value=\"Male\">Male</MenuItem>\n                                <MenuItem value=\"Female\">Female</MenuItem>\n                                <MenuItem value=\"Other\">Other</MenuItem>\n                            </Select>\n                        </FormControl>\n                    </div>\n                    <div className=\"input-wrap bio-wrap\">\n                        <TextField className=\"input-field bio-input\"\n                            id=\"outlined-required-bio\"\n                            label=\"Bio\"\n                            value={userDetails.bio}\n                            onChange={handleChange('bio')}\n                            variant=\"outlined\"\n                        />\n                    </div>\n                    <div className=\"tnc-wrap\">\n                        <div className=\"tnc-content clearfix\">\n                            <div className=\"checkbox-wrap\">\n                                <Checkbox\n                                    required\n                                    color=\"primary\"\n                                    checked={userDetails.tnc}\n                                    onChange={(e) => setUserDetails({ ...userDetails, tnc: e.target.checked })}\n                                    inputProps={{ 'aria-label': 'secondary checkbox' }}\n                                />\n                            </div>\n                            <div className=\"note-wrap\">Yes, I agree to the terms and conditions </div>\n                        </div>\n                    </div>\n                    {SignUpError && <div className=\"login-error\">\n                        {SignUpError}\n                    </div>}\n                    <div className=\"submit-btn clearfix\">\n                        <Button variant=\"contained\" type=\"submit\" color=\"primary\" >Sign Up\n                         <ArrowRightSharpIcon />\n                        </Button>\n                        {activeStep != 'stepOne' && <Button color=\"primary\" variant=\"contained\" className=\"next-btn previous\" onClick={() => setPrevStep()}>Prev</Button>}\n                    </div>\n                    <div className=\"already-login-wrap\">\n                        <div className=\"text-wrap\">Already have an account?</div>\n                        <Button color=\"primary\" onClick={() => history.push({\n                            pathname: '/login',\n                            state: null\n                        })}>SIGN IN</Button>\n                    </div>\n                </div>\n            </form>}\n\n            <div className=\"img-wrap\">\n                <img src={bgImg} alt=\"bg1\" />\n            </div>\n        </div>\n    );\n}","/Users/danny/Documents/Projects/boogalu/src/Components/Contactus/index.js",[],"/Users/danny/Documents/Projects/boogalu/src/Components/Homepage/index.js",["274","275","276","277","278"],"import React, { useState, useEffect } from \"react\";\nimport { useStoreConsumer } from '../../Providers/StateProvider';\nimport bgImg from '../../Images/hip-hop.png';\nimport { useHistory } from \"react-router-dom\";\nimport * as $ from 'jquery';\n\nexport default function Homepage() {\n    const history = useHistory();\n    const { state, dispatch } = useStoreConsumer();\n    let loggedInUser = state.loggedInUser;\n    const [danceImageVisibleClass, activeDanceImage] = useState('');\n\n    useEffect(() => {\n        setTimeout(() => {\n            activeDanceImage('show');\n        }, 800);\n    }, []);\n\n    return (\n        <div className=\"homepage charcoal-bg clearfix\">\n            <div className=\"homepage-wrap clearfix\">\n                <div className=\"banner_vdo\">\n                    <div className=\"vdo_wrap rounded-dark-box\">\n                        <iframe width=\"100%\" src=\"https://www.youtube.com/embed/i3yMXpeLPuU\" frameBorder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowFullScreen></iframe>\n                    </div>\n                    <div className=\"vdo_wrap rounded-dark-box\">\n                        <iframe width=\"100%\" src=\"https://www.youtube.com/embed/dM1ghaspLyc\" frameBorder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowFullScreen></iframe>\n                    </div>\n                    <div className=\"vdo_wrap rounded-dark-box\">\n                        <iframe width=\"100%\" src=\"https://www.youtube.com/embed/U7NaFiqSeVE\" frameBorder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowFullScreen></iframe>\n                    </div>\n                </div>\n                <div className=\"banner_img\">\n                    <h1>Dance Classes for Everyone</h1>\n                    <div className=\"get-started-wrap\">\n                        <h4>The world’s best dance learning tools – at your fingertips. Start free for 7 days.</h4>\n                        <button className=\"btn primary-light get_started\" onClick={() => {\n                            loggedInUser ? history.push('/competitions') : history.push('/login');\n                        }}>Get Started</button>\n                    </div>\n                </div>\n            </div>\n            <div className={`home-img-wrap ${danceImageVisibleClass}`}>\n                <img src={bgImg} alt=\"\" />\n            </div>\n            <div className=\"homepage-display-1 charcoal-bg-dark\">\n                <div className=\"learn_choreo\" id=\"Lessons\">\n                    <div className=\"heading-wrap\">\n                        <h2>\n                            Learn Choreography To <br /> Your Favorite Songs\n                        </h2>\n                        <div className=\"line1\">Dance to the music that makes YOU want to move at any skill level.</div>\n                    </div>\n                    <div className=\"flex-container vdo-wrap\" >\n                        <div className=\"flex-basis-3 rounded-dark-box\">\n                            <iframe className=\"iframe\" src=\"//www.youtube.com/embed/i3yMXpeLPuU?wmode=transparent&amp;autoplay=0&amp;theme=dark&amp;controls=0&amp;autohide=0&amp;loop=0&amp;showinfo=0&amp;rel=0&amp;playlist=false&amp;enablejsapi=0\" scrolling=\"no\" title=\"Vimeo embed\" frameBorder=\"0\" allow=\"autoplay; fullscreen\" allowFullScreen={false}>\n                            </iframe>\n                        </div>\n                        <div className=\"flex-basis-3 rounded-dark-box\">\n                            <iframe className=\"iframe\" src=\"//cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fplayer.vimeo.com%2Fvideo%2F453549133%3Fapp_id%3D122963&amp;dntp=1&amp;display_name=Vimeo&amp;url=https%3A%2F%2Fvimeo.com%2F453549133%3Flazy%3D1&amp;image=https%3A%2F%2Fi.vimeocdn.com%2Fvideo%2F951136340_1280.jpg&amp;key=96f1f04c5f4143bcb0f2e68c87d65feb&amp;type=text%2Fhtml&amp;schema=vimeo\" scrolling=\"no\" title=\"Vimeo embed\" frameBorder=\"0\" allow=\"autoplay; fullscreen\" allowFullScreen={false}>\n                            </iframe>\n                        </div>\n                        <div className=\"flex-basis-3 rounded-dark-box\">\n                            <iframe className=\"iframe\" src=\"//cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fplayer.vimeo.com%2Fvideo%2F453549133%3Fapp_id%3D122963&amp;dntp=1&amp;display_name=Vimeo&amp;url=https%3A%2F%2Fvimeo.com%2F453549133%3Flazy%3D1&amp;image=https%3A%2F%2Fi.vimeocdn.com%2Fvideo%2F951136340_1280.jpg&amp;key=96f1f04c5f4143bcb0f2e68c87d65feb&amp;type=text%2Fhtml&amp;schema=vimeo\" scrolling=\"no\" title=\"Vimeo embed\" frameBorder=\"0\" allow=\"autoplay; fullscreen\" allowFullScreen={false}>\n                            </iframe>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}","/Users/danny/Documents/Projects/boogalu/src/Components/VideoUploader/index.js",["279","280","281"],"import React, { useRef, useState, useEffect } from 'react'\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport { useStoreConsumer } from '../../Providers/StateProvider';\nimport { uploadVideo, uploadImage } from \"../../Services/Upload.service\";\nimport { saveUploadedVideo } from \"../../Services/UploadedVideo.service\";\nimport { useHistory } from \"react-router-dom\";\nimport { THUMBNAIL_URL } from \"../../Constants\";\nimport ImageUploader from 'react-images-upload';\nimport { disableLoginFlow } from \"../../Actions/LoginFlow\";\nimport { FaCloudUploadAlt } from 'react-icons/fa';\n// modal imports\nimport Modal from '@material-ui/core/Modal';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport Fade from '@material-ui/core/Fade';\nimport { makeStyles } from '@material-ui/core/styles';\nimport CloseIcon from '@material-ui/icons/Close';\nimport IconButton from '@material-ui/core/IconButton';\n\nexport default function VideoUploader({ selectedVdo, handleVdoUploadResponse }) {\n    const history = useHistory();\n    const { state, dispatch } = useStoreConsumer();\n    const loggedInUser = state.loggedInUser;\n    const uploaderRef = useRef(null);\n    const [SelectedVideo, setSelectedVideo] = useState(selectedVdo ? selectedVdo : { title: \"\", desc: \"\", file: null });\n    const [UploadedVdoUrl, setUploadedVdoUrl] = useState(null);\n    const [ThumbnailImage, setThumbnailImage] = useState(null);\n    const [openVdoUploaderModal, setOpenVdoUploaderModal] = useState(true);\n\n    useEffect(() => {\n        dispatch(disableLoginFlow());\n    }, [])\n\n    const useStyles = makeStyles((theme) => ({\n        modal: {\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n        },\n        paper: {\n            backgroundColor: theme.palette.background.paper,\n            border: '2px solid #000',\n            boxShadow: theme.shadows[5],\n            padding: theme.spacing(2, 4, 3),\n        },\n    }));\n    const classes = useStyles();\n\n    async function onChangeFile(event) {\n        event.stopPropagation();\n        event.preventDefault();\n        var file = event.target.files[0];\n        console.log(file);\n        if (file) {\n            setSelectedVideo({ ...SelectedVideo, file: null });\n            const reader = new FileReader();\n            reader.readAsDataURL(file);\n            reader.onload = () => {\n                setSelectedVideo({ ...SelectedVideo, file: reader.result });\n            }\n            reader.onerror = error => console.error(error);\n        }\n    }\n\n    const handleChange = (prop) => (event) => {\n        setSelectedVideo({ ...SelectedVideo, [prop]: event.target.value });\n    };\n\n    async function uploadSelectedVideo() {\n        var thumbnailImage = THUMBNAIL_URL;\n        if (ThumbnailImage && ThumbnailImage[0]) {\n            const reader = new FileReader();\n            reader.readAsDataURL(ThumbnailImage[0]);\n            reader.onload = () => {\n                uploadImage(reader.result, 'thumbnail', 'small').subscribe((downloadableUrl) => {\n                    thumbnailImage = downloadableUrl;\n                })\n            }\n            reader.onerror = error => console.error(error);\n        }\n\n        uploadVideo(SelectedVideo.file).subscribe((response) => {\n            if (response.donePercentage) {\n                console.log('Upload is ' + response.donePercentage + '% done');\n            }\n            if (response.downloadURL && !UploadedVdoUrl) {\n                setUploadedVdoUrl(response.downloadURL);\n                const uploadObj = {\n                    title: SelectedVideo.title,\n                    desc: SelectedVideo.desc,\n                    url: response.downloadURL,\n                    userId: loggedInUser.key,\n                    thumbnail: thumbnailImage\n                }\n                saveUploadedVideo(uploadObj).subscribe((response) => {\n                    console.log(\"vedio data saved to db\", response);\n                    closeUploaderModal();\n                    if (state.currentLoginFlow == 'competition-uploadvdo') handleVdoUploadResponse(3);\n                    else history.push('/profile');\n                })\n            }\n        })\n        console.log(SelectedVideo);\n        console.log(loggedInUser);\n    }\n\n    const onThumbnailImgSelect = (picture) => {\n        setThumbnailImage(picture);\n    }\n\n    const closeUploaderModal = () => {\n        const pathName = history?.location?.pathname.split('/')[1];\n        if (pathName.includes('register') || pathName.includes('login')) {\n            history.push('/profile');\n        }\n        // else if (state.currentLoginFlow == 'competition-uploadvdo') history.push('/competition');\n        // handleClose();\n        setOpenVdoUploaderModal(false);\n\n    }\n    return (\n        <div>\n            <Modal\n                aria-labelledby=\"transition-modal-title\"\n                aria-describedby=\"transition-modal-description\"\n                className='competition-modal-box'\n                open={openVdoUploaderModal}\n                onClose={() => closeUploaderModal(false)}\n                closeAfterTransition\n                BackdropComponent={Backdrop}\n                BackdropProps={{\n                    timeout: 500,\n                }}\n            >\n                <Fade in={openVdoUploaderModal}>\n                    <div className=\"video-uploader-inner-modal\">\n                        <IconButton className=\"close-modal-btn\" onClick={() => closeUploaderModal(false)}>\n                            <CloseIcon />\n                        </IconButton>\n                        <h3>Upload your dance performance video!</h3>\n                        <div className={`uploader-wrap ${SelectedVideo.file ? 'selected-file': ''}`}>\n                            {\n                                !SelectedVideo.file ?\n                                <div className=\"upload-input-wrap\">\n                                    <i className=\"upload-icon\"><FaCloudUploadAlt /></i>\n                                    <input id=\"myInput\"\n                                        type=\"file\"\n                                        accept=\"video/mp4,video/x-m4v,video/*\"\n                                        ref={uploaderRef}\n                                        onChange={(e) => onChangeFile(e)}\n                                    />\n                                </div> : ''\n                            }\n\n                            {!SelectedVideo.file ?\n                                <div className=\"upload-btn-file\">\n                                    <Button\n                                        variant=\"contained\" color=\"primary\"\n                                        onClick={() => { uploaderRef.current.click() }}>Upload Video</Button>\n                                </div> :\n                                <div className=\"video-information-wrap\">\n                                    <video width=\"400\" controls>\n                                        <source src={SelectedVideo.file} />\n                                    </video>\n                                    <div className=\"change-video-btn\">\n                                        <Button\n                                            variant=\"contained\" color=\"primary\"\n                                            onClick={() => { uploaderRef.current.click() }}\n                                        >Change vdo</Button>\n                                    </div>\n                                    <div className=\"input-form-wrap\">\n                                        <div className=\"input-wrap image-uploader-wrap\">\n                                            <ImageUploader\n                                                withIcon={true}\n                                                buttonText='Select image'\n                                                onChange={onThumbnailImgSelect}\n                                                imgExtension={['.jpg', '.gif', '.png', '.gif', '.svg']}\n                                                maxFileSize={5242880}\n                                                accept=\"image/*\"\n                                                withPreview={true}\n                                                singleImage={true}\n                                                label=\"Select thumbnail image\"\n                                            />\n                                        </div>\n                                        <div className=\"text-form-wrapper\">\n                                            <div className=\"input-field-wrap\">\n                                                <TextField className=\"input-field\"\n                                                    required\n                                                    id=\"outlined-required-title\"\n                                                    label=\"Video title\"\n                                                    onChange={handleChange('title')}\n                                                    value={SelectedVideo.title}\n                                                    variant=\"outlined\"\n                                                    autoComplete=\"off\"\n                                                />\n                                            </div>\n                                            <div className=\"input-field-wrap\">\n                                                <TextField className=\"input-field\"\n                                                    required\n                                                    id=\"outlined-required-desc\"\n                                                    label=\"Video description\"\n                                                    onChange={handleChange('desc')}\n                                                    value={SelectedVideo.desc}\n                                                    variant=\"outlined\"\n                                                    autoComplete=\"off\"\n                                                />\n                                            </div>\n                                            <Button variant=\"contained\" color=\"secondary\" onClick={(e) => uploadSelectedVideo(e)}>Upload</Button>\n                                        </div>\n                                    </div>\n                                </div>}\n                        </div>\n                    </div>\n                </Fade>\n            </Modal>\n        </div>\n    )\n}","/Users/danny/Documents/Projects/boogalu/src/Components/Page404/index.js",[],"/Users/danny/Documents/Projects/boogalu/src/Services/User.service.js",[],"/Users/danny/Documents/Projects/boogalu/src/Services/Upload.service.js",["282","283"],"import { Observable } from 'rxjs';\nimport firebase from './firebase';\nconst storageRef = firebase.storage().ref();\n\nconst BASE_PATH = '/uploads';\nvar FILE_NAME = '';\nvar FILE_PATH = '';\n// from ==> competition or user upload\n// type => small or large\nexport function uploadImage(image, from, type) {\n\n    let date = new Date();\n    let id = date.getTime().toString();\n    FILE_NAME = (type ? type : '') + 'pic' + id + '.jpg';\n    FILE_PATH = BASE_PATH + '/' + from + '/' + FILE_NAME;\n\n    let uploadTask = storageRef.child(FILE_PATH).putString(image, 'data_url');\n\n    return new Observable((observer) => {\n        uploadTask.on('state_changed',\n            (snapshot) => {\n                let progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n                console.log('Upload is ' + progress + '% done');\n                switch (snapshot.state) {\n                    case firebase.storage.TaskState.PAUSED: // or 'paused'\n                        console.log('Upload is paused');\n                        break;\n                    case firebase.storage.TaskState.RUNNING: // or 'running'\n                        console.log('Upload is running');\n                        break;\n                }\n            }, (error) => {\n                console.log(error);\n            }, () => {\n                uploadTask.snapshot.ref.getDownloadURL().then(function (downloadURL) {\n                    observer.next(downloadURL);\n                });\n            });\n    });\n}\n\nexport function deleteImage(imageUrl) {\n    storageRef.refFromURL(imageUrl).delete();\n}\n\nexport function uploadVideo(video) {\n\n    let date = new Date();\n    let id = date.getTime().toString();\n    FILE_NAME = 'user' + id + '.mp4';\n    FILE_PATH = BASE_PATH + '/video/' + FILE_NAME;\n\n    let uploadTask = storageRef.child(FILE_PATH).putString(video, 'data_url');\n\n    return new Observable((observer) => {\n        uploadTask.on('state_changed',\n            (snapshot) => {\n                let progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n                // console.log('Upload is ' + progress + '% done');\n                observer.next({ donePercentage: progress });\n                switch (snapshot.state) {\n                    case firebase.storage.TaskState.PAUSED: // or 'paused'\n                        console.log('Upload is paused');\n                        break;\n                    case firebase.storage.TaskState.RUNNING: // or 'running'\n                        console.log('Upload is running');\n                        break;\n                }\n            }, (error) => {\n                console.log(error);\n            }, () => {\n                uploadTask.snapshot.ref.getDownloadURL().then(function (downloadURL) {\n                    observer.next({ downloadURL });\n                });\n            });\n    });\n}\n\nexport function deleteVideo(videoUrl) {\n    storageRef.refFromURL(videoUrl).delete();\n}\n","/Users/danny/Documents/Projects/boogalu/src/Services/UploadedVideo.service.js",[],"/Users/danny/Documents/Projects/boogalu/src/Services/Competition.service.js",[],"/Users/danny/Documents/Projects/boogalu/src/Services/Subscription.service.js",[],"/Users/danny/Documents/Projects/boogalu/src/Services/EnrollCompetition.service.js",[],"/Users/danny/Documents/Projects/boogalu/src/Components/Vedio/Video.js",[],"/Users/danny/Documents/Projects/boogalu/src/Actions/User/index.js",[],"/Users/danny/Documents/Projects/boogalu/src/Services/Utils.js",["284","285","286"],"export function formatTime(time) {\n    time = new Date(time);\n    const hour24 = time.getHours();\n    let minutes = (time.getMinutes() === 0) ? '00' : time.getMinutes();\n    minutes = (minutes > 0 && minutes < 10) ? `0${minutes}` : minutes;\n    const ampm = (hour24 >= 12) ? 'PM' : 'AM';\n    let hour = hour24 % 12 || 12;\n    //append zero is hour is single digit\n    if (hour < 10) {\n        hour = `0${hour}`;\n    }\n    return `${hour}:${minutes} ${ampm}`;\n};\n\nexport function formatDate(date, status) {\n    date = new Date(date);\n    var monthNames = [\n        \"January\", \"February\", \"March\",\n        \"April\", \"May\", \"June\", \"July\",\n        \"August\", \"September\", \"October\",\n        \"November\", \"December\"\n    ];\n    let day = date.getDate();\n    let monthIndex = date.getMonth();\n    let year = date.getFullYear();\n    if (status == 3) return day + 'th ' + monthNames[monthIndex] + \" \" + year;\n    if (status == 2) return day + 'th ' + monthNames[monthIndex];\n    if (status == 1) return day;\n};\n\nexport function timeStampToNewDate(timeStamp) {\n    return new Date(timeStamp.seconds * 1000 + Math.round(timeStamp.nanoseconds / 1000000));\n}\n\nexport function toBase64(file) {\n    new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.readAsDataURL(file);\n        reader.onload = () => resolve(reader.result);\n        reader.onerror = error => reject(error);\n    });\n}","/Users/danny/Documents/Projects/boogalu/src/Data/RegistrationStepData.js",[],"/Users/danny/Documents/Projects/boogalu/src/Actions/LoginFlow/index.js",[],"/Users/danny/Documents/Projects/boogalu/src/Actions/Competition/index.js",[],"/Users/danny/Documents/Projects/boogalu/src/Services/firebase.js",[],"/Users/danny/Documents/Projects/boogalu/src/Components/CompetitionsDetails/index.js",["287","288","289","290","291","292","293","294","295","296","297","298","299","300","301","302","303"],"import React, { useState, useEffect, useRef } from 'react'\nimport Modal from '@material-ui/core/Modal';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport Fade from '@material-ui/core/Fade';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport { FaCloudUploadAlt } from 'react-icons/fa';\nimport { useHistory } from \"react-router-dom\";\nimport { useStoreConsumer } from '../../Providers/StateProvider';\nimport { THUMBNAIL_URL } from '../../Constants';\nimport \"./CompetitionsDetails.scss\";\nimport EnrollCompetition from \"../EnrollCompetition\";\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\nimport { setActiveCompetition } from \"../../Actions/Competition\";\nimport { enableLoginFlow } from \"../../Actions/LoginFlow\";\nimport { getUploadedVideosByUserId } from \"../../Services/UploadedVideo.service\";\nimport { formatDate, formatTime } from \"../../Services/Utils\";\nimport VideoUploader from \"../VideoUploader\";\n\n//activestep 1 === Competition details\n//activestep 2 === User submitted competition details if already enrolled\n//activestep 3 === Video selection\n//activestep 4 === final age group and video submission for competition\n\nexport default function CompetitionsDetails({ open, handleClose, initialStep }) {\n\n    const { state, dispatch } = useStoreConsumer();\n    const history = useHistory();\n    const competitionDetails = state.activeCompetition;\n    console.log(competitionDetails);\n    const loggedInUser = state.loggedInUser;\n    const [userUploadedVdos, setUserUploadedVideoList] = useState([]);\n    const tncRef = useRef();\n    const [TnC, setTnC] = useState(false);\n    const [ActiveStep, setActiveStep] = useState(initialStep || 1);\n    const [disableSubmitVdoButton, setDisableSubmitVdoButton] = useState(false);\n    const [VdoUploadDateLimit, setVdoUploadDateLimit] = useState(null)\n    const [SelectedVideo, setSelectedVideo] = useState({ title: \"\", desc: \"\", file: null });\n\n    useEffect(() => {\n        document.addEventListener('mousedown', handleClickOutside);\n        return () => {\n            document.removeEventListener('mousedown', handleClickOutside);\n        }\n    }, []);\n\n    useEffect(() => {\n        if (competitionDetails) {\n            let vdoUploadUpto = new Date(competitionDetails.startAt);\n            new Date(vdoUploadUpto.setDate(vdoUploadUpto.getDate() + 30));\n            let displayDate = formatDate(vdoUploadUpto, 3) + \" \" + formatTime(vdoUploadUpto)\n            setVdoUploadDateLimit(displayDate);\n        }\n    }, [competitionDetails]);\n\n    useEffect(() => {\n        (loggedInUser.email && loggedInUser.phone && ActiveStep === 3 && userUploadedVdos.length == 0) && getUploadedVideosByUserId(loggedInUser.key).subscribe((vdoList) => {\n            if (vdoList && vdoList.length) {\n                vdoList.map((uploadedVdo) => {\n                    if (competitionDetails.isUserEnrolled) {\n                        if (uploadedVdo.key == competitionDetails.userSubmitedDetails.vdo.key) {\n                            uploadedVdo.isSelected = true;\n                            let updatedCompetition = competitionDetails;\n                            updatedCompetition.selectedVideo = uploadedVdo;\n                            dispatch(setActiveCompetition(updatedCompetition));\n                            setDisableSubmitVdoButton(true);\n                        }\n                    }\n                })\n                setUserUploadedVideoList(vdoList)\n            } else {\n                // if user not uploaded any video then set upload new tab active\n                setActiveTabInVdoSelection(2);\n            }\n        });\n    }, [ActiveStep]);\n\n    const setActiveTabInVdoSelection = (tab) => {\n        const getCurrentData = 'tab-2';\n        const tabsLinks = Array.from(document.querySelectorAll('.tab-links'));\n        const tabsBoxes = Array.from(document.querySelectorAll('.js-inner-tab-box'));\n        let currentTab = tab == 1 ? 'tab-1' : 'tab-2'\n        tabsBoxes.forEach(item => {\n            if (item.getAttribute('id') === currentTab) {\n                item.classList.add('active');\n            } else {\n                item.classList.remove('active');\n            }\n        });\n        tabsLinks.forEach(item => {\n            if (item?.dataset?.id === currentTab) {\n                item.classList.add('active');\n            } else {\n                item.classList.remove('active');\n            }\n        });\n    }\n\n    function handleClickOutside(event) {\n        if (tncRef && tncRef.current && !tncRef.current.contains(event.target)) {\n            setTnC(false);\n        }\n    }\n\n    const selectVdo = (e, vdo) => {\n        e.preventDefault();\n        e.stopPropagation();\n        if (competitionDetails.isUserEnrolled && competitionDetails.userSubmitedDetails.vdo.key == vdo.key) {\n            setDisableSubmitVdoButton(true);\n            let updatedCompetition = competitionDetails;\n            delete updatedCompetition.selectedVideo;\n            dispatch(setActiveCompetition(updatedCompetition));\n        }\n        else setDisableSubmitVdoButton(false);\n        let updatedVdos = userUploadedVdos;\n        updatedVdos.map((item) => {\n            if (item.key == vdo.key) {\n                item.isSelected = true;\n                let updatedCompetition = competitionDetails;\n                updatedCompetition.selectedVideo = item;\n                dispatch(setActiveCompetition(updatedCompetition));\n            }\n            else item.isSelected = false;\n        })\n        setUserUploadedVideoList([...updatedVdos]);\n    }\n\n    function toggleTabination(event) {\n        event.stopPropagation();\n\n        const getCurrentData = event.target.getAttribute('data-id');\n\n        const tabsLinks = Array.from(document.querySelectorAll('.tab-links'));\n        const tabsBoxes = Array.from(document.querySelectorAll('.js-inner-tab-box'));\n\n        tabsLinks.forEach(item => {\n            item.classList.remove('active');\n        });\n        event.target.classList.add('active');\n        tabsBoxes.forEach(item => {\n            if (item.getAttribute('id') === getCurrentData) {\n                item.classList.add('active');\n            } else {\n                item.classList.remove('active');\n            }\n        });\n    }\n\n    const proceedForLogin = () => {\n        handleClose();\n        dispatch(enableLoginFlow('competition'));\n        history.push({\n            pathname: '/login',\n            state: null\n        })\n    }\n\n    async function onChangeFile(event) {\n        event.preventDefault();\n        var file = event.target.files[0];\n        console.log(file);\n        if (file) {\n            setSelectedVideo({ ...SelectedVideo, file: null });\n            const reader = new FileReader();\n            reader.readAsDataURL(file);\n            reader.onload = () => {\n                setSelectedVideo({ ...SelectedVideo, file: reader.result });\n                dispatch(enableLoginFlow('competition-uploadvdo'));\n                // handleClose();\n                // open = false;\n            }\n            reader.onerror = error => console.error(error);\n        }\n    }\n\n    const handleVdoUploadResponse = () => {\n        getUploadedVideosByUserId(loggedInUser.key).subscribe((vdoList) => {\n            if (vdoList) {\n                setActiveTabInVdoSelection(1);\n                vdoList.map((uploadedVdo) => {\n                    if (competitionDetails.isUserEnrolled) {\n                        if (uploadedVdo.key == competitionDetails.userSubmitedDetails.vdo.key) {\n                            uploadedVdo.isSelected = true;\n                            let updatedCompetition = competitionDetails;\n                            updatedCompetition.selectedVideo = uploadedVdo;\n                            dispatch(setActiveCompetition(updatedCompetition));\n                            setDisableSubmitVdoButton(true);\n                        }\n                    }\n                })\n                setUserUploadedVideoList(vdoList)\n            }\n        });\n    }\n\n    return (\n        <div>\n            <Modal\n                aria-labelledby=\"transition-modal-title\"\n                aria-describedby=\"transition-modal-description\"\n                className='competition-modal-box'\n                open={open}\n                onClose={handleClose}\n                closeAfterTransition\n                BackdropComponent={Backdrop}\n                BackdropProps={{\n                    timeout: 500,\n                }}\n            >\n                <Fade in={open}>\n                    <div className=\"outer-modal-wrap\">\n                        {<div className=\"inner-modal-wrap\">\n                            {(ActiveStep == 1 || ActiveStep === 2) && <IconButton className=\"close-modal-btn\" onClick={() => { handleClose(); (state.activeCompetition && !state.currentLoginFlow) && dispatch(setActiveCompetition(null)) }}>\n                                <CloseIcon />\n                            </IconButton>}\n                            {(ActiveStep == 3 || ActiveStep == 4) && <IconButton className=\"close-modal-btn back-step-btn\" onClick={() => setActiveStep(ActiveStep - 1)}>\n                                <ArrowBackIcon />\n                            </IconButton>}\n                            <h2 id=\"title\">{competitionDetails.name}</h2>\n                            {(ActiveStep == 1 || ActiveStep == 2) && <div>\n                                <div className=\"image-contentWrap\">\n                                    <div className=\"image-wrap\">\n                                        <img src={competitionDetails.img} alt={competitionDetails.name} />\n                                    </div>\n                                    <div className=\"about-competition-wrap\">\n                                        <div className=\"sub-titles\">About Competition</div>\n                                        <p id=\"description\">{competitionDetails.desc}</p>\n\n                                        <div className=\"sub-titles\">Age Category</div>\n                                        <ul>\n                                            <li>Age 4 to 13 years</li>\n                                            <li>Age 14 to 17 years</li>\n                                            <li>Age 18 and above</li>\n                                        </ul>\n\n                                        <div className=\"sub-titles\" id=\"fees\">\n                                            Fees: <span>{competitionDetails.fee}</span>\n                                        </div>\n\n                                        <div className=\"start-at sub-titles\">\n                                            Start At: <span>{competitionDetails.startingDate}</span>\n                                        </div>\n                                        <div className=\"end-at sub-titles\">\n                                            End At: <span>{competitionDetails.endingDate}</span>\n                                        </div>\n\n                                        {competitionDetails && competitionDetails.isUserEnrolled ?\n                                            <div className=\"sub-titles\">\n                                                You can change/modify video till\n                                            <span>{VdoUploadDateLimit}</span></div> :\n                                            <div className=\"sub-titles\">\n                                                Upload video till <span>{VdoUploadDateLimit}</span></div>}\n\n                                        <div className=\"sub-titles\">Winners and Prizes Rule</div>\n                                        <ul>\n                                            <li>Top 3 Winner From Each Category Get Award.</li>\n                                            <li>There will be a three category as mention above.</li>\n                                            <li>Winner will be based on best performance.</li>\n                                        </ul>\n\n                                        <ul className=\"prices\">\n                                            <li className=\"sub-titles price-details\">\n                                                First Price : <span>{competitionDetails.prices[0]}</span>\n                                            </li>\n                                            <li className=\"sub-titles price-details\">\n                                                Second Price : <span>{competitionDetails.prices[1]}</span>\n                                            </li>\n                                            <li className=\"sub-titles price-details\">\n                                                Third Price : <span>{competitionDetails.prices[2]}</span>\n                                            </li>\n                                        </ul>\n\n                                        <div className=\"sub-titles\">Submission And Result</div>\n                                        <ul>\n                                            <li>You Have to submit Your video till 15th June</li>\n                                            <li>Result will be declared on 16th June At 4 Pm On</li>\n                                            <li>Winner will be based on best performance.</li>\n                                        </ul>\n                                        <h4 className=\"before-submit-message\">Time To Express Your Talent on Our Platform during this Lockdown</h4>\n                                    </div>\n                                </div>\n\n                                <div className=\"action-wrap\">\n                                    <div className=\"terms-button\" ref={tncRef} onClick={() => setTnC((TnC ? false : true))}>\n                                        Terms &amp; Conditions\n                                    {TnC && <div className=\"tool-tip-wrap\">\n                                            <div>You may not be able to attend the live session if you are late.</div>\n                                            <div>You may face interruptions during the course of the live stream due to internet connectivity issues.</div>\n                                            <div>Show details and the artist lineup are subject to change as per the artist’s discretion.</div>\n                                            <div> No refunds on purchased tickets are possible, even in case of any rescheduling.</div>\n                                        </div>}\n                                    </div>\n                                    {/* check for user logged in or not */}\n                                    {loggedInUser.email && loggedInUser.username ?\n                                        <div>\n                                            {!competitionDetails?.isUserEnrolled && <Button variant=\"contained\" color=\"primary\" onClick={() => setActiveStep(3)}>Submit Video</Button>}\n                                        </div> :\n                                        <div>\n                                            {/* <div>To upload video you need to login first</div> */}\n                                            <Button variant=\"contained\" color=\"primary\" onClick={() => proceedForLogin()}>Login</Button>\n                                        </div>\n                                    }\n                                    {loggedInUser && true && competitionDetails?.isUserEnrolled && <div className=\"change-video-wrap\">\n                                        <div >\n                                            Submitted details:\n                                        {/* <video width=\"400\" controls>\n                                            <source src={competitionDetails.userSubmitedDetails.vdo.url} />\n                                        </video> */}\n                                            <Button variant=\"contained\" color=\"primary\" onClick={() => setActiveStep(3)}>Change Video</Button>\n                                        </div>\n                                    </div>}\n                                </div>\n                            </div>}\n                            {ActiveStep === 3 && <div className=\"video-submit-section\">\n                                <div className=\"lessons-vdo-wrap\">\n                                    <div className=\"tabination-wrap\">\n                                        <div className=\"tab-btn-section\">\n                                            <button className=\"tab-links active\" data-id=\"tab-1\" onClick={e => toggleTabination(e)}>My video list</button>\n                                            <button className=\"tab-links\" data-id=\"tab-2\" onClick={e => toggleTabination(e)}>Upload new</button>\n                                        </div>\n                                        <div className=\"tab-content-wrap\">\n                                            <div id=\"tab-1\" className=\"inner-box js-inner-tab-box list-box active\">\n                                                {userUploadedVdos.length != 0 && userUploadedVdos.map((item, index) => {\n                                                    return <div className={item.isSelected ? 'vdo-outer selected-vdo' : 'vdo-outer'} key={index} onClick={(e) => selectVdo(e, item)}>\n                                                        <div className=\"vdo-wrap\" >\n                                                            <img src={item.thumbnail ? item.thumbnail : THUMBNAIL_URL} alt=\"video-url\" />\n                                                        </div>\n                                                        <div className=\"video-title\">{item.title}</div>\n                                                    </div>\n                                                })}\n                                            </div>\n                                            <div id=\"tab-2\" className=\"inner-box js-inner-tab-box new-upload-box\">\n                                                <div className=\"input-upload-wrap\">\n                                                    <input\n                                                        accept=\"video/mp4,video/x-m4v,video/*\"\n                                                        onChange={(e) => onChangeFile(e)}\n                                                        type=\"file\" id=\"video-upload\" title=\"upload video for competition\" />\n                                                    <i className=\"upload-icon\"><FaCloudUploadAlt /></i>\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                                {!disableSubmitVdoButton && <Button variant=\"contained\" color=\"primary\" onClick={() => setActiveStep(4)}>Upload</Button>}\n                            </div>}\n\n                            {ActiveStep === 4 && <div>\n                                <EnrollCompetition handleClose={(e) => handleClose(e)} changeSelectedVdo={() => setActiveStep(3)} />\n                            </div>}\n                            {SelectedVideo?.file && <VideoUploader selectedVdo={SelectedVideo} handleVdoUploadResponse={() => handleVdoUploadResponse(3)} />}\n                        </div>}\n                    </div>\n                </Fade>\n            </Modal>\n        </div>\n    )\n}","/Users/danny/Documents/Projects/boogalu/src/Constants/index.js",[],"/Users/danny/Documents/Projects/boogalu/src/Data/LessonsCategory.js",[],"/Users/danny/Documents/Projects/boogalu/src/Database/index.js",["304"],"import { data } from 'jquery';\nimport firebase from '../Services/firebase';\nconst database = firebase.firestore();\nexport default database;","/Users/danny/Documents/Projects/boogalu/src/Actions/Subscription/index.js",[],"/Users/danny/Documents/Projects/boogalu/src/Components/BuySubscription/index.js",["305","306","307","308","309","310"],"import React, { useRef, useState, useEffect } from 'react'\nimport Button from '@material-ui/core/Button';\nimport { useStoreConsumer } from '../../Providers/StateProvider';\nimport { useHistory } from \"react-router-dom\";\nimport { formatDate } from \"../../Services/Utils\";\nimport { disableLoginFlow } from \"../../Actions/LoginFlow\";\nimport { saveCompetition } from \"../../Services/EnrollCompetition.service\";\n// modal imports\nimport Modal from '@material-ui/core/Modal';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport Fade from '@material-ui/core/Fade';\nimport CloseIcon from '@material-ui/icons/Close';\nimport IconButton from '@material-ui/core/IconButton';\n\nexport default function BuySubsription({ handleClose, activeStep }) {\n    const history = useHistory();\n    const { state, dispatch } = useStoreConsumer();\n    const loggedInUser = state.loggedInUser;\n    const [openDetailsModal, setOpenDetailsModal] = useState(true);\n    const subscriptionDetails = state.activeSubscription;\n    const [subsciptionValidity, setsubsciptionValidity] = useState(null);\n    const competitionDetails = state.activeCompetition;\n\n    useEffect(() => {\n        let validUpto = new Date();\n        new Date(validUpto.setDate(validUpto.getDate() + 30));\n        let displayDate = formatDate(validUpto, 3);\n        setsubsciptionValidity(displayDate);\n    }, [subscriptionDetails])\n\n    const handleModalClose = () => {\n        setOpenDetailsModal(false);\n        dispatch(disableLoginFlow());\n        handleClose();\n    }\n\n    const submitForCompetition = () => {\n        const competitionObj = {\n            compId: competitionDetails.key,\n            compName: competitionDetails.name,\n            compImg: competitionDetails.img,\n            userId: loggedInUser.key,\n            vdo: {\n                key: competitionDetails.selectedVideo.key,\n                title: competitionDetails.selectedVideo.title,\n                thumbnail: competitionDetails.selectedVideo.thumbnail,\n                url: competitionDetails.selectedVideo.url,\n                desc: competitionDetails.selectedVideo.desc,\n            },\n            ageGroup: competitionDetails.ageGroup,\n            status: 'Submited'\n        }\n        console.log(competitionObj)\n        saveCompetition(competitionObj).subscribe((response) => {\n            console.log('vdo uploaded for competition suceess');\n            dispatch(disableLoginFlow());\n            history.push('/profile');\n        })\n    }\n\n    const proceedForCompetition = () => {\n        if (state.currentLoginFlow == 'competition-subscription') {\n            submitForCompetition();\n        } else history.push('/competition');\n    }\n    const proceedForPayment = () => {\n        var params = \"?phone=\" + loggedInUser.phone + \"&orderId=\" + subscriptionDetails.key + \"&amount=\" + subscriptionDetails.amount + \"&uId=\" + loggedInUser.uId + \"&email=\" + loggedInUser.email;\n        window.open('http://localhost:5001/boogalusite/us-central1/payment' + params, '_self');\n    }\n\n    return (\n        <div className=\"subscription-modal-wrap\">\n            <Modal\n                aria-labelledby=\"transition-modal-title\"\n                aria-describedby=\"transition-modal-description\"\n                className='subscription-modal-box'\n                open={openDetailsModal}\n                onClose={() => handleModalClose(false)}\n                closeAfterTransition\n                BackdropComponent={Backdrop}\n                BackdropProps={{\n                    timeout: 500,\n                }}\n            >\n                <Fade in={openDetailsModal}>\n                    <div className=\"subscription-inner-modal\">\n                        <IconButton className=\"close-modal-btn\" onClick={() => handleModalClose(false)}>\n                            <CloseIcon />\n                        </IconButton>\n                        <h3>Boogalu Subscription</h3>\n                        {activeStep == 1 && <div>\n                            <div className=\"subs-details-wrap\">\n                                <p>\n                                    Welcome, we are glad to see you. Now, you can subscribe to our application, and\n                                    get a chance to participate in any competition for one month.\n                                </p>\n                                <p> Just {subscriptionDetails.amount}/{subscriptionDetails.plans}</p>\n                                {/* <div>{subscriptionDetails.name}</div> */}\n                                {/* <div>{subscriptionDetails.desc}</div> */}\n                                {/* <div>{subscriptionDetails.amount} / {subscriptionDetails.plans}</div> */}\n                                {/* <div>Valid Upto- {subsciptionValidity}</div> */}\n                            </div>\n                            <Button variant=\"contained\" color=\"secondary\" onClick={(e) => proceedForPayment(e)}>Subscribe</Button>\n                        </div>}\n                        {activeStep == 2 && <div>\n                            <div>payment success</div>\n                            <Button variant=\"contained\" color=\"secondary\" onClick={(e) => proceedForCompetition()}>Continue to competition</Button>\n                        </div>}\n                        {activeStep == 3 && <div>\n                            <div>payment fail</div>\n                            <Button variant=\"contained\" color=\"secondary\" onClick={(e) => proceedForPayment(e)}>Retry</Button>\n                        </div>}\n                    </div>\n                </Fade>\n            </Modal>\n        </div>\n    )\n}","/Users/danny/Documents/Projects/boogalu/src/Components/EnrollCompetition/index.js",["311","312"],"import React, { useState, useEffect } from 'react'\nimport ArrowRightSharpIcon from '@material-ui/icons/ArrowRightSharp';\nimport Button from '@material-ui/core/Button';\nimport { useHistory } from \"react-router-dom\";\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { THUMBNAIL_URL } from '../../Constants';\nimport { useStoreConsumer } from '../../Providers/StateProvider';\nimport { saveCompetition, updateCompetition } from \"../../Services/EnrollCompetition.service\";\nimport { enableLoginFlow } from \"../../Actions/LoginFlow\";\nimport { setActiveCompetition } from \"../../Actions/Competition\";\n\nfunction EnrollCompetition({ handleClose, changeSelectedVdo }) {\n\n    const history = useHistory();\n    const { state, dispatch } = useStoreConsumer();\n    const loggedInUser = state.loggedInUser;\n    const competitionDetails = state.activeCompetition;\n    const SelectedVdo = competitionDetails.selectedVideo;\n    const [IsUserSubscribed, setIsUserSubscribed] = useState(null);\n\n    useEffect(() => {\n        if (loggedInUser.subscriptions) {\n            let isSubscribed = loggedInUser.subscriptions.filter((data) => data.type === 'competition-enrollment');\n            if (isSubscribed.length) setIsUserSubscribed(true);\n            else setIsUserSubscribed(false);\n        } else setIsUserSubscribed(false);\n    }, [])\n\n    const onAgeGroupChange = (groupValue) => {\n        let compData = { ...competitionDetails };\n        compData.ageGroup = groupValue;\n        dispatch(setActiveCompetition(compData));\n    }\n\n    const submitForCompetition = () => {\n        const competitionObj = {\n            compId: competitionDetails.key,\n            compName: competitionDetails.name,\n            compImg: competitionDetails.img,\n            userId: loggedInUser.key,\n            vdo: {\n                key: competitionDetails.selectedVideo.key,\n                title: competitionDetails.selectedVideo.title,\n                thumbnail: competitionDetails.selectedVideo.thumbnail,\n                url: competitionDetails.selectedVideo.url,\n                desc: competitionDetails.selectedVideo.desc,\n            },\n            ageGroup: competitionDetails.ageGroup,\n            status: 'Submited'\n        }\n        console.log(competitionObj)\n        if (competitionDetails.isUserEnrolled) {\n            updateCompetition(competitionDetails.userSubmitedDetails.key, competitionObj).subscribe((response) => {\n                console.log('vdo updated for competition suceess');\n                history.push('/profile');\n            })\n        } else {\n            saveCompetition(competitionObj).subscribe((response) => {\n                console.log('vdo uploaded for competition suceess');\n                history.push('/profile');\n            })\n        }\n\n        // handleClose();\n    }\n\n    const proceedForSubscription = () => {\n        handleClose();\n        dispatch(enableLoginFlow('competition-subscription'));\n        history.push({\n            pathname: '/subscription',\n            state: null\n        })\n    }\n\n    return (\n        <div className=\"final-enrollment-wrap\">\n            <h2 id=\"title\">Basic Details for Enrollment</h2>\n            {/* <img src={competitionDetails.img} alt={competitionDetails.name} style={{ width: '20%' }} /> */}\n            {/* <p id=\"description\">{competitionDetails.desc}</p> */}\n            <div className=\"userdata\">\n                <div className=\"user-info\"><label>Name:</label><span>{loggedInUser.name}</span></div>\n                <div className=\"user-info\"><label>Phone:</label><span>{loggedInUser.phone}</span></div>\n                <div className=\"user-info\"><label>Email:</label><span>{loggedInUser.email}</span></div>\n                <div className=\"user-info\"><label>Gender:</label><span>{loggedInUser.gender}</span></div>\n            </div>\n            {!competitionDetails?.isUserEnrolled ? <div className=\"age-group-dropdown\">\n                <FormControl variant=\"outlined\" className=\"input-field\">\n                    <InputLabel id=\"select-outlined-label\">Select Age Group</InputLabel>\n                    <Select\n                        labelId=\"select-outlined-label\"\n                        id=\"select-outlined\"\n                        value={competitionDetails.ageGroup}\n                        onChange={(e) => onAgeGroupChange(e.target.value)}\n                        label=\"Select Age Group\"\n                    >\n                        <MenuItem value=\"Age 4 to 13 years\">Age 4 to 13 years</MenuItem>\n                        <MenuItem value=\"Age 14 to 17 years\">Age 14 to 17 years</MenuItem>\n                        <MenuItem value=\"Age 18 and above\">Age 18 and above</MenuItem>\n                    </Select>\n                </FormControl>\n            </div>\n                :\n                <div>Submited age group - {competitionDetails.userSubmitedDetails.ageGroup}</div>\n            }\n            {SelectedVdo && <div className=\"selected-vdo\">\n                <div className=\"sub-title\">Selected video for competition</div>\n                <div className=\"change-link\" onClick={() => changeSelectedVdo()}>Change</div>\n                <div className=\"vdo-wrap\" >\n                    <img src={SelectedVdo.thumbnail ? SelectedVdo.thumbnail : THUMBNAIL_URL} style={{ width: \"50%\" }} />\n                    <div>{SelectedVdo.title}</div>\n                </div>\n            </div>}\n            {/* check for user subscribed or not */}\n            {IsUserSubscribed ?\n                <div>\n                    {!competitionDetails?.isUserEnrolled ? <Button variant=\"contained\" color=\"primary\" onClick={() => submitForCompetition()}>Complete Enrollment <ArrowRightSharpIcon /></Button>\n                        : <Button variant=\"contained\" color=\"primary\" onClick={() => updateCompetition()}>Update Competition<ArrowRightSharpIcon /></Button>\n                    }\n                </div> :\n                <div>\n                    {/* <div>To upload video you need to subscribe</div> */}\n                    <Button variant=\"contained\" color=\"primary\" onClick={() => proceedForSubscription()}>Continue</Button>\n                </div>\n            }\n        </div>\n    )\n}\n\nexport default EnrollCompetition\n","/Users/danny/Documents/Projects/boogalu/src/Components/Loader/index.js",[],"/Users/danny/Documents/Projects/boogalu/src/Actions/Loader/index.js",[],{"ruleId":"313","replacedBy":"314"},{"ruleId":"315","replacedBy":"316"},{"ruleId":"317","severity":1,"message":"318","line":5,"column":7,"nodeType":"319","messageId":"320","endLine":5,"endColumn":24},{"ruleId":"317","severity":1,"message":"321","line":2,"column":50,"nodeType":"319","messageId":"320","endLine":2,"endColumn":54},{"ruleId":"317","severity":1,"message":"322","line":1,"column":17,"nodeType":"319","messageId":"320","endLine":1,"endColumn":25},{"ruleId":"323","severity":1,"message":"324","line":26,"column":8,"nodeType":"325","endLine":26,"endColumn":10,"suggestions":"326"},{"ruleId":"327","severity":1,"message":"328","line":61,"column":66,"nodeType":"329","endLine":61,"endColumn":81},{"ruleId":"330","severity":1,"message":"331","line":78,"column":29,"nodeType":"332","endLine":78,"endColumn":83},{"ruleId":"327","severity":1,"message":"328","line":84,"column":114,"nodeType":"329","endLine":84,"endColumn":129},{"ruleId":"327","severity":1,"message":"328","line":90,"column":110,"nodeType":"329","endLine":90,"endColumn":125},{"ruleId":"327","severity":1,"message":"328","line":96,"column":109,"nodeType":"329","endLine":96,"endColumn":124},{"ruleId":"317","severity":1,"message":"333","line":18,"column":21,"nodeType":"319","messageId":"320","endLine":18,"endColumn":31},{"ruleId":"323","severity":1,"message":"334","line":34,"column":8,"nodeType":"325","endLine":34,"endColumn":28,"suggestions":"335"},{"ruleId":"336","severity":1,"message":"337","line":62,"column":28,"nodeType":"338","messageId":"339","endLine":62,"endColumn":30},{"ruleId":"340","severity":1,"message":"341","line":155,"column":9,"nodeType":"342","messageId":"343","endLine":214,"endColumn":10},{"ruleId":"336","severity":1,"message":"344","line":172,"column":52,"nodeType":"338","messageId":"339","endLine":172,"endColumn":54},{"ruleId":"336","severity":1,"message":"344","line":173,"column":57,"nodeType":"338","messageId":"339","endLine":173,"endColumn":59},{"ruleId":"336","severity":1,"message":"344","line":174,"column":57,"nodeType":"338","messageId":"339","endLine":174,"endColumn":59},{"ruleId":"336","severity":1,"message":"344","line":198,"column":52,"nodeType":"338","messageId":"339","endLine":198,"endColumn":54},{"ruleId":"336","severity":1,"message":"344","line":199,"column":57,"nodeType":"338","messageId":"339","endLine":199,"endColumn":59},{"ruleId":"336","severity":1,"message":"344","line":200,"column":57,"nodeType":"338","messageId":"339","endLine":200,"endColumn":59},{"ruleId":"345","severity":1,"message":"346","line":310,"column":17,"nodeType":"332","endLine":310,"endColumn":36},{"ruleId":"323","severity":1,"message":"324","line":80,"column":8,"nodeType":"325","endLine":80,"endColumn":18,"suggestions":"347"},{"ruleId":"317","severity":1,"message":"348","line":83,"column":15,"nodeType":"319","messageId":"320","endLine":83,"endColumn":32},{"ruleId":"330","severity":1,"message":"349","line":224,"column":25,"nodeType":"332","endLine":224,"endColumn":89},{"ruleId":"317","severity":1,"message":"350","line":9,"column":8,"nodeType":"319","messageId":"320","endLine":9,"endColumn":21},{"ruleId":"317","severity":1,"message":"351","line":38,"column":11,"nodeType":"319","messageId":"320","endLine":38,"endColumn":24},{"ruleId":"317","severity":1,"message":"352","line":63,"column":11,"nodeType":"319","messageId":"320","endLine":63,"endColumn":18},{"ruleId":"317","severity":1,"message":"353","line":71,"column":32,"nodeType":"319","messageId":"320","endLine":71,"endColumn":53},{"ruleId":"323","severity":1,"message":"354","line":87,"column":8,"nodeType":"325","endLine":87,"endColumn":10,"suggestions":"355"},{"ruleId":"336","severity":1,"message":"344","line":133,"column":72,"nodeType":"338","messageId":"339","endLine":133,"endColumn":74},{"ruleId":"345","severity":1,"message":"346","line":227,"column":41,"nodeType":"332","endLine":227,"endColumn":74},{"ruleId":"317","severity":1,"message":"356","line":13,"column":10,"nodeType":"319","messageId":"320","endLine":13,"endColumn":18},{"ruleId":"336","severity":1,"message":"344","line":27,"column":66,"nodeType":"338","messageId":"339","endLine":27,"endColumn":68},{"ruleId":"336","severity":1,"message":"344","line":27,"column":113,"nodeType":"338","messageId":"339","endLine":27,"endColumn":115},{"ruleId":"336","severity":1,"message":"337","line":56,"column":34,"nodeType":"338","messageId":"339","endLine":56,"endColumn":36},{"ruleId":"357","severity":1,"message":"358","line":22,"column":51,"nodeType":"359","messageId":"360","endLine":22,"endColumn":53},{"ruleId":"336","severity":1,"message":"344","line":23,"column":104,"nodeType":"338","messageId":"339","endLine":23,"endColumn":106},{"ruleId":"336","severity":1,"message":"344","line":50,"column":36,"nodeType":"338","messageId":"339","endLine":50,"endColumn":38},{"ruleId":"323","severity":1,"message":"361","line":69,"column":8,"nodeType":"325","endLine":69,"endColumn":10,"suggestions":"362"},{"ruleId":"317","severity":1,"message":"363","line":1,"column":27,"nodeType":"319","messageId":"320","endLine":1,"endColumn":33},{"ruleId":"317","severity":1,"message":"364","line":1,"column":35,"nodeType":"319","messageId":"320","endLine":1,"endColumn":44},{"ruleId":"317","severity":1,"message":"365","line":6,"column":28,"nodeType":"319","messageId":"320","endLine":6,"endColumn":45},{"ruleId":"317","severity":1,"message":"366","line":10,"column":38,"nodeType":"319","messageId":"320","endLine":10,"endColumn":63},{"ruleId":"336","severity":1,"message":"344","line":29,"column":31,"nodeType":"338","messageId":"339","endLine":29,"endColumn":33},{"ruleId":"336","severity":1,"message":"344","line":56,"column":44,"nodeType":"338","messageId":"339","endLine":56,"endColumn":46},{"ruleId":"336","severity":1,"message":"344","line":64,"column":40,"nodeType":"338","messageId":"339","endLine":64,"endColumn":42},{"ruleId":"323","severity":1,"message":"367","line":69,"column":8,"nodeType":"325","endLine":69,"endColumn":10,"suggestions":"368"},{"ruleId":"323","severity":1,"message":"369","line":74,"column":8,"nodeType":"325","endLine":74,"endColumn":28,"suggestions":"370"},{"ruleId":"336","severity":1,"message":"337","line":68,"column":38,"nodeType":"338","messageId":"339","endLine":68,"endColumn":40},{"ruleId":"357","severity":1,"message":"358","line":72,"column":69,"nodeType":"359","messageId":"360","endLine":72,"endColumn":71},{"ruleId":"357","severity":1,"message":"358","line":73,"column":51,"nodeType":"359","messageId":"360","endLine":73,"endColumn":53},{"ruleId":"336","severity":1,"message":"337","line":76,"column":52,"nodeType":"338","messageId":"339","endLine":76,"endColumn":54},{"ruleId":"336","severity":1,"message":"337","line":78,"column":46,"nodeType":"338","messageId":"339","endLine":78,"endColumn":48},{"ruleId":"357","severity":1,"message":"358","line":79,"column":60,"nodeType":"359","messageId":"360","endLine":79,"endColumn":62},{"ruleId":"323","severity":1,"message":"371","line":89,"column":8,"nodeType":"325","endLine":89,"endColumn":20,"suggestions":"372"},{"ruleId":"336","severity":1,"message":"337","line":127,"column":34,"nodeType":"338","messageId":"339","endLine":127,"endColumn":36},{"ruleId":"336","severity":1,"message":"344","line":136,"column":48,"nodeType":"338","messageId":"339","endLine":136,"endColumn":50},{"ruleId":"336","severity":1,"message":"344","line":137,"column":53,"nodeType":"338","messageId":"339","endLine":137,"endColumn":55},{"ruleId":"336","severity":1,"message":"344","line":138,"column":48,"nodeType":"338","messageId":"339","endLine":138,"endColumn":50},{"ruleId":"340","severity":1,"message":"341","line":157,"column":9,"nodeType":"342","messageId":"343","endLine":163,"endColumn":10},{"ruleId":"340","severity":1,"message":"341","line":167,"column":9,"nodeType":"342","messageId":"343","endLine":173,"endColumn":10},{"ruleId":"357","severity":1,"message":"358","line":180,"column":45,"nodeType":"359","messageId":"360","endLine":180,"endColumn":47},{"ruleId":"336","severity":1,"message":"337","line":184,"column":28,"nodeType":"338","messageId":"339","endLine":184,"endColumn":30},{"ruleId":"357","severity":1,"message":"358","line":191,"column":69,"nodeType":"359","messageId":"360","endLine":191,"endColumn":71},{"ruleId":"357","severity":1,"message":"358","line":192,"column":47,"nodeType":"359","messageId":"360","endLine":192,"endColumn":49},{"ruleId":"336","severity":1,"message":"337","line":195,"column":48,"nodeType":"338","messageId":"339","endLine":195,"endColumn":50},{"ruleId":"336","severity":1,"message":"337","line":197,"column":42,"nodeType":"338","messageId":"339","endLine":197,"endColumn":44},{"ruleId":"357","severity":1,"message":"358","line":198,"column":56,"nodeType":"359","messageId":"360","endLine":198,"endColumn":58},{"ruleId":"336","severity":1,"message":"337","line":208,"column":34,"nodeType":"338","messageId":"339","endLine":208,"endColumn":36},{"ruleId":"336","severity":1,"message":"337","line":215,"column":25,"nodeType":"338","messageId":"339","endLine":215,"endColumn":27},{"ruleId":"336","severity":1,"message":"337","line":337,"column":64,"nodeType":"338","messageId":"339","endLine":337,"endColumn":66},{"ruleId":"336","severity":1,"message":"337","line":358,"column":29,"nodeType":"338","messageId":"339","endLine":358,"endColumn":31},{"ruleId":"336","severity":1,"message":"337","line":366,"column":77,"nodeType":"338","messageId":"339","endLine":366,"endColumn":79},{"ruleId":"336","severity":1,"message":"337","line":367,"column":45,"nodeType":"338","messageId":"339","endLine":367,"endColumn":47},{"ruleId":"336","severity":1,"message":"344","line":373,"column":25,"nodeType":"338","messageId":"339","endLine":373,"endColumn":27},{"ruleId":"336","severity":1,"message":"337","line":554,"column":37,"nodeType":"338","messageId":"339","endLine":554,"endColumn":39},{"ruleId":"317","severity":1,"message":"373","line":5,"column":13,"nodeType":"319","messageId":"320","endLine":5,"endColumn":14},{"ruleId":"317","severity":1,"message":"374","line":9,"column":20,"nodeType":"319","messageId":"320","endLine":9,"endColumn":28},{"ruleId":"375","severity":1,"message":"376","line":24,"column":25,"nodeType":"332","endLine":24,"endColumn":223},{"ruleId":"375","severity":1,"message":"376","line":27,"column":25,"nodeType":"332","endLine":27,"endColumn":223},{"ruleId":"375","severity":1,"message":"376","line":30,"column":25,"nodeType":"332","endLine":30,"endColumn":223},{"ruleId":"323","severity":1,"message":"377","line":32,"column":8,"nodeType":"325","endLine":32,"endColumn":10,"suggestions":"378"},{"ruleId":"317","severity":1,"message":"352","line":47,"column":11,"nodeType":"319","messageId":"320","endLine":47,"endColumn":18},{"ruleId":"336","severity":1,"message":"344","line":98,"column":48,"nodeType":"338","messageId":"339","endLine":98,"endColumn":50},{"ruleId":"340","severity":1,"message":"341","line":24,"column":17,"nodeType":"342","messageId":"343","endLine":31,"endColumn":18},{"ruleId":"340","severity":1,"message":"341","line":61,"column":17,"nodeType":"342","messageId":"343","endLine":68,"endColumn":18},{"ruleId":"336","severity":1,"message":"344","line":26,"column":16,"nodeType":"338","messageId":"339","endLine":26,"endColumn":18},{"ruleId":"336","severity":1,"message":"344","line":27,"column":16,"nodeType":"338","messageId":"339","endLine":27,"endColumn":18},{"ruleId":"336","severity":1,"message":"344","line":28,"column":16,"nodeType":"338","messageId":"339","endLine":28,"endColumn":18},{"ruleId":"336","severity":1,"message":"344","line":58,"column":98,"nodeType":"338","messageId":"339","endLine":58,"endColumn":100},{"ruleId":"357","severity":1,"message":"358","line":60,"column":43,"nodeType":"359","messageId":"360","endLine":60,"endColumn":45},{"ruleId":"336","severity":1,"message":"344","line":62,"column":45,"nodeType":"338","messageId":"339","endLine":62,"endColumn":47},{"ruleId":"323","severity":1,"message":"379","line":77,"column":8,"nodeType":"325","endLine":77,"endColumn":20,"suggestions":"380"},{"ruleId":"317","severity":1,"message":"381","line":80,"column":15,"nodeType":"319","messageId":"320","endLine":80,"endColumn":29},{"ruleId":"336","severity":1,"message":"344","line":83,"column":30,"nodeType":"338","messageId":"339","endLine":83,"endColumn":32},{"ruleId":"336","severity":1,"message":"344","line":109,"column":97,"nodeType":"338","messageId":"339","endLine":109,"endColumn":99},{"ruleId":"357","severity":1,"message":"358","line":117,"column":32,"nodeType":"359","messageId":"360","endLine":117,"endColumn":34},{"ruleId":"336","severity":1,"message":"344","line":118,"column":26,"nodeType":"338","messageId":"339","endLine":118,"endColumn":28},{"ruleId":"357","severity":1,"message":"358","line":181,"column":43,"nodeType":"359","messageId":"360","endLine":181,"endColumn":45},{"ruleId":"336","severity":1,"message":"344","line":183,"column":45,"nodeType":"338","messageId":"339","endLine":183,"endColumn":47},{"ruleId":"336","severity":1,"message":"344","line":214,"column":42,"nodeType":"338","messageId":"339","endLine":214,"endColumn":44},{"ruleId":"336","severity":1,"message":"344","line":217,"column":42,"nodeType":"338","messageId":"339","endLine":217,"endColumn":44},{"ruleId":"336","severity":1,"message":"344","line":217,"column":61,"nodeType":"338","messageId":"339","endLine":217,"endColumn":63},{"ruleId":"336","severity":1,"message":"344","line":221,"column":42,"nodeType":"338","messageId":"339","endLine":221,"endColumn":44},{"ruleId":"336","severity":1,"message":"344","line":221,"column":61,"nodeType":"338","messageId":"339","endLine":221,"endColumn":63},{"ruleId":"336","severity":1,"message":"337","line":324,"column":74,"nodeType":"338","messageId":"339","endLine":324,"endColumn":76},{"ruleId":"317","severity":1,"message":"382","line":1,"column":10,"nodeType":"319","messageId":"320","endLine":1,"endColumn":14},{"ruleId":"317","severity":1,"message":"363","line":1,"column":17,"nodeType":"319","messageId":"320","endLine":1,"endColumn":23},{"ruleId":"317","severity":1,"message":"383","line":21,"column":12,"nodeType":"319","messageId":"320","endLine":21,"endColumn":31},{"ruleId":"336","severity":1,"message":"344","line":62,"column":36,"nodeType":"338","messageId":"339","endLine":62,"endColumn":38},{"ruleId":"336","severity":1,"message":"344","line":91,"column":37,"nodeType":"338","messageId":"339","endLine":91,"endColumn":39},{"ruleId":"336","severity":1,"message":"344","line":105,"column":37,"nodeType":"338","messageId":"339","endLine":105,"endColumn":39},{"ruleId":"336","severity":1,"message":"344","line":109,"column":37,"nodeType":"338","messageId":"339","endLine":109,"endColumn":39},{"ruleId":"323","severity":1,"message":"384","line":30,"column":8,"nodeType":"325","endLine":30,"endColumn":10,"suggestions":"385"},{"ruleId":"345","severity":1,"message":"346","line":113,"column":21,"nodeType":"332","endLine":113,"endColumn":121},"no-native-reassign",["386"],"no-negated-in-lhs",["387"],"no-unused-vars","'loggedInUserState' is assigned a value but never used.","Identifier","unusedVar","'Link' is defined but never used.","'useState' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'history?.location?.pathname'. Either include it or remove the dependency array.","ArrayExpression",["388"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'signupUser' is defined but never used.","React Hook useEffect has a missing dependency: 'signinUser'. Either include it or remove the dependency array.",["389"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","Expected '===' and instead saw '=='.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.",["390"],"'listenRouteChange' is assigned a value but never used.","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'ImageUploader' is defined but never used.","'onimageUpload' is assigned a value but never used.","'classes' is assigned a value but never used.","'setUserLikedVideoList' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'loggedInUser.key' and 'onWindowScroll'. Either include them or remove the dependency array.",["391"],"'toBase64' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has missing dependencies: 'dispatch', 'loggedInUser.email', 'loggedInUser.phone', 'loggedInUser.subscriptions', 'prepareUserCompData', and 'state.currentLoginFlow'. Either include them or remove the dependency array.",["392"],"'useRef' is defined but never used.","'useEffect' is defined but never used.","'setActiveCategory' is assigned a value but never used.","'SUBSCRIPTION_ENDED_STATUS' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch', 'history', 'loggedInUser', 'state.activeSubscription.key', 'state.activeSubscription.type', and 'state.currentLoginFlow'. Either include them or remove the dependency array.",["393"],"React Hook useEffect has a missing dependency: 'loggedInUser?.subscriptions'. Either include it or remove the dependency array.",["394"],"React Hook useEffect has a missing dependency: 'stepData'. Either include it or remove the dependency array.",["395"],"'$' is defined but never used.","'dispatch' is assigned a value but never used.","jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["396"],"React Hook useEffect has missing dependencies: 'competitionDetails', 'dispatch', 'loggedInUser.email', 'loggedInUser.key', 'loggedInUser.phone', and 'userUploadedVdos.length'. Either include them or remove the dependency array.",["397"],"'getCurrentData' is assigned a value but never used.","'data' is defined but never used.","'subsciptionValidity' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'loggedInUser.subscriptions'. Either include it or remove the dependency array.",["398"],"no-global-assign","no-unsafe-negation",{"desc":"399","fix":"400"},{"desc":"401","fix":"402"},{"desc":"403","fix":"404"},{"desc":"405","fix":"406"},{"desc":"407","fix":"408"},{"desc":"409","fix":"410"},{"desc":"411","fix":"412"},{"desc":"413","fix":"414"},{"desc":"415","fix":"416"},{"desc":"417","fix":"418"},{"desc":"419","fix":"420"},"Update the dependencies array to be: [history?.location?.pathname]",{"range":"421","text":"422"},"Update the dependencies array to be: [signinUser, thirdPartyResponse]",{"range":"423","text":"424"},"Update the dependencies array to be: [history?.location?.pathname, isMobile]",{"range":"425","text":"426"},"Update the dependencies array to be: [loggedInUser.key, onWindowScroll]",{"range":"427","text":"428"},"Update the dependencies array to be: [dispatch, loggedInUser.email, loggedInUser.phone, loggedInUser.subscriptions, prepareUserCompData, state.currentLoginFlow]",{"range":"429","text":"430"},"Update the dependencies array to be: [dispatch, history, loggedInUser, state.activeSubscription.key, state.activeSubscription.type, state.currentLoginFlow]",{"range":"431","text":"432"},"Update the dependencies array to be: [loggedInUser?.subscriptions, state.loggedInUser]",{"range":"433","text":"434"},"Update the dependencies array to be: [activeStep, stepData]",{"range":"435","text":"436"},"Update the dependencies array to be: [dispatch]",{"range":"437","text":"438"},"Update the dependencies array to be: [ActiveStep, competitionDetails, dispatch, loggedInUser.email, loggedInUser.key, loggedInUser.phone, userUploadedVdos.length]",{"range":"439","text":"440"},"Update the dependencies array to be: [loggedInUser.subscriptions]",{"range":"441","text":"442"},[925,927],"[history?.location?.pathname]",[1817,1837],"[signinUser, thirdPartyResponse]",[3285,3295],"[history?.location?.pathname, isMobile]",[3342,3344],"[loggedInUser.key, onWindowScroll]",[3209,3211],"[dispatch, loggedInUser.email, loggedInUser.phone, loggedInUser.subscriptions, prepareUserCompData, state.currentLoginFlow]",[3568,3570],"[dispatch, history, loggedInUser, state.activeSubscription.key, state.activeSubscription.type, state.currentLoginFlow]",[3793,3813],"[loggedInUser?.subscriptions, state.loggedInUser]",[4267,4279],"[activeStep, stepData]",[1590,1592],"[dispatch]",[3703,3715],"[ActiveStep, competitionDetails, dispatch, loggedInUser.email, loggedInUser.key, loggedInUser.phone, userUploadedVdos.length]",[1480,1482],"[loggedInUser.subscriptions]"]